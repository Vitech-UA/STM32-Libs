
STM32F051_RFM69_Cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  08002eac  08002eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800302c  0800302c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800302c  0800302c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800302c  0800302c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003034  08003034  00013034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000068  080030a0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080030a0  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005ba4  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000c4e  00000000  00000000  00025c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000460  00000000  00000000  00026888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000418  00000000  00000000  00026ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f398  00000000  00000000  00027100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003397  00000000  00000000  00036498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000452f9  00000000  00000000  0003982f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0007eb28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a4c  00000000  00000000  0007eb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002e94 	.word	0x08002e94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08002e94 	.word	0x08002e94

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	0415      	lsls	r5, r2, #16
 800040c:	0c2d      	lsrs	r5, r5, #16
 800040e:	000f      	movs	r7, r1
 8000410:	0001      	movs	r1, r0
 8000412:	002e      	movs	r6, r5
 8000414:	46c6      	mov	lr, r8
 8000416:	4684      	mov	ip, r0
 8000418:	0400      	lsls	r0, r0, #16
 800041a:	0c14      	lsrs	r4, r2, #16
 800041c:	0c00      	lsrs	r0, r0, #16
 800041e:	0c09      	lsrs	r1, r1, #16
 8000420:	4346      	muls	r6, r0
 8000422:	434d      	muls	r5, r1
 8000424:	4360      	muls	r0, r4
 8000426:	4361      	muls	r1, r4
 8000428:	1940      	adds	r0, r0, r5
 800042a:	0c34      	lsrs	r4, r6, #16
 800042c:	1824      	adds	r4, r4, r0
 800042e:	b500      	push	{lr}
 8000430:	42a5      	cmp	r5, r4
 8000432:	d903      	bls.n	800043c <__aeabi_lmul+0x34>
 8000434:	2080      	movs	r0, #128	; 0x80
 8000436:	0240      	lsls	r0, r0, #9
 8000438:	4680      	mov	r8, r0
 800043a:	4441      	add	r1, r8
 800043c:	0c25      	lsrs	r5, r4, #16
 800043e:	186d      	adds	r5, r5, r1
 8000440:	4661      	mov	r1, ip
 8000442:	4359      	muls	r1, r3
 8000444:	437a      	muls	r2, r7
 8000446:	0430      	lsls	r0, r6, #16
 8000448:	1949      	adds	r1, r1, r5
 800044a:	0424      	lsls	r4, r4, #16
 800044c:	0c00      	lsrs	r0, r0, #16
 800044e:	1820      	adds	r0, r4, r0
 8000450:	1889      	adds	r1, r1, r2
 8000452:	bc80      	pop	{r7}
 8000454:	46b8      	mov	r8, r7
 8000456:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	0002      	movs	r2, r0
 8000460:	6039      	str	r1, [r7, #0]
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000466:	1dfb      	adds	r3, r7, #7
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	2b7f      	cmp	r3, #127	; 0x7f
 800046c:	d828      	bhi.n	80004c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800046e:	4a2f      	ldr	r2, [pc, #188]	; (800052c <__NVIC_SetPriority+0xd4>)
 8000470:	1dfb      	adds	r3, r7, #7
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	b25b      	sxtb	r3, r3
 8000476:	089b      	lsrs	r3, r3, #2
 8000478:	33c0      	adds	r3, #192	; 0xc0
 800047a:	009b      	lsls	r3, r3, #2
 800047c:	589b      	ldr	r3, [r3, r2]
 800047e:	1dfa      	adds	r2, r7, #7
 8000480:	7812      	ldrb	r2, [r2, #0]
 8000482:	b252      	sxtb	r2, r2
 8000484:	2103      	movs	r1, #3
 8000486:	400a      	ands	r2, r1
 8000488:	00d2      	lsls	r2, r2, #3
 800048a:	21ff      	movs	r1, #255	; 0xff
 800048c:	4091      	lsls	r1, r2
 800048e:	000a      	movs	r2, r1
 8000490:	43d2      	mvns	r2, r2
 8000492:	401a      	ands	r2, r3
 8000494:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	019b      	lsls	r3, r3, #6
 800049a:	22ff      	movs	r2, #255	; 0xff
 800049c:	401a      	ands	r2, r3
 800049e:	1dfb      	adds	r3, r7, #7
 80004a0:	781b      	ldrb	r3, [r3, #0]
 80004a2:	b25b      	sxtb	r3, r3
 80004a4:	2003      	movs	r0, #3
 80004a6:	4003      	ands	r3, r0
 80004a8:	00db      	lsls	r3, r3, #3
 80004aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ac:	481f      	ldr	r0, [pc, #124]	; (800052c <__NVIC_SetPriority+0xd4>)
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b25b      	sxtb	r3, r3
 80004b4:	089b      	lsrs	r3, r3, #2
 80004b6:	430a      	orrs	r2, r1
 80004b8:	33c0      	adds	r3, #192	; 0xc0
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80004be:	e031      	b.n	8000524 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004c0:	4a1b      	ldr	r2, [pc, #108]	; (8000530 <__NVIC_SetPriority+0xd8>)
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	210f      	movs	r1, #15
 80004ca:	400b      	ands	r3, r1
 80004cc:	3b08      	subs	r3, #8
 80004ce:	089b      	lsrs	r3, r3, #2
 80004d0:	3306      	adds	r3, #6
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	18d3      	adds	r3, r2, r3
 80004d6:	3304      	adds	r3, #4
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	1dfa      	adds	r2, r7, #7
 80004dc:	7812      	ldrb	r2, [r2, #0]
 80004de:	b252      	sxtb	r2, r2
 80004e0:	2103      	movs	r1, #3
 80004e2:	400a      	ands	r2, r1
 80004e4:	00d2      	lsls	r2, r2, #3
 80004e6:	21ff      	movs	r1, #255	; 0xff
 80004e8:	4091      	lsls	r1, r2
 80004ea:	000a      	movs	r2, r1
 80004ec:	43d2      	mvns	r2, r2
 80004ee:	401a      	ands	r2, r3
 80004f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	019b      	lsls	r3, r3, #6
 80004f6:	22ff      	movs	r2, #255	; 0xff
 80004f8:	401a      	ands	r2, r3
 80004fa:	1dfb      	adds	r3, r7, #7
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	b25b      	sxtb	r3, r3
 8000500:	2003      	movs	r0, #3
 8000502:	4003      	ands	r3, r0
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000508:	4809      	ldr	r0, [pc, #36]	; (8000530 <__NVIC_SetPriority+0xd8>)
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b25b      	sxtb	r3, r3
 8000510:	240f      	movs	r4, #15
 8000512:	4023      	ands	r3, r4
 8000514:	3b08      	subs	r3, #8
 8000516:	089b      	lsrs	r3, r3, #2
 8000518:	430a      	orrs	r2, r1
 800051a:	3306      	adds	r3, #6
 800051c:	009b      	lsls	r3, r3, #2
 800051e:	18c3      	adds	r3, r0, r3
 8000520:	3304      	adds	r3, #4
 8000522:	601a      	str	r2, [r3, #0]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b003      	add	sp, #12
 800052a:	bd90      	pop	{r4, r7, pc}
 800052c:	e000e100 	.word	0xe000e100
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	1e5a      	subs	r2, r3, #1
 8000540:	2380      	movs	r3, #128	; 0x80
 8000542:	045b      	lsls	r3, r3, #17
 8000544:	429a      	cmp	r2, r3
 8000546:	d301      	bcc.n	800054c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000548:	2301      	movs	r3, #1
 800054a:	e010      	b.n	800056e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <SysTick_Config+0x44>)
 800054e:	687a      	ldr	r2, [r7, #4]
 8000550:	3a01      	subs	r2, #1
 8000552:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000554:	2301      	movs	r3, #1
 8000556:	425b      	negs	r3, r3
 8000558:	2103      	movs	r1, #3
 800055a:	0018      	movs	r0, r3
 800055c:	f7ff ff7c 	bl	8000458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <SysTick_Config+0x44>)
 8000562:	2200      	movs	r2, #0
 8000564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <SysTick_Config+0x44>)
 8000568:	2207      	movs	r2, #7
 800056a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800056c:	2300      	movs	r3, #0
}
 800056e:	0018      	movs	r0, r3
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			; (mov r8, r8)
 8000578:	e000e010 	.word	0xe000e010

0800057c <_ZN4GpioC1EP12GPIO_TypeDeft>:
 */

#include "stm32f0xx.h"
#include "Gpio.h"

Gpio::Gpio(GPIO_TypeDef *PORT, uint16_t gpio_pin) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	1dbb      	adds	r3, r7, #6
 8000588:	801a      	strh	r2, [r3, #0]
	// Ініціалізація піна
	item_port = PORT;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	601a      	str	r2, [r3, #0]
	item_pin = gpio_pin;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	1dba      	adds	r2, r7, #6
 8000594:	8812      	ldrh	r2, [r2, #0]
 8000596:	809a      	strh	r2, [r3, #4]
	this->GpioEnableClk(); // Ввімкнути тактування вибраного порта
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	0018      	movs	r0, r3
 800059c:	f000 f806 	bl	80005ac <_ZN4Gpio13GpioEnableClkEv>

}
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	0018      	movs	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b004      	add	sp, #16
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <_ZN4Gpio13GpioEnableClkEv>:
void Gpio::GpioEnableClk() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

	GPIO_TypeDef *PORT = this->item_port;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	60fb      	str	r3, [r7, #12]
// Перед спробою ввімкнення тактування проходить перевірка, чи не було воно ввімкнене раніше.
	if (PORT == GPIOA) {
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	2390      	movs	r3, #144	; 0x90
 80005be:	05db      	lsls	r3, r3, #23
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d111      	bne.n	80005e8 <_ZN4Gpio13GpioEnableClkEv+0x3c>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOAEN)) {
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	029b      	lsls	r3, r3, #10
 80005cc:	4013      	ands	r3, r2
 80005ce:	425a      	negs	r2, r3
 80005d0:	4153      	adcs	r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d048      	beq.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	0289      	lsls	r1, r1, #10
 80005e2:	430a      	orrs	r2, r1
 80005e4:	615a      	str	r2, [r3, #20]
	} else if (PORT == GPIOD) {
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
		}
	}
}
 80005e6:	e040      	b.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOB) {
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a23      	ldr	r2, [pc, #140]	; (8000678 <_ZN4Gpio13GpioEnableClkEv+0xcc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d111      	bne.n	8000614 <_ZN4Gpio13GpioEnableClkEv+0x68>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOBEN)) {
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	02db      	lsls	r3, r3, #11
 80005f8:	4013      	ands	r3, r2
 80005fa:	425a      	negs	r2, r3
 80005fc:	4153      	adcs	r3, r2
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d032      	beq.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	02c9      	lsls	r1, r1, #11
 800060e:	430a      	orrs	r2, r1
 8000610:	615a      	str	r2, [r3, #20]
}
 8000612:	e02a      	b.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOC) {
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4a19      	ldr	r2, [pc, #100]	; (800067c <_ZN4Gpio13GpioEnableClkEv+0xd0>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d111      	bne.n	8000640 <_ZN4Gpio13GpioEnableClkEv+0x94>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOCEN)) {
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800061e:	695a      	ldr	r2, [r3, #20]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	031b      	lsls	r3, r3, #12
 8000624:	4013      	ands	r3, r2
 8000626:	425a      	negs	r2, r3
 8000628:	4153      	adcs	r3, r2
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d01c      	beq.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	0309      	lsls	r1, r1, #12
 800063a:	430a      	orrs	r2, r1
 800063c:	615a      	str	r2, [r3, #20]
}
 800063e:	e014      	b.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOD) {
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <_ZN4Gpio13GpioEnableClkEv+0xd4>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d110      	bne.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	035b      	lsls	r3, r3, #13
 8000650:	4013      	ands	r3, r2
 8000652:	425a      	negs	r2, r3
 8000654:	4153      	adcs	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	0349      	lsls	r1, r1, #13
 8000666:	430a      	orrs	r2, r1
 8000668:	615a      	str	r2, [r3, #20]
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b004      	add	sp, #16
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000
 8000678:	48000400 	.word	0x48000400
 800067c:	48000800 	.word	0x48000800
 8000680:	48000c00 	.word	0x48000c00

08000684 <_ZN4Gpio17GpioSetOutputTypeE2OT>:

void Gpio::GpioSetOutputType(OUTPUT_TYPE_t GpioOutputType) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	000a      	movs	r2, r1
 800068e:	1cfb      	adds	r3, r7, #3
 8000690:	701a      	strb	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << GpioOutputType;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	1cfb      	adds	r3, r7, #3
 800069a:	7819      	ldrb	r1, [r3, #0]
 800069c:	1cfb      	adds	r3, r7, #3
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4099      	lsls	r1, r3
 80006a2:	000b      	movs	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	430a      	orrs	r2, r1
 80006ac:	605a      	str	r2, [r3, #4]
}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>:
void Gpio::GpioSetOutputSpeed(OUT_SPEED_t GpioOutputSpeed) {
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	000a      	movs	r2, r1
 80006c0:	1cfb      	adds	r3, r7, #3
 80006c2:	701a      	strb	r2, [r3, #0]

	this->item_port->OSPEEDR |= (GpioOutputSpeed << (this->item_pin * 2));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	1cfb      	adds	r3, r7, #3
 80006cc:	7819      	ldrb	r1, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	889b      	ldrh	r3, [r3, #4]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4099      	lsls	r1, r3
 80006d6:	000b      	movs	r3, r1
 80006d8:	0019      	movs	r1, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	430a      	orrs	r2, r1
 80006e0:	609a      	str	r2, [r3, #8]
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_ZN4Gpio7SetAsAFE7GPIO_AF>:
	this->item_port->BSRR |= ((1 << this->item_pin) << 16U);
}
void Gpio::Toggle(void) {
	this->item_port->ODR ^= (1 << this->item_pin);
}
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction) {
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	000a      	movs	r2, r1
 80006f4:	1cfb      	adds	r3, r7, #3
 80006f6:	701a      	strb	r2, [r3, #0]

	if (this->item_pin <= 7) // For gpio0..gpio7
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	889b      	ldrh	r3, [r3, #4]
 80006fc:	2b07      	cmp	r3, #7
 80006fe:	d81d      	bhi.n	800073c <_ZN4Gpio7SetAsAFE7GPIO_AF+0x52>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	889b      	ldrh	r3, [r3, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	2102      	movs	r1, #2
 800070e:	4099      	lsls	r1, r3
 8000710:	000b      	movs	r3, r1
 8000712:	0019      	movs	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	430a      	orrs	r2, r1
 800071a:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6a1a      	ldr	r2, [r3, #32]
 8000722:	1cfb      	adds	r3, r7, #3
 8000724:	7819      	ldrb	r1, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	889b      	ldrh	r3, [r3, #4]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4099      	lsls	r1, r3
 800072e:	000b      	movs	r3, r1
 8000730:	0019      	movs	r1, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	430a      	orrs	r2, r1
 8000738:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 800073a:	e027      	b.n	800078c <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	889b      	ldrh	r3, [r3, #4]
 8000740:	2b07      	cmp	r3, #7
 8000742:	d922      	bls.n	800078a <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	889b      	ldrh	r3, [r3, #4]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d81e      	bhi.n	800078a <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	889b      	ldrh	r3, [r3, #4]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	2102      	movs	r1, #2
 800075a:	4099      	lsls	r1, r3
 800075c:	000b      	movs	r3, r1
 800075e:	0019      	movs	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	430a      	orrs	r2, r1
 8000766:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800076e:	1cfb      	adds	r3, r7, #3
 8000770:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	889b      	ldrh	r3, [r3, #4]
 8000776:	3b08      	subs	r3, #8
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4099      	lsls	r1, r3
 800077c:	000b      	movs	r3, r1
 800077e:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	430a      	orrs	r2, r1
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000788:	e000      	b.n	800078c <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
		while (1) {
 800078a:	e7fe      	b.n	800078a <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
}
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}

08000792 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>:
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction, OUTPUT_TYPE_t GpioOutputType) {
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	0008      	movs	r0, r1
 800079c:	0011      	movs	r1, r2
 800079e:	1cfb      	adds	r3, r7, #3
 80007a0:	1c02      	adds	r2, r0, #0
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	1cbb      	adds	r3, r7, #2
 80007a6:	1c0a      	adds	r2, r1, #0
 80007a8:	701a      	strb	r2, [r3, #0]
	this->GpioSetOutputType(GpioOutputType); //Set Output Type PP | OD
 80007aa:	1cbb      	adds	r3, r7, #2
 80007ac:	781a      	ldrb	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff ff66 	bl	8000684 <_ZN4Gpio17GpioSetOutputTypeE2OT>
	this->GpioSetOutputSpeed(HIGH_SPEED);    //Default hi speed
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2103      	movs	r1, #3
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff ff7a 	bl	80006b6 <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>
	if (this->item_pin <= 7) // For gpio0..gpio7
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	889b      	ldrh	r3, [r3, #4]
 80007c6:	2b07      	cmp	r3, #7
 80007c8:	d81d      	bhi.n	8000806 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0x74>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	889b      	ldrh	r3, [r3, #4]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	2102      	movs	r1, #2
 80007d8:	4099      	lsls	r1, r3
 80007da:	000b      	movs	r3, r1
 80007dc:	0019      	movs	r1, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	430a      	orrs	r2, r1
 80007e4:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6a1a      	ldr	r2, [r3, #32]
 80007ec:	1cfb      	adds	r3, r7, #3
 80007ee:	7819      	ldrb	r1, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	889b      	ldrh	r3, [r3, #4]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4099      	lsls	r1, r3
 80007f8:	000b      	movs	r3, r1
 80007fa:	0019      	movs	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	430a      	orrs	r2, r1
 8000802:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 8000804:	e027      	b.n	8000856 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	889b      	ldrh	r3, [r3, #4]
 800080a:	2b07      	cmp	r3, #7
 800080c:	d922      	bls.n	8000854 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	889b      	ldrh	r3, [r3, #4]
 8000812:	2b0f      	cmp	r3, #15
 8000814:	d81e      	bhi.n	8000854 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	889b      	ldrh	r3, [r3, #4]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	2102      	movs	r1, #2
 8000824:	4099      	lsls	r1, r3
 8000826:	000b      	movs	r3, r1
 8000828:	0019      	movs	r1, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	430a      	orrs	r2, r1
 8000830:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000838:	1cfb      	adds	r3, r7, #3
 800083a:	7819      	ldrb	r1, [r3, #0]
				<< ((this->item_pin - 8) * 4);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	889b      	ldrh	r3, [r3, #4]
 8000840:	3b08      	subs	r3, #8
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4099      	lsls	r1, r3
 8000846:	000b      	movs	r3, r1
 8000848:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	430a      	orrs	r2, r1
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000852:	e000      	b.n	8000856 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
		while (1) {
 8000854:	e7fe      	b.n	8000854 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
}
 8000856:	46bd      	mov	sp, r7
 8000858:	b002      	add	sp, #8
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>:
void Gpio::SetAsGenerapPurporseOutput(OUTPUT_TYPE_t GpioOutputType) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	000a      	movs	r2, r1
 8000866:	1cfb      	adds	r3, r7, #3
 8000868:	701a      	strb	r2, [r3, #0]
	this->item_port->MODER |= 0x01 << (this->item_pin * 2);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	889b      	ldrh	r3, [r3, #4]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2101      	movs	r1, #1
 8000878:	4099      	lsls	r1, r3
 800087a:	000b      	movs	r3, r1
 800087c:	0019      	movs	r1, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	430a      	orrs	r2, r1
 8000884:	601a      	str	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << this->item_pin;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	1cfb      	adds	r3, r7, #3
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	8889      	ldrh	r1, [r1, #4]
 8000894:	408b      	lsls	r3, r1
 8000896:	0019      	movs	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	430a      	orrs	r2, r1
 800089e:	605a      	str	r2, [r3, #4]
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize>:

// Clock constants. DO NOT CHANGE THESE!
#define RFM69_XO               32000000    ///< Internal clock frequency [Hz]
#define RFM69_FSTEP            61.03515625 ///< Step width of synthesizer [Hz]

RFM69::RFM69(SPI_TypeDef *spi, GPIO_TypeDef *csGPIO, uint16_t csPin,
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	001a      	movs	r2, r3
 80008b6:	1cbb      	adds	r3, r7, #2
 80008b8:	801a      	strh	r2, [r3, #0]
		bool highPowerDevice, SPI_DataSize_t size) :
		SPI(spi, size)
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	231c      	movs	r3, #28
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	0019      	movs	r1, r3
 80008c6:	f000 fe5d 	bl	8001584 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>
{
	_spi = spi;
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	68ba      	ldr	r2, [r7, #8]
 80008ce:	625a      	str	r2, [r3, #36]	; 0x24
	_csGPIO = csGPIO;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	687a      	ldr	r2, [r7, #4]
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
	_csPin = csPin;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	1cba      	adds	r2, r7, #2
 80008da:	8812      	ldrh	r2, [r2, #0]
 80008dc:	859a      	strh	r2, [r3, #44]	; 0x2c
	_resetGPIO = 0;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2200      	movs	r2, #0
 80008e2:	631a      	str	r2, [r3, #48]	; 0x30
	_resetPin = 0;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	2200      	movs	r2, #0
 80008e8:	869a      	strh	r2, [r3, #52]	; 0x34
	_init = false;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	223e      	movs	r2, #62	; 0x3e
 80008ee:	2100      	movs	r1, #0
 80008f0:	5499      	strb	r1, [r3, r2]
	_mode = RFM69_MODE_STANDBY;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	223f      	movs	r2, #63	; 0x3f
 80008f6:	2101      	movs	r1, #1
 80008f8:	5499      	strb	r1, [r3, r2]
	_highPowerDevice = highPowerDevice;
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	2318      	movs	r3, #24
 80008fe:	18fb      	adds	r3, r7, r3
 8000900:	2140      	movs	r1, #64	; 0x40
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	5453      	strb	r3, [r2, r1]
	_powerLevel = 0;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	2241      	movs	r2, #65	; 0x41
 800090a:	2100      	movs	r1, #0
 800090c:	5499      	strb	r1, [r3, r2]
	_rssi = -127;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	227f      	movs	r2, #127	; 0x7f
 8000912:	4252      	negs	r2, r2
 8000914:	645a      	str	r2, [r3, #68]	; 0x44
	_ookEnabled = false;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	224b      	movs	r2, #75	; 0x4b
 800091a:	2100      	movs	r1, #0
 800091c:	5499      	strb	r1, [r3, r2]
	_autoReadRSSI = false;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	224a      	movs	r2, #74	; 0x4a
 8000922:	2100      	movs	r1, #0
 8000924:	5499      	strb	r1, [r3, r2]
	_dataMode = RFM69_DATA_MODE_PACKET;
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	224c      	movs	r2, #76	; 0x4c
 800092a:	2100      	movs	r1, #0
 800092c:	5499      	strb	r1, [r3, r2]
	_dataGPIO = 0;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	2200      	movs	r2, #0
 8000932:	639a      	str	r2, [r3, #56]	; 0x38
	_dataPin = 0;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2200      	movs	r2, #0
 8000938:	879a      	strh	r2, [r3, #60]	; 0x3c
	_highPowerSettings = false;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	224d      	movs	r2, #77	; 0x4d
 800093e:	2100      	movs	r1, #0
 8000940:	5499      	strb	r1, [r3, r2]
	_csmaEnabled = false;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	224e      	movs	r2, #78	; 0x4e
 8000946:	2100      	movs	r1, #0
 8000948:	5499      	strb	r1, [r3, r2]
	_rxBufferLength = 0;
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	2290      	movs	r2, #144	; 0x90
 800094e:	2100      	movs	r1, #0
 8000950:	5099      	str	r1, [r3, r2]

}
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	b004      	add	sp, #16
 800095a:	bd80      	pop	{r7, pc}

0800095c <_ZN5RFM697setCSMAEb>:
void RFM69::setAutoreadRSSI(bool enable)
{
	_autoReadRSSI = enable;
}
void RFM69::setCSMA(bool enable)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	000a      	movs	r2, r1
 8000966:	1cfb      	adds	r3, r7, #3
 8000968:	701a      	strb	r2, [r3, #0]
	_csmaEnabled = enable;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	1cfa      	adds	r2, r7, #3
 800096e:	214e      	movs	r1, #78	; 0x4e
 8000970:	7812      	ldrb	r2, [r2, #0]
 8000972:	545a      	strb	r2, [r3, r1]
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	b002      	add	sp, #8
 800097a:	bd80      	pop	{r7, pc}

0800097c <_ZN5RFM695resetEv>:

void RFM69::reset()
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	if (_resetGPIO == 0)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000988:	2b00      	cmp	r3, #0
 800098a:	d029      	beq.n	80009e0 <_ZN5RFM695resetEv+0x64>
		return;

	_init = false;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	223e      	movs	r2, #62	; 0x3e
 8000990:	2100      	movs	r1, #0
 8000992:	5499      	strb	r1, [r3, r2]

	// generate reset impulse
	this->_resetGPIO->BSRR |= (1 << this->_resetPin); // Set
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	699a      	ldr	r2, [r3, #24]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800099e:	0019      	movs	r1, r3
 80009a0:	2301      	movs	r3, #1
 80009a2:	408b      	lsls	r3, r1
 80009a4:	0019      	movs	r1, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	430a      	orrs	r2, r1
 80009ac:	619a      	str	r2, [r3, #24]
	delay_ms(1);
 80009ae:	2001      	movs	r0, #1
 80009b0:	f001 f89a 	bl	8001ae8 <_Z8delay_msj>
	this->_resetGPIO->BSRR |= ((1 << this->_resetPin) << 16U); // Reset
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	699a      	ldr	r2, [r3, #24]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80009be:	0019      	movs	r1, r3
 80009c0:	2301      	movs	r3, #1
 80009c2:	408b      	lsls	r3, r1
 80009c4:	041b      	lsls	r3, r3, #16
 80009c6:	0019      	movs	r1, r3
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	430a      	orrs	r2, r1
 80009ce:	619a      	str	r2, [r3, #24]

	// wait until module is ready
	delay_ms(10);
 80009d0:	200a      	movs	r0, #10
 80009d2:	f001 f889 	bl	8001ae8 <_Z8delay_msj>

	_mode = RFM69_MODE_STANDBY;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	223f      	movs	r2, #63	; 0x3f
 80009da:	2101      	movs	r1, #1
 80009dc:	5499      	strb	r1, [r3, r2]
 80009de:	e000      	b.n	80009e2 <_ZN5RFM695resetEv+0x66>
		return;
 80009e0:	46c0      	nop			; (mov r8, r8)
}
 80009e2:	46bd      	mov	sp, r7
 80009e4:	b002      	add	sp, #8
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_ZN5RFM694initEv>:

bool RFM69::init()
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	// set base configuration
	setCustomConfig(rfm69_base_config, sizeof(rfm69_base_config) / 2);
 80009f0:	490c      	ldr	r1, [pc, #48]	; (8000a24 <_ZN5RFM694initEv+0x3c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2215      	movs	r2, #21
 80009f6:	0018      	movs	r0, r3
 80009f8:	f000 f999 	bl	8000d2e <_ZN5RFM6915setCustomConfigEPA2_Khj>

	// set PA and OCP settings according to RF module (normal/high power)
	setPASettings();
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2100      	movs	r1, #0
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 f8cf 	bl	8000ba4 <_ZN5RFM6913setPASettingsEh>

	// clear FIFO and flags
	clearFIFO();
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 f9b2 	bl	8000d72 <_ZN5RFM699clearFIFOEv>

	_init = true;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	223e      	movs	r2, #62	; 0x3e
 8000a12:	2101      	movs	r1, #1
 8000a14:	5499      	strb	r1, [r3, r2]

	return _init;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	223e      	movs	r2, #62	; 0x3e
 8000a1a:	5c9b      	ldrb	r3, [r3, r2]
}
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	b002      	add	sp, #8
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	08002eb4 	.word	0x08002eb4

08000a28 <_ZN5RFM6912readRegisterEh>:
	writeRegister(0x03, bitrate >> 8);
	writeRegister(0x04, bitrate);
}

uint8_t RFM69::readRegister(uint8_t reg)
{
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	000a      	movs	r2, r1
 8000a32:	1cfb      	adds	r3, r7, #3
 8000a34:	701a      	strb	r2, [r3, #0]

	uint8_t regval = 0;
 8000a36:	240f      	movs	r4, #15
 8000a38:	193b      	adds	r3, r7, r4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	701a      	strb	r2, [r3, #0]

	this->nCS_Low();
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	0018      	movs	r0, r3
 8000a42:	f000 ff06 	bl	8001852 <_ZN3SPI7nCS_LowEv>
	this->transfer(reg & 0x7F);
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	1cfb      	adds	r3, r7, #3
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	217f      	movs	r1, #127	; 0x7f
 8000a4e:	400b      	ands	r3, r1
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	0019      	movs	r1, r3
 8000a54:	0010      	movs	r0, r2
 8000a56:	f000 ffa9 	bl	80019ac <_ZN3SPI8transferEh>
	regval = this->transfer(0);
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	0025      	movs	r5, r4
 8000a5e:	193c      	adds	r4, r7, r4
 8000a60:	2100      	movs	r1, #0
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 ffa2 	bl	80019ac <_ZN3SPI8transferEh>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	7023      	strb	r3, [r4, #0]
	this->nCS_High();
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 ff05 	bl	800187e <_ZN3SPI8nCS_HighEv>

	return regval;
 8000a74:	197b      	adds	r3, r7, r5
 8000a76:	781b      	ldrb	r3, [r3, #0]

}
 8000a78:	0018      	movs	r0, r3
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	b004      	add	sp, #16
 8000a7e:	bdb0      	pop	{r4, r5, r7, pc}

08000a80 <_ZN5RFM6913writeRegisterEhh>:

void RFM69::writeRegister(uint8_t reg, uint8_t value)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
 8000a88:	0008      	movs	r0, r1
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	1cfb      	adds	r3, r7, #3
 8000a8e:	1c02      	adds	r2, r0, #0
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	1cbb      	adds	r3, r7, #2
 8000a94:	1c0a      	adds	r2, r1, #0
 8000a96:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	this->nCS_Low();
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 fed9 	bl	8001852 <_ZN3SPI7nCS_LowEv>
	this->transfer(reg | 0x80);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	1cfb      	adds	r3, r7, #3
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	4252      	negs	r2, r2
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	0019      	movs	r1, r3
 8000ab0:	f000 ff7c 	bl	80019ac <_ZN3SPI8transferEh>
	this->transfer(value);
 8000ab4:	687a      	ldr	r2, [r7, #4]
 8000ab6:	1cbb      	adds	r3, r7, #2
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0019      	movs	r1, r3
 8000abc:	0010      	movs	r0, r2
 8000abe:	f000 ff75 	bl	80019ac <_ZN3SPI8transferEh>
	this->nCS_High();
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 feda 	bl	800187e <_ZN3SPI8nCS_HighEv>

}
 8000aca:	46c0      	nop			; (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b002      	add	sp, #8
 8000ad0:	bd80      	pop	{r7, pc}

08000ad2 <_ZN5RFM6910chipSelectEv>:
	this->nCS_High();

}

void RFM69::chipSelect()
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]

	this->nCS_Low();
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	0018      	movs	r0, r3
 8000ade:	f000 feb8 	bl	8001852 <_ZN3SPI7nCS_LowEv>
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <_ZN5RFM6912chipUnselectEv>:

void RFM69::chipUnselect()
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]

	this->nCS_High();
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	0018      	movs	r0, r3
 8000af6:	f000 fec2 	bl	800187e <_ZN3SPI8nCS_HighEv>
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_ZN5RFM697setModeE9RFM69Mode>:

RFM69Mode RFM69::setMode(RFM69Mode mode)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b082      	sub	sp, #8
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	6078      	str	r0, [r7, #4]
 8000b0a:	000a      	movs	r2, r1
 8000b0c:	1cfb      	adds	r3, r7, #3
 8000b0e:	701a      	strb	r2, [r3, #0]
	if ((mode == _mode) || (mode > RFM69_MODE_RX))
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	223f      	movs	r2, #63	; 0x3f
 8000b14:	5c9b      	ldrb	r3, [r3, r2]
 8000b16:	1cfa      	adds	r2, r7, #3
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d003      	beq.n	8000b26 <_ZN5RFM697setModeE9RFM69Mode+0x24>
 8000b1e:	1cfb      	adds	r3, r7, #3
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b04      	cmp	r3, #4
 8000b24:	d903      	bls.n	8000b2e <_ZN5RFM697setModeE9RFM69Mode+0x2c>
		return _mode;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	223f      	movs	r2, #63	; 0x3f
 8000b2a:	5c9b      	ldrb	r3, [r3, r2]
 8000b2c:	e036      	b.n	8000b9c <_ZN5RFM697setModeE9RFM69Mode+0x9a>

	// set new mode
	writeRegister(0x01, mode << 2);
 8000b2e:	1cfb      	adds	r3, r7, #3
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f7ff ffa0 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>

	// set special registers if this is a high power device (RFM69HW)
	if (true == _highPowerDevice)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2240      	movs	r2, #64	; 0x40
 8000b44:	5c9b      	ldrb	r3, [r3, r2]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d120      	bne.n	8000b8c <_ZN5RFM697setModeE9RFM69Mode+0x8a>
	{
		switch (mode)
 8000b4a:	1cfb      	adds	r3, r7, #3
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d00c      	beq.n	8000b6c <_ZN5RFM697setModeE9RFM69Mode+0x6a>
 8000b52:	2b04      	cmp	r3, #4
 8000b54:	d115      	bne.n	8000b82 <_ZN5RFM697setModeE9RFM69Mode+0x80>
		{
		case RFM69_MODE_RX:
			// normal RX mode
			if (true == _highPowerSettings)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	224d      	movs	r2, #77	; 0x4d
 8000b5a:	5c9b      	ldrb	r3, [r3, r2]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d112      	bne.n	8000b86 <_ZN5RFM697setModeE9RFM69Mode+0x84>
				setHighPowerSettings(false);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	2100      	movs	r1, #0
 8000b64:	0018      	movs	r0, r3
 8000b66:	f000 f8b3 	bl	8000cd0 <_ZN5RFM6920setHighPowerSettingsEb>
			break;
 8000b6a:	e00c      	b.n	8000b86 <_ZN5RFM697setModeE9RFM69Mode+0x84>

		case RFM69_MODE_TX:
			// +20dBm operation on PA_BOOST
			if (true == _highPowerSettings)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	224d      	movs	r2, #77	; 0x4d
 8000b70:	5c9b      	ldrb	r3, [r3, r2]
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d109      	bne.n	8000b8a <_ZN5RFM697setModeE9RFM69Mode+0x88>
				setHighPowerSettings(true);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2101      	movs	r1, #1
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 f8a8 	bl	8000cd0 <_ZN5RFM6920setHighPowerSettingsEb>
			break;
 8000b80:	e003      	b.n	8000b8a <_ZN5RFM697setModeE9RFM69Mode+0x88>

		default:
			break;
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	e002      	b.n	8000b8c <_ZN5RFM697setModeE9RFM69Mode+0x8a>
			break;
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	e000      	b.n	8000b8c <_ZN5RFM697setModeE9RFM69Mode+0x8a>
			break;
 8000b8a:	46c0      	nop			; (mov r8, r8)
		}
	}

	_mode = mode;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	1cfa      	adds	r2, r7, #3
 8000b90:	213f      	movs	r1, #63	; 0x3f
 8000b92:	7812      	ldrb	r2, [r2, #0]
 8000b94:	545a      	strb	r2, [r3, r1]

	return _mode;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	223f      	movs	r2, #63	; 0x3f
 8000b9a:	5c9b      	ldrb	r3, [r3, r2]
}
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	b002      	add	sp, #8
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <_ZN5RFM6913setPASettingsEh>:

void RFM69::setPASettings(uint8_t forcePA)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	000a      	movs	r2, r1
 8000bae:	1cfb      	adds	r3, r7, #3
 8000bb0:	701a      	strb	r2, [r3, #0]
	// disable OCP for high power devices, enable otherwise
	writeRegister(0x13, 0x0A | (_highPowerDevice ? 0x00 : 0x10));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2240      	movs	r2, #64	; 0x40
 8000bb6:	5c9b      	ldrb	r3, [r3, r2]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <_ZN5RFM6913setPASettingsEh+0x1c>
 8000bbc:	230a      	movs	r3, #10
 8000bbe:	e000      	b.n	8000bc2 <_ZN5RFM6913setPASettingsEh+0x1e>
 8000bc0:	231a      	movs	r3, #26
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	001a      	movs	r2, r3
 8000bc6:	2113      	movs	r1, #19
 8000bc8:	f7ff ff5a 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>

	if (0 == forcePA)
 8000bcc:	1cfb      	adds	r3, r7, #3
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d12b      	bne.n	8000c2c <_ZN5RFM6913setPASettingsEh+0x88>
	{
		if (true == _highPowerDevice)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2240      	movs	r2, #64	; 0x40
 8000bd8:	5c9b      	ldrb	r3, [r3, r2]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d112      	bne.n	8000c04 <_ZN5RFM6913setPASettingsEh+0x60>
		{
			// enable PA1 only
			writeRegister(0x11, (readRegister(0x11) & 0x1F) | 0x40);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2111      	movs	r1, #17
 8000be2:	0018      	movs	r0, r3
 8000be4:	f7ff ff20 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 8000be8:	0003      	movs	r3, r0
 8000bea:	001a      	movs	r2, r3
 8000bec:	231f      	movs	r3, #31
 8000bee:	4013      	ands	r3, r2
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2240      	movs	r2, #64	; 0x40
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2111      	movs	r1, #17
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f7ff ff3f 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>
		_highPowerSettings = (forcePA & 0x08) ? true : false;
		setHighPowerSettings(_highPowerSettings);

		writeRegister(0x11, (readRegister(0x11) & 0x1F) | pa);
	}
}
 8000c02:	e061      	b.n	8000cc8 <_ZN5RFM6913setPASettingsEh+0x124>
			writeRegister(0x11, (readRegister(0x11) & 0x1F) | 0x80);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2111      	movs	r1, #17
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff ff0d 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	001a      	movs	r2, r3
 8000c12:	231f      	movs	r3, #31
 8000c14:	4013      	ands	r3, r2
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	4252      	negs	r2, r2
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2111      	movs	r1, #17
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff ff2b 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>
}
 8000c2a:	e04d      	b.n	8000cc8 <_ZN5RFM6913setPASettingsEh+0x124>
		uint8_t pa = 0;
 8000c2c:	210f      	movs	r1, #15
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2200      	movs	r2, #0
 8000c32:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x01)
 8000c34:	1cfb      	adds	r3, r7, #3
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d006      	beq.n	8000c4c <_ZN5RFM6913setPASettingsEh+0xa8>
			pa |= 0x80;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	187a      	adds	r2, r7, r1
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	4249      	negs	r1, r1
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x02)
 8000c4c:	1cfb      	adds	r3, r7, #3
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2202      	movs	r2, #2
 8000c52:	4013      	ands	r3, r2
 8000c54:	d006      	beq.n	8000c64 <_ZN5RFM6913setPASettingsEh+0xc0>
			pa |= 0x40;
 8000c56:	220f      	movs	r2, #15
 8000c58:	18bb      	adds	r3, r7, r2
 8000c5a:	18ba      	adds	r2, r7, r2
 8000c5c:	7812      	ldrb	r2, [r2, #0]
 8000c5e:	2140      	movs	r1, #64	; 0x40
 8000c60:	430a      	orrs	r2, r1
 8000c62:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x04)
 8000c64:	1cfb      	adds	r3, r7, #3
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2204      	movs	r2, #4
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d006      	beq.n	8000c7c <_ZN5RFM6913setPASettingsEh+0xd8>
			pa |= 0x20;
 8000c6e:	220f      	movs	r2, #15
 8000c70:	18bb      	adds	r3, r7, r2
 8000c72:	18ba      	adds	r2, r7, r2
 8000c74:	7812      	ldrb	r2, [r2, #0]
 8000c76:	2120      	movs	r1, #32
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	701a      	strb	r2, [r3, #0]
		_highPowerSettings = (forcePA & 0x08) ? true : false;
 8000c7c:	1cfb      	adds	r3, r7, #3
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	10db      	asrs	r3, r3, #3
 8000c82:	1c1a      	adds	r2, r3, #0
 8000c84:	2301      	movs	r3, #1
 8000c86:	4013      	ands	r3, r2
 8000c88:	b2d9      	uxtb	r1, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	224d      	movs	r2, #77	; 0x4d
 8000c8e:	5499      	strb	r1, [r3, r2]
		setHighPowerSettings(_highPowerSettings);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	224d      	movs	r2, #77	; 0x4d
 8000c94:	5c9a      	ldrb	r2, [r3, r2]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 f818 	bl	8000cd0 <_ZN5RFM6920setHighPowerSettingsEb>
		writeRegister(0x11, (readRegister(0x11) & 0x1F) | pa);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2111      	movs	r1, #17
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff febf 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 8000caa:	0003      	movs	r3, r0
 8000cac:	001a      	movs	r2, r3
 8000cae:	231f      	movs	r3, #31
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	18fb      	adds	r3, r7, r3
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2111      	movs	r1, #17
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f7ff fedc 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	b004      	add	sp, #16
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <_ZN5RFM6920setHighPowerSettingsEb>:

	_powerLevel = power;
}

void RFM69::setHighPowerSettings(bool enable)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	000a      	movs	r2, r1
 8000cda:	1cfb      	adds	r3, r7, #3
 8000cdc:	701a      	strb	r2, [r3, #0]
	// enabling only works if this is a high power device
	if (true == enable && false == _highPowerDevice)
 8000cde:	1cfb      	adds	r3, r7, #3
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d107      	bne.n	8000cf6 <_ZN5RFM6920setHighPowerSettingsEb+0x26>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2240      	movs	r2, #64	; 0x40
 8000cea:	5c9b      	ldrb	r3, [r3, r2]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_ZN5RFM6920setHighPowerSettingsEb+0x26>
		enable = false;
 8000cf0:	1cfb      	adds	r3, r7, #3
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]

	writeRegister(0x5A, enable ? 0x5D : 0x55);
 8000cf6:	1cfb      	adds	r3, r7, #3
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <_ZN5RFM6920setHighPowerSettingsEb+0x32>
 8000cfe:	235d      	movs	r3, #93	; 0x5d
 8000d00:	e000      	b.n	8000d04 <_ZN5RFM6920setHighPowerSettingsEb+0x34>
 8000d02:	2355      	movs	r3, #85	; 0x55
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	001a      	movs	r2, r3
 8000d08:	215a      	movs	r1, #90	; 0x5a
 8000d0a:	f7ff feb9 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>
	writeRegister(0x5C, enable ? 0x7C : 0x70);
 8000d0e:	1cfb      	adds	r3, r7, #3
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <_ZN5RFM6920setHighPowerSettingsEb+0x4a>
 8000d16:	237c      	movs	r3, #124	; 0x7c
 8000d18:	e000      	b.n	8000d1c <_ZN5RFM6920setHighPowerSettingsEb+0x4c>
 8000d1a:	2370      	movs	r3, #112	; 0x70
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	001a      	movs	r2, r3
 8000d20:	215c      	movs	r1, #92	; 0x5c
 8000d22:	f7ff fead 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>
}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_ZN5RFM6915setCustomConfigEPA2_Khj>:

void RFM69::setCustomConfig(const uint8_t config[][2], unsigned int length)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60f8      	str	r0, [r7, #12]
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
	for (unsigned int i = 0; i < length; i++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d211      	bcs.n	8000d6a <_ZN5RFM6915setCustomConfigEPA2_Khj+0x3c>
	{
		writeRegister(config[i][0], config[i][1]);
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	68ba      	ldr	r2, [r7, #8]
 8000d4c:	18d3      	adds	r3, r2, r3
 8000d4e:	7819      	ldrb	r1, [r3, #0]
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	68ba      	ldr	r2, [r7, #8]
 8000d56:	18d3      	adds	r3, r2, r3
 8000d58:	785a      	ldrb	r2, [r3, #1]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff fe8f 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>
	for (unsigned int i = 0; i < length; i++)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	3301      	adds	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
 8000d68:	e7e9      	b.n	8000d3e <_ZN5RFM6915setCustomConfigEPA2_Khj+0x10>
	}
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b006      	add	sp, #24
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_ZN5RFM699clearFIFOEv>:

void RFM69::clearFIFO()
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	// clear flags and FIFO
	writeRegister(0x28, 0x10);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2210      	movs	r2, #16
 8000d7e:	2128      	movs	r1, #40	; 0x28
 8000d80:	0018      	movs	r0, r3
 8000d82:	f7ff fe7d 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>
}
 8000d86:	46c0      	nop			; (mov r8, r8)
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b002      	add	sp, #8
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <_ZN5RFM6916waitForModeReadyEv>:

void RFM69::waitForModeReady()
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b084      	sub	sp, #16
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
	uint32_t timeEntry = mstimer_get();
 8000d96:	f000 fed3 	bl	8001b40 <_Z11mstimer_getv>
 8000d9a:	0003      	movs	r3, r0
 8000d9c:	60fb      	str	r3, [r7, #12]
	while (((readRegister(0x27) & 0x80) == 0)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2127      	movs	r1, #39	; 0x27
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fe40 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 8000da8:	0003      	movs	r3, r0
 8000daa:	b25b      	sxtb	r3, r3
			&& ((mstimer_get() - timeEntry) < TIMEOUT_MODE_READY))
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	db08      	blt.n	8000dc2 <_ZN5RFM6916waitForModeReadyEv+0x34>
 8000db0:	f000 fec6 	bl	8001b40 <_Z11mstimer_getv>
 8000db4:	0002      	movs	r2, r0
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	2b63      	cmp	r3, #99	; 0x63
 8000dbc:	d801      	bhi.n	8000dc2 <_ZN5RFM6916waitForModeReadyEv+0x34>
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <_ZN5RFM6916waitForModeReadyEv+0x36>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d000      	beq.n	8000dca <_ZN5RFM6916waitForModeReadyEv+0x3c>
	while (((readRegister(0x27) & 0x80) == 0)
 8000dc8:	e7e9      	b.n	8000d9e <_ZN5RFM6916waitForModeReadyEv+0x10>
		;
}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b004      	add	sp, #16
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <_ZN5RFM695sleepEv>:

void RFM69::sleep()
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
	setMode(RFM69_MODE_SLEEP);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	0018      	movs	r0, r3
 8000de0:	f7ff fe8f 	bl	8000b02 <_ZN5RFM697setModeE9RFM69Mode>
}
 8000de4:	46c0      	nop			; (mov r8, r8)
 8000de6:	46bd      	mov	sp, r7
 8000de8:	b002      	add	sp, #8
 8000dea:	bd80      	pop	{r7, pc}

08000dec <_ZN5RFM697receiveEPcj>:

int RFM69::receive(char *data, unsigned int dataLength)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
	// check if there is a packet in the internal buffer and copy it
	if (_rxBufferLength > 0)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2290      	movs	r2, #144	; 0x90
 8000dfc:	589b      	ldr	r3, [r3, r2]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d011      	beq.n	8000e26 <_ZN5RFM697receiveEPcj+0x3a>
	{
		// copy only until dataLength, even if packet in local buffer is actually larger
		memcpy(data, _rxBuffer, dataLength);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	334f      	adds	r3, #79	; 0x4f
 8000e06:	0019      	movs	r1, r3
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f000 ffe3 	bl	8001dd8 <memcpy>

		unsigned int bytesRead = _rxBufferLength;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2290      	movs	r2, #144	; 0x90
 8000e16:	589b      	ldr	r3, [r3, r2]
 8000e18:	617b      	str	r3, [r7, #20]

		// empty local buffer
		_rxBufferLength = 0;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2290      	movs	r2, #144	; 0x90
 8000e1e:	2100      	movs	r1, #0
 8000e20:	5099      	str	r1, [r3, r2]

		return bytesRead;
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	e007      	b.n	8000e36 <_ZN5RFM697receiveEPcj+0x4a>
	}
	else
	{
		// regular receive
		return _receive(data, dataLength);
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f000 f806 	bl	8000e3e <_ZN5RFM698_receiveEPcj>
 8000e32:	0003      	movs	r3, r0
 8000e34:	46c0      	nop			; (mov r8, r8)
	}
}
 8000e36:	0018      	movs	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	b006      	add	sp, #24
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <_ZN5RFM698_receiveEPcj>:

int RFM69::_receive(char *data, unsigned int dataLength)
{
 8000e3e:	b590      	push	{r4, r7, lr}
 8000e40:	b087      	sub	sp, #28
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
	// go to RX mode if not already in this mode
	if (RFM69_MODE_RX != _mode)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	223f      	movs	r2, #63	; 0x3f
 8000e4e:	5c9b      	ldrb	r3, [r3, r2]
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d008      	beq.n	8000e66 <_ZN5RFM698_receiveEPcj+0x28>
	{
		setMode(RFM69_MODE_RX);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2104      	movs	r1, #4
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fe52 	bl	8000b02 <_ZN5RFM697setModeE9RFM69Mode>
		waitForModeReady();
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff ff94 	bl	8000d8e <_ZN5RFM6916waitForModeReadyEv>
	}

	// check for flag PayloadReady
	if (readRegister(0x28) & 0x04)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	2128      	movs	r1, #40	; 0x28
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff fddc 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 8000e70:	0003      	movs	r3, r0
 8000e72:	001a      	movs	r2, r3
 8000e74:	2304      	movs	r3, #4
 8000e76:	4013      	ands	r3, r2
 8000e78:	1e5a      	subs	r2, r3, #1
 8000e7a:	4193      	sbcs	r3, r2
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d039      	beq.n	8000ef6 <_ZN5RFM698_receiveEPcj+0xb8>
	{
		// go to standby before reading data
		setMode(RFM69_MODE_STANDBY);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	2101      	movs	r1, #1
 8000e86:	0018      	movs	r0, r3
 8000e88:	f7ff fe3b 	bl	8000b02 <_ZN5RFM697setModeE9RFM69Mode>

		// get FIFO content
		unsigned int bytesRead = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

		// read until FIFO is empty or buffer length exceeded
		while ((readRegister(0x28) & 0x40) && (bytesRead < dataLength))
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	2128      	movs	r1, #40	; 0x28
 8000e94:	0018      	movs	r0, r3
 8000e96:	f7ff fdc7 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 8000e9a:	0003      	movs	r3, r0
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	2340      	movs	r3, #64	; 0x40
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	d005      	beq.n	8000eb0 <_ZN5RFM698_receiveEPcj+0x72>
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d201      	bcs.n	8000eb0 <_ZN5RFM698_receiveEPcj+0x72>
 8000eac:	2301      	movs	r3, #1
 8000eae:	e000      	b.n	8000eb2 <_ZN5RFM698_receiveEPcj+0x74>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00d      	beq.n	8000ed2 <_ZN5RFM698_receiveEPcj+0x94>
		{
			// read next byte
			data[bytesRead] = readRegister(0x00);
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	18d4      	adds	r4, r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	f7ff fdb1 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	7023      	strb	r3, [r4, #0]
			bytesRead++;
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
		while ((readRegister(0x28) & 0x40) && (bytesRead < dataLength))
 8000ed0:	e7de      	b.n	8000e90 <_ZN5RFM698_receiveEPcj+0x52>
		}

		// automatically read RSSI if requested
		if (true == _autoReadRSSI)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	224a      	movs	r2, #74	; 0x4a
 8000ed6:	5c9b      	ldrb	r3, [r3, r2]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d103      	bne.n	8000ee4 <_ZN5RFM698_receiveEPcj+0xa6>
		{
			readRSSI();
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 f831 	bl	8000f46 <_ZN5RFM698readRSSIEv>
		}

		// go back to RX mode
		setMode(RFM69_MODE_RX);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	2104      	movs	r1, #4
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff fe0a 	bl	8000b02 <_ZN5RFM697setModeE9RFM69Mode>
		// todo: wait needed?
		//		waitForModeReady();

		// todo: Видалити
		int i;
		i = bytesRead;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	613b      	str	r3, [r7, #16]

		return bytesRead;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	e000      	b.n	8000ef8 <_ZN5RFM698_receiveEPcj+0xba>
	}

	else

		return 0;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b007      	add	sp, #28
 8000efe:	bd90      	pop	{r4, r7, pc}

08000f00 <_ZN5RFM6917waitForPacketSentEv>:

	return enable;
}

void RFM69::waitForPacketSent()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	uint32_t timeEntry = mstimer_get();
 8000f08:	f000 fe1a 	bl	8001b40 <_Z11mstimer_getv>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	60fb      	str	r3, [r7, #12]
	while (((readRegister(0x28) & 0x08) == 0)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2128      	movs	r1, #40	; 0x28
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff fd87 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	001a      	movs	r2, r3
 8000f1e:	2308      	movs	r3, #8
 8000f20:	4013      	ands	r3, r2
			&& ((mstimer_get() - timeEntry) < TIMEOUT_PACKET_SENT))
 8000f22:	d108      	bne.n	8000f36 <_ZN5RFM6917waitForPacketSentEv+0x36>
 8000f24:	f000 fe0c 	bl	8001b40 <_Z11mstimer_getv>
 8000f28:	0002      	movs	r2, r0
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	2b63      	cmp	r3, #99	; 0x63
 8000f30:	d801      	bhi.n	8000f36 <_ZN5RFM6917waitForPacketSentEv+0x36>
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <_ZN5RFM6917waitForPacketSentEv+0x38>
 8000f36:	2300      	movs	r3, #0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d000      	beq.n	8000f3e <_ZN5RFM6917waitForPacketSentEv+0x3e>
	while (((readRegister(0x28) & 0x08) == 0)
 8000f3c:	e7e8      	b.n	8000f10 <_ZN5RFM6917waitForPacketSentEv+0x10>
		;
}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b004      	add	sp, #16
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <_ZN5RFM698readRSSIEv>:
	}
	// TODO GPIO_SetBits(_dataGPIO, _dataPin);
}

int RFM69::readRSSI()
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
	_rssi = -readRegister(0x24) / 2;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2124      	movs	r1, #36	; 0x24
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff fd68 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 8000f58:	1e03      	subs	r3, r0, #0
 8000f5a:	da00      	bge.n	8000f5e <_ZN5RFM698readRSSIEv+0x18>
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	105b      	asrs	r3, r3, #1
 8000f60:	425b      	negs	r3, r3
 8000f62:	001a      	movs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	645a      	str	r2, [r3, #68]	; 0x44

	return _rssi;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	b002      	add	sp, #8
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_ZN5RFM6911setPowerDBmEa>:

	_dataMode = dataMode;
}

int RFM69::setPowerDBm(int8_t dBm)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	000a      	movs	r2, r1
 8000f7e:	1cfb      	adds	r3, r7, #3
 8000f80:	701a      	strb	r2, [r3, #0]
	/* Output power of module is from -18 dBm to +13 dBm
	 * in "low" power devices, -2 dBm to +20 dBm in high power devices */
	if (dBm < -18 || dBm > 20)
 8000f82:	1cfb      	adds	r3, r7, #3
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	3312      	adds	r3, #18
 8000f8a:	db04      	blt.n	8000f96 <_ZN5RFM6911setPowerDBmEa+0x22>
 8000f8c:	1cfb      	adds	r3, r7, #3
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	2b14      	cmp	r3, #20
 8000f94:	dd02      	ble.n	8000f9c <_ZN5RFM6911setPowerDBmEa+0x28>
		return -1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	e09e      	b.n	80010da <_ZN5RFM6911setPowerDBmEa+0x166>

	if (false == _highPowerDevice && dBm > 13)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2240      	movs	r2, #64	; 0x40
 8000fa0:	5c9b      	ldrb	r3, [r3, r2]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d107      	bne.n	8000fb6 <_ZN5RFM6911setPowerDBmEa+0x42>
 8000fa6:	1cfb      	adds	r3, r7, #3
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	2b0d      	cmp	r3, #13
 8000fae:	dd02      	ble.n	8000fb6 <_ZN5RFM6911setPowerDBmEa+0x42>
		return -1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	425b      	negs	r3, r3
 8000fb4:	e091      	b.n	80010da <_ZN5RFM6911setPowerDBmEa+0x166>

	if (true == _highPowerDevice && dBm < -2)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2240      	movs	r2, #64	; 0x40
 8000fba:	5c9b      	ldrb	r3, [r3, r2]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d107      	bne.n	8000fd0 <_ZN5RFM6911setPowerDBmEa+0x5c>
 8000fc0:	1cfb      	adds	r3, r7, #3
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	da02      	bge.n	8000fd0 <_ZN5RFM6911setPowerDBmEa+0x5c>
		return -1;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	425b      	negs	r3, r3
 8000fce:	e084      	b.n	80010da <_ZN5RFM6911setPowerDBmEa+0x166>

	uint8_t powerLevel = 0;
 8000fd0:	210f      	movs	r1, #15
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]

	if (false == _highPowerDevice)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2240      	movs	r2, #64	; 0x40
 8000fdc:	5c9b      	ldrb	r3, [r3, r2]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d110      	bne.n	8001004 <_ZN5RFM6911setPowerDBmEa+0x90>
	{
		// only PA0 can be used
		powerLevel = dBm + 18;
 8000fe2:	1cfb      	adds	r3, r7, #3
 8000fe4:	781a      	ldrb	r2, [r3, #0]
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	3212      	adds	r2, #18
 8000fea:	701a      	strb	r2, [r3, #0]

		// enable PA0 only
		writeRegister(0x11, 0x80 | powerLevel);
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	4252      	negs	r2, r2
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2111      	movs	r1, #17
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f7ff fd3f 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>
 8001002:	e069      	b.n	80010d8 <_ZN5RFM6911setPowerDBmEa+0x164>
	}
	else
	{
		if (dBm >= -2 && dBm <= 13)
 8001004:	1cfb      	adds	r3, r7, #3
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	3302      	adds	r3, #2
 800100c:	db21      	blt.n	8001052 <_ZN5RFM6911setPowerDBmEa+0xde>
 800100e:	1cfb      	adds	r3, r7, #3
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b25b      	sxtb	r3, r3
 8001014:	2b0d      	cmp	r3, #13
 8001016:	dc1c      	bgt.n	8001052 <_ZN5RFM6911setPowerDBmEa+0xde>
		{
			// use PA1 on pin PA_BOOST
			powerLevel = dBm + 18;
 8001018:	1cfb      	adds	r3, r7, #3
 800101a:	781a      	ldrb	r2, [r3, #0]
 800101c:	210f      	movs	r1, #15
 800101e:	187b      	adds	r3, r7, r1
 8001020:	3212      	adds	r2, #18
 8001022:	701a      	strb	r2, [r3, #0]

			// enable PA1 only
			writeRegister(0x11, 0x40 | powerLevel);
 8001024:	187b      	adds	r3, r7, r1
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2240      	movs	r2, #64	; 0x40
 800102a:	4313      	orrs	r3, r2
 800102c:	b2da      	uxtb	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2111      	movs	r1, #17
 8001032:	0018      	movs	r0, r3
 8001034:	f7ff fd24 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>

			// disable high power settings
			_highPowerSettings = false;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	224d      	movs	r2, #77	; 0x4d
 800103c:	2100      	movs	r1, #0
 800103e:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	224d      	movs	r2, #77	; 0x4d
 8001044:	5c9a      	ldrb	r2, [r3, r2]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	0011      	movs	r1, r2
 800104a:	0018      	movs	r0, r3
 800104c:	f7ff fe40 	bl	8000cd0 <_ZN5RFM6920setHighPowerSettingsEb>
 8001050:	e042      	b.n	80010d8 <_ZN5RFM6911setPowerDBmEa+0x164>
		}
		else if (dBm > 13 && dBm <= 17)
 8001052:	1cfb      	adds	r3, r7, #3
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	b25b      	sxtb	r3, r3
 8001058:	2b0d      	cmp	r3, #13
 800105a:	dd21      	ble.n	80010a0 <_ZN5RFM6911setPowerDBmEa+0x12c>
 800105c:	1cfb      	adds	r3, r7, #3
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	b25b      	sxtb	r3, r3
 8001062:	2b11      	cmp	r3, #17
 8001064:	dc1c      	bgt.n	80010a0 <_ZN5RFM6911setPowerDBmEa+0x12c>
		{
			// use PA1 and PA2 combined on pin PA_BOOST
			powerLevel = dBm + 14;
 8001066:	1cfb      	adds	r3, r7, #3
 8001068:	781a      	ldrb	r2, [r3, #0]
 800106a:	210f      	movs	r1, #15
 800106c:	187b      	adds	r3, r7, r1
 800106e:	320e      	adds	r2, #14
 8001070:	701a      	strb	r2, [r3, #0]

			// enable PA1+PA2
			writeRegister(0x11, 0x60 | powerLevel);
 8001072:	187b      	adds	r3, r7, r1
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2260      	movs	r2, #96	; 0x60
 8001078:	4313      	orrs	r3, r2
 800107a:	b2da      	uxtb	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2111      	movs	r1, #17
 8001080:	0018      	movs	r0, r3
 8001082:	f7ff fcfd 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>

			// disable high power settings
			_highPowerSettings = false;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	224d      	movs	r2, #77	; 0x4d
 800108a:	2100      	movs	r1, #0
 800108c:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	224d      	movs	r2, #77	; 0x4d
 8001092:	5c9a      	ldrb	r2, [r3, r2]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	0011      	movs	r1, r2
 8001098:	0018      	movs	r0, r3
 800109a:	f7ff fe19 	bl	8000cd0 <_ZN5RFM6920setHighPowerSettingsEb>
 800109e:	e01b      	b.n	80010d8 <_ZN5RFM6911setPowerDBmEa+0x164>
		}
		else
		{
			// output power from 18 dBm to 20 dBm, use PA1+PA2 with high power settings
			powerLevel = dBm + 11;
 80010a0:	1cfb      	adds	r3, r7, #3
 80010a2:	781a      	ldrb	r2, [r3, #0]
 80010a4:	210f      	movs	r1, #15
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	320b      	adds	r2, #11
 80010aa:	701a      	strb	r2, [r3, #0]

			// enable PA1+PA2
			writeRegister(0x11, 0x60 | powerLevel);
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2260      	movs	r2, #96	; 0x60
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2111      	movs	r1, #17
 80010ba:	0018      	movs	r0, r3
 80010bc:	f7ff fce0 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>

			// enable high power settings
			_highPowerSettings = true;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	224d      	movs	r2, #77	; 0x4d
 80010c4:	2101      	movs	r1, #1
 80010c6:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	224d      	movs	r2, #77	; 0x4d
 80010cc:	5c9a      	ldrb	r2, [r3, r2]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff fdfc 	bl	8000cd0 <_ZN5RFM6920setHighPowerSettingsEb>
		}
	}

	return 0;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_ZN5RFM6911channelFreeEv>:

bool RFM69::channelFree()
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	if (readRSSI() < CSMA_RSSI_THRESHOLD)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff ff2a 	bl	8000f46 <_ZN5RFM698readRSSIEv>
 80010f2:	0003      	movs	r3, r0
 80010f4:	2201      	movs	r2, #1
 80010f6:	3355      	adds	r3, #85	; 0x55
 80010f8:	db01      	blt.n	80010fe <_ZN5RFM6911channelFreeEv+0x1c>
 80010fa:	2300      	movs	r3, #0
 80010fc:	1c1a      	adds	r2, r3, #0
 80010fe:	b2d3      	uxtb	r3, r2
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <_ZN5RFM6911channelFreeEv+0x26>
	{
		return true;
 8001104:	2301      	movs	r3, #1
 8001106:	e000      	b.n	800110a <_ZN5RFM6911channelFreeEv+0x28>
	}
	else
	{
		return false;
 8001108:	2300      	movs	r3, #0
	}
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b002      	add	sp, #8
 8001110:	bd80      	pop	{r7, pc}

08001112 <_ZN5RFM694sendEPKvj>:

int RFM69::send(const void *data, unsigned int dataLength)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b088      	sub	sp, #32
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
// switch to standby and wait for mode ready, if not in sleep mode
	if (RFM69_MODE_SLEEP != _mode)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	223f      	movs	r2, #63	; 0x3f
 8001122:	5c9b      	ldrb	r3, [r3, r2]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d008      	beq.n	800113a <_ZN5RFM694sendEPKvj+0x28>
	{
		setMode(RFM69_MODE_STANDBY);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2101      	movs	r1, #1
 800112c:	0018      	movs	r0, r3
 800112e:	f7ff fce8 	bl	8000b02 <_ZN5RFM697setModeE9RFM69Mode>
		waitForModeReady();
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	0018      	movs	r0, r3
 8001136:	f7ff fe2a 	bl	8000d8e <_ZN5RFM6916waitForModeReadyEv>
	}

	// clear FIFO to remove old data and clear flags
	clearFIFO();
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	0018      	movs	r0, r3
 800113e:	f7ff fe18 	bl	8000d72 <_ZN5RFM699clearFIFOEv>

	// limit max payload
	if (dataLength > RFM69_MAX_PAYLOAD)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b40      	cmp	r3, #64	; 0x40
 8001146:	d901      	bls.n	800114c <_ZN5RFM694sendEPKvj+0x3a>
		dataLength = RFM69_MAX_PAYLOAD;
 8001148:	2340      	movs	r3, #64	; 0x40
 800114a:	607b      	str	r3, [r7, #4]

	// payload must be available
	if (0 == dataLength)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d101      	bne.n	8001156 <_ZN5RFM694sendEPKvj+0x44>
		return 0;
 8001152:	2300      	movs	r3, #0
 8001154:	e0d4      	b.n	8001300 <_ZN5RFM694sendEPKvj+0x1ee>

	/* Wait for a free channel, if CSMA/CA algorithm is enabled.
	 * This takes around 1,4 ms to finish if channel is free */
	if (true == _csmaEnabled)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	224e      	movs	r2, #78	; 0x4e
 800115a:	5c9b      	ldrb	r3, [r3, r2]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d000      	beq.n	8001162 <_ZN5RFM694sendEPKvj+0x50>
 8001160:	e099      	b.n	8001296 <_ZN5RFM694sendEPKvj+0x184>
	{
		// Restart RX
		writeRegister(0x3D, (readRegister(0x3D) & 0xFB) | 0x20);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	213d      	movs	r1, #61	; 0x3d
 8001166:	0018      	movs	r0, r3
 8001168:	f7ff fc5e 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 800116c:	0003      	movs	r3, r0
 800116e:	001a      	movs	r2, r3
 8001170:	2324      	movs	r3, #36	; 0x24
 8001172:	439a      	bics	r2, r3
 8001174:	0013      	movs	r3, r2
 8001176:	b2db      	uxtb	r3, r3
 8001178:	2220      	movs	r2, #32
 800117a:	4313      	orrs	r3, r2
 800117c:	b2da      	uxtb	r2, r3
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	213d      	movs	r1, #61	; 0x3d
 8001182:	0018      	movs	r0, r3
 8001184:	f7ff fc7c 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>

		// switch to RX mode
		setMode(RFM69_MODE_RX);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2104      	movs	r1, #4
 800118c:	0018      	movs	r0, r3
 800118e:	f7ff fcb8 	bl	8000b02 <_ZN5RFM697setModeE9RFM69Mode>

		// wait until RSSI sampling is done; otherwise, 0xFF (-127 dBm) is read

		// RSSI sampling phase takes ~960 µs after switch from standby to RX
		uint32_t timeEntry = mstimer_get();
 8001192:	f000 fcd5 	bl	8001b40 <_Z11mstimer_getv>
 8001196:	0003      	movs	r3, r0
 8001198:	61bb      	str	r3, [r7, #24]
		while (((readRegister(0x23) & 0x02) == 0)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2123      	movs	r1, #35	; 0x23
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff fc42 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 80011a4:	0003      	movs	r3, r0
 80011a6:	001a      	movs	r2, r3
 80011a8:	2302      	movs	r3, #2
 80011aa:	4013      	ands	r3, r2
				&& ((mstimer_get() - timeEntry) < 10))
 80011ac:	d108      	bne.n	80011c0 <_ZN5RFM694sendEPKvj+0xae>
 80011ae:	f000 fcc7 	bl	8001b40 <_Z11mstimer_getv>
 80011b2:	0002      	movs	r2, r0
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b09      	cmp	r3, #9
 80011ba:	d801      	bhi.n	80011c0 <_ZN5RFM694sendEPKvj+0xae>
 80011bc:	2301      	movs	r3, #1
 80011be:	e000      	b.n	80011c2 <_ZN5RFM694sendEPKvj+0xb0>
 80011c0:	2300      	movs	r3, #0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d000      	beq.n	80011c8 <_ZN5RFM694sendEPKvj+0xb6>
		while (((readRegister(0x23) & 0x02) == 0)
 80011c6:	e7e8      	b.n	800119a <_ZN5RFM694sendEPKvj+0x88>
			;

		while ((false == channelFree())
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7ff ff89 	bl	80010e2 <_ZN5RFM6911channelFreeEv>
 80011d0:	1e03      	subs	r3, r0, #0
				&& ((mstimer_get() - timeEntry) < TIMEOUT_CSMA_READY))
 80011d2:	d10a      	bne.n	80011ea <_ZN5RFM694sendEPKvj+0xd8>
 80011d4:	f000 fcb4 	bl	8001b40 <_Z11mstimer_getv>
 80011d8:	0002      	movs	r2, r0
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	1ad2      	subs	r2, r2, r3
 80011de:	23fa      	movs	r3, #250	; 0xfa
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d201      	bcs.n	80011ea <_ZN5RFM694sendEPKvj+0xd8>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <_ZN5RFM694sendEPKvj+0xda>
 80011ea:	2300      	movs	r3, #0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d04d      	beq.n	800128c <_ZN5RFM694sendEPKvj+0x17a>
		{
			// wait for a random time before checking again
			delay_ms(rand() % 10);
 80011f0:	f000 fe04 	bl	8001dfc <rand>
 80011f4:	0003      	movs	r3, r0
 80011f6:	210a      	movs	r1, #10
 80011f8:	0018      	movs	r0, r3
 80011fa:	f7ff f8ff 	bl	80003fc <__aeabi_idivmod>
 80011fe:	000b      	movs	r3, r1
 8001200:	0018      	movs	r0, r3
 8001202:	f000 fc71 	bl	8001ae8 <_Z8delay_msj>

			/* try to receive packets while waiting for a free channel
			 * and put them into a temporary buffer */
			int bytesRead;
			if ((bytesRead = _receive(_rxBuffer, RFM69_MAX_PAYLOAD)) > 0)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	334f      	adds	r3, #79	; 0x4f
 800120a:	0019      	movs	r1, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2240      	movs	r2, #64	; 0x40
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff fe14 	bl	8000e3e <_ZN5RFM698_receiveEPcj>
 8001216:	0003      	movs	r3, r0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	17da      	asrs	r2, r3, #31
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	0fdb      	lsrs	r3, r3, #31
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0cf      	beq.n	80011c8 <_ZN5RFM694sendEPKvj+0xb6>
			{
				_rxBufferLength = bytesRead;
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2190      	movs	r1, #144	; 0x90
 800122e:	505a      	str	r2, [r3, r1]

				// module is in RX mode again

				// Restart RX and wait until RSSI sampling is done
				writeRegister(0x3D, (readRegister(0x3D) & 0xFB) | 0x20);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	213d      	movs	r1, #61	; 0x3d
 8001234:	0018      	movs	r0, r3
 8001236:	f7ff fbf7 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 800123a:	0003      	movs	r3, r0
 800123c:	001a      	movs	r2, r3
 800123e:	2324      	movs	r3, #36	; 0x24
 8001240:	439a      	bics	r2, r3
 8001242:	0013      	movs	r3, r2
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2220      	movs	r2, #32
 8001248:	4313      	orrs	r3, r2
 800124a:	b2da      	uxtb	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	213d      	movs	r1, #61	; 0x3d
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff fc15 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>
				uint32_t timeEntry = mstimer_get();
 8001256:	f000 fc73 	bl	8001b40 <_Z11mstimer_getv>
 800125a:	0003      	movs	r3, r0
 800125c:	613b      	str	r3, [r7, #16]
				while (((readRegister(0x23) & 0x02) == 0)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2123      	movs	r1, #35	; 0x23
 8001262:	0018      	movs	r0, r3
 8001264:	f7ff fbe0 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 8001268:	0003      	movs	r3, r0
 800126a:	001a      	movs	r2, r3
 800126c:	2302      	movs	r3, #2
 800126e:	4013      	ands	r3, r2
						&& ((mstimer_get() - timeEntry) < 10))
 8001270:	d108      	bne.n	8001284 <_ZN5RFM694sendEPKvj+0x172>
 8001272:	f000 fc65 	bl	8001b40 <_Z11mstimer_getv>
 8001276:	0002      	movs	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b09      	cmp	r3, #9
 800127e:	d801      	bhi.n	8001284 <_ZN5RFM694sendEPKvj+0x172>
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <_ZN5RFM694sendEPKvj+0x174>
 8001284:	2300      	movs	r3, #0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d09e      	beq.n	80011c8 <_ZN5RFM694sendEPKvj+0xb6>
				while (((readRegister(0x23) & 0x02) == 0)
 800128a:	e7e8      	b.n	800125e <_ZN5RFM694sendEPKvj+0x14c>
					;
			}
		}

		setMode(RFM69_MODE_STANDBY);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2101      	movs	r1, #1
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff fc36 	bl	8000b02 <_ZN5RFM697setModeE9RFM69Mode>
	}

	// transfer packet to FIFO
	chipSelect();
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	0018      	movs	r0, r3
 800129a:	f7ff fc1a 	bl	8000ad2 <_ZN5RFM6910chipSelectEv>

	// address FIFO
	this->transfer(0x00 | 0x80);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2180      	movs	r1, #128	; 0x80
 80012a2:	0018      	movs	r0, r3
 80012a4:	f000 fb82 	bl	80019ac <_ZN3SPI8transferEh>

	// send length byte
	this->transfer(dataLength);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	0011      	movs	r1, r2
 80012b0:	0018      	movs	r0, r3
 80012b2:	f000 fb7b 	bl	80019ac <_ZN3SPI8transferEh>

	// send payload
	for (unsigned int i = 0; i < dataLength; i++)
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
 80012ba:	69fa      	ldr	r2, [r7, #28]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d20b      	bcs.n	80012da <_ZN5RFM694sendEPKvj+0x1c8>
		this->transfer(((uint8_t*) data)[i]);
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	18d3      	adds	r3, r2, r3
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	0019      	movs	r1, r3
 80012ce:	f000 fb6d 	bl	80019ac <_ZN3SPI8transferEh>
	for (unsigned int i = 0; i < dataLength; i++)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3301      	adds	r3, #1
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	e7ef      	b.n	80012ba <_ZN5RFM694sendEPKvj+0x1a8>

	chipUnselect();
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	0018      	movs	r0, r3
 80012de:	f7ff fc04 	bl	8000aea <_ZN5RFM6912chipUnselectEv>

	// start radio transmission
	setMode(RFM69_MODE_TX);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2103      	movs	r1, #3
 80012e6:	0018      	movs	r0, r3
 80012e8:	f7ff fc0b 	bl	8000b02 <_ZN5RFM697setModeE9RFM69Mode>

	// wait for packet sent
	waitForPacketSent();
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	0018      	movs	r0, r3
 80012f0:	f7ff fe06 	bl	8000f00 <_ZN5RFM6917waitForPacketSentEv>

	// go to standby
	setMode(RFM69_MODE_STANDBY);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2101      	movs	r1, #1
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff fc02 	bl	8000b02 <_ZN5RFM697setModeE9RFM69Mode>

	return dataLength;
 80012fe:	687b      	ldr	r3, [r7, #4]
}
 8001300:	0018      	movs	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	b008      	add	sp, #32
 8001306:	bd80      	pop	{r7, pc}

08001308 <_ZN5RFM6911SetResetPinEP12GPIO_TypeDeft>:

void RFM69::SetResetPin(GPIO_TypeDef *RESET_PORT, uint16_t RESET_PIN)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b087      	sub	sp, #28
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	1dbb      	adds	r3, r7, #6
 8001314:	801a      	strh	r2, [r3, #0]
	this->_resetGPIO = RESET_PORT;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	631a      	str	r2, [r3, #48]	; 0x30
	this->_resetPin = RESET_PIN;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	1dba      	adds	r2, r7, #6
 8001320:	8812      	ldrh	r2, [r2, #0]
 8001322:	869a      	strh	r2, [r3, #52]	; 0x34
	Gpio ResetPin = Gpio(this->_resetGPIO, this->_resetPin);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800132c:	2410      	movs	r4, #16
 800132e:	193b      	adds	r3, r7, r4
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff f923 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
	ResetPin.SetAsGenerapPurporseOutput(OUTPUT_PP);
 8001336:	193b      	adds	r3, r7, r4
 8001338:	2100      	movs	r1, #0
 800133a:	0018      	movs	r0, r3
 800133c:	f7ff fa8e 	bl	800085c <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>

}
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	b007      	add	sp, #28
 8001346:	bd90      	pop	{r4, r7, pc}

08001348 <_ZN5RFM6910setAddressEt>:
{
  return RF69_FSTEP * (((uint32_t) this->readRegister(REG_FRFMSB) << 16) + ((uint16_t) this->readRegister(REG_FRFMID) << 8) + this->readRegister(REG_FRFLSB));
}

void RFM69::setAddress(uint16_t addr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	000a      	movs	r2, r1
 8001352:	1cbb      	adds	r3, r7, #2
 8001354:	801a      	strh	r2, [r3, #0]
  _address = addr;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	1cba      	adds	r2, r7, #2
 800135a:	2148      	movs	r1, #72	; 0x48
 800135c:	8812      	ldrh	r2, [r2, #0]
 800135e:	525a      	strh	r2, [r3, r1]
  this->writeRegister(REG_NODEADRS, _address); //unused in packet mode
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2248      	movs	r2, #72	; 0x48
 8001364:	5a9b      	ldrh	r3, [r3, r2]
 8001366:	b2da      	uxtb	r2, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2139      	movs	r1, #57	; 0x39
 800136c:	0018      	movs	r0, r3
 800136e:	f7ff fb87 	bl	8000a80 <_ZN5RFM6913writeRegisterEhh>
}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	46bd      	mov	sp, r7
 8001376:	b002      	add	sp, #8
 8001378:	bd80      	pop	{r7, pc}

0800137a <_ZN4UartC1EP13USART_TypeDefm>:

/* Підтримка кільцевого буфера */
//#define UART_RX_BUFFER_SIZE 128 // Вказати максимальний розмір прийомного буфера


Uart::Uart(USART_TypeDef *UartPort, uint32_t UsartBrrValue) {
 800137a:	b580      	push	{r7, lr}
 800137c:	b084      	sub	sp, #16
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2200      	movs	r2, #0
 800138a:	801a      	strh	r2, [r3, #0]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2200      	movs	r2, #0
 8001390:	805a      	strh	r2, [r3, #2]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	3304      	adds	r3, #4
 8001396:	2280      	movs	r2, #128	; 0x80
 8001398:	2100      	movs	r1, #0
 800139a:	0018      	movs	r0, r3
 800139c:	f000 fd25 	bl	8001dea <memset>
	this->ItemUsart = UartPort;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	2184      	movs	r1, #132	; 0x84
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	505a      	str	r2, [r3, r1]
	this->ItemUsartBrrValue = UsartBrrValue;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2188      	movs	r1, #136	; 0x88
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	505a      	str	r2, [r3, r1]
	this->InitGpio();
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 f812 	bl	80013dc <_ZN4Uart8InitGpioEv>
	this->EnableClock(this->ItemUsart);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2284      	movs	r2, #132	; 0x84
 80013bc:	589a      	ldr	r2, [r3, r2]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	0011      	movs	r1, r2
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 f85a 	bl	800147c <_ZN4Uart11EnableClockEP13USART_TypeDef>
	this->Init();
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 f890 	bl	80014f0 <_ZN4Uart4InitEv>
}
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	0018      	movs	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b004      	add	sp, #16
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <_ZN4Uart8InitGpioEv>:
uint16_t Uart::GetRingBufferSize(void) {
	return ((uint16_t) (UART_RING_BUFFER_SIZE + this->rx_buffer_head - this->rx_buffer_tail))
			% UART_RING_BUFFER_SIZE;
}
#endif
void Uart::InitGpio(void) {
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b08a      	sub	sp, #40	; 0x28
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
// Взалежності від того, який USART обрано його й ініціалізуємо
	if (this->ItemUsart == USART1) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2284      	movs	r2, #132	; 0x84
 80013e8:	589b      	ldr	r3, [r3, r2]
 80013ea:	4a21      	ldr	r2, [pc, #132]	; (8001470 <_ZN4Uart8InitGpioEv+0x94>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d119      	bne.n	8001424 <_ZN4Uart8InitGpioEv+0x48>

#ifdef USART1_PB6Tx_PB7Rx
		// PB6 USART1->Tx(AF0)
		// PB7 USART1->Rx(AF0)
		Gpio USART1_tx = Gpio(GPIOB, 6);
 80013f0:	4920      	ldr	r1, [pc, #128]	; (8001474 <_ZN4Uart8InitGpioEv+0x98>)
 80013f2:	2420      	movs	r4, #32
 80013f4:	193b      	adds	r3, r7, r4
 80013f6:	2206      	movs	r2, #6
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff f8bf 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART1_rx = Gpio(GPIOB, 7);
 80013fe:	491d      	ldr	r1, [pc, #116]	; (8001474 <_ZN4Uart8InitGpioEv+0x98>)
 8001400:	2518      	movs	r5, #24
 8001402:	197b      	adds	r3, r7, r5
 8001404:	2207      	movs	r2, #7
 8001406:	0018      	movs	r0, r3
 8001408:	f7ff f8b8 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>

		USART1_tx.SetAsAF(AF0, OUTPUT_PP);
 800140c:	193b      	adds	r3, r7, r4
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff f9bd 	bl	8000792 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART1_rx.SetAsAF(AF0);
 8001418:	197b      	adds	r3, r7, r5
 800141a:	2100      	movs	r1, #0
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff f964 	bl	80006ea <_ZN4Gpio7SetAsAFE7GPIO_AF>

	} else {
		// Обробка спроби ініціалізації неіснуючого USART порта
		// "ERROR: Unkown port"
	}
}
 8001422:	e020      	b.n	8001466 <_ZN4Uart8InitGpioEv+0x8a>
	} else if (this->ItemUsart == USART2) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2284      	movs	r2, #132	; 0x84
 8001428:	589b      	ldr	r3, [r3, r2]
 800142a:	4a13      	ldr	r2, [pc, #76]	; (8001478 <_ZN4Uart8InitGpioEv+0x9c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d11a      	bne.n	8001466 <_ZN4Uart8InitGpioEv+0x8a>
		Gpio USART2_tx = Gpio(GPIOA, 2);
 8001430:	2390      	movs	r3, #144	; 0x90
 8001432:	05d9      	lsls	r1, r3, #23
 8001434:	2410      	movs	r4, #16
 8001436:	193b      	adds	r3, r7, r4
 8001438:	2202      	movs	r2, #2
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff f89e 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART2_rx = Gpio(GPIOA, 3);
 8001440:	2390      	movs	r3, #144	; 0x90
 8001442:	05d9      	lsls	r1, r3, #23
 8001444:	2508      	movs	r5, #8
 8001446:	197b      	adds	r3, r7, r5
 8001448:	2203      	movs	r2, #3
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff f896 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
		USART2_tx.SetAsAF(AF1, OUTPUT_PP);
 8001450:	193b      	adds	r3, r7, r4
 8001452:	2200      	movs	r2, #0
 8001454:	2101      	movs	r1, #1
 8001456:	0018      	movs	r0, r3
 8001458:	f7ff f99b 	bl	8000792 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART2_rx.SetAsAF(AF0);
 800145c:	197b      	adds	r3, r7, r5
 800145e:	2100      	movs	r1, #0
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff f942 	bl	80006ea <_ZN4Gpio7SetAsAFE7GPIO_AF>
}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	46bd      	mov	sp, r7
 800146a:	b00a      	add	sp, #40	; 0x28
 800146c:	bdb0      	pop	{r4, r5, r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	40013800 	.word	0x40013800
 8001474:	48000400 	.word	0x48000400
 8001478:	40004400 	.word	0x40004400

0800147c <_ZN4Uart11EnableClockEP13USART_TypeDef>:

void Uart::EnableClock(USART_TypeDef *UartPort) {
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]

	if (UartPort == USART1) {
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	4a16      	ldr	r2, [pc, #88]	; (80014e4 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x68>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d110      	bne.n	80014b0 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
		// Перед тим як ввімкнути тактування USART1 перевіримо, чи не було воно ввімкнене до цього?
		if (!(RCC->APB2ENR & RCC_APB2ENR_USART1EN)) {
 800148e:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001490:	699a      	ldr	r2, [r3, #24]
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	01db      	lsls	r3, r3, #7
 8001496:	4013      	ands	r3, r2
 8001498:	425a      	negs	r2, r3
 800149a:	4153      	adcs	r3, r2
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d006      	beq.n	80014b0 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
			RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 80014a4:	699a      	ldr	r2, [r3, #24]
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 80014a8:	2180      	movs	r1, #128	; 0x80
 80014aa:	01c9      	lsls	r1, r1, #7
 80014ac:	430a      	orrs	r2, r1
 80014ae:	619a      	str	r2, [r3, #24]
		}
	}
// Перед тим як ввімкнути тактування USART2 перевіримо, чи не було воно ввімкнене до цього?
	if (UartPort == USART2) {
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	4a0e      	ldr	r2, [pc, #56]	; (80014ec <_ZN4Uart11EnableClockEP13USART_TypeDef+0x70>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d110      	bne.n	80014da <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
		if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) {
 80014b8:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 80014ba:	69da      	ldr	r2, [r3, #28]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	029b      	lsls	r3, r3, #10
 80014c0:	4013      	ands	r3, r2
 80014c2:	425a      	negs	r2, r3
 80014c4:	4153      	adcs	r3, r2
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
			RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 80014ce:	69da      	ldr	r2, [r3, #28]
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	0289      	lsls	r1, r1, #10
 80014d6:	430a      	orrs	r2, r1
 80014d8:	61da      	str	r2, [r3, #28]
		}
	}

}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	46bd      	mov	sp, r7
 80014de:	b002      	add	sp, #8
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	40013800 	.word	0x40013800
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40004400 	.word	0x40004400

080014f0 <_ZN4Uart4InitEv>:

void Uart::Init(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	this->ItemUsart->CR1 = 0;             // Скидаю налаштування
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2284      	movs	r2, #132	; 0x84
 80014fc:	589b      	ldr	r3, [r3, r2]
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_UE; // Вмикаю модуль USART;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2284      	movs	r2, #132	; 0x84
 8001506:	589b      	ldr	r3, [r3, r2]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2184      	movs	r1, #132	; 0x84
 800150e:	585b      	ldr	r3, [r3, r1]
 8001510:	2101      	movs	r1, #1
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->BRR = 5000;          // Для 9600 Бод, при 48 МГц.

	if (this->ItemUsart->CR1 & USART_CR1_OVER8) {
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2284      	movs	r2, #132	; 0x84
 800151a:	589b      	ldr	r3, [r3, r2]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	2380      	movs	r3, #128	; 0x80
 8001520:	021b      	lsls	r3, r3, #8
 8001522:	4013      	ands	r3, r2
 8001524:	1e5a      	subs	r2, r3, #1
 8001526:	4193      	sbcs	r3, r2
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10f      	bne.n	800154e <_ZN4Uart4InitEv+0x5e>
		// Oversampling by 8

	} else {
		// Oversampling by 16
		int UsartBrrValue = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]

		UsartBrrValue = HCLK / this->ItemUsartBrrValue;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2288      	movs	r2, #136	; 0x88
 8001536:	589b      	ldr	r3, [r3, r2]
 8001538:	0019      	movs	r1, r3
 800153a:	4811      	ldr	r0, [pc, #68]	; (8001580 <_ZN4Uart4InitEv+0x90>)
 800153c:	f7fe fdee 	bl	800011c <__udivsi3>
 8001540:	0003      	movs	r3, r0
 8001542:	60fb      	str	r3, [r7, #12]

		this->ItemUsart->BRR = UsartBrrValue;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2284      	movs	r2, #132	; 0x84
 8001548:	589b      	ldr	r3, [r3, r2]
 800154a:	68fa      	ldr	r2, [r7, #12]
 800154c:	60da      	str	r2, [r3, #12]
	}

	this->ItemUsart->CR1 |= USART_CR1_TE; // Transmit enable
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2284      	movs	r2, #132	; 0x84
 8001552:	589b      	ldr	r3, [r3, r2]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2184      	movs	r1, #132	; 0x84
 800155a:	585b      	ldr	r3, [r3, r1]
 800155c:	2108      	movs	r1, #8
 800155e:	430a      	orrs	r2, r1
 8001560:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_RE; // Receive enable
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2284      	movs	r2, #132	; 0x84
 8001566:	589b      	ldr	r3, [r3, r2]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2184      	movs	r1, #132	; 0x84
 800156e:	585b      	ldr	r3, [r3, r1]
 8001570:	2104      	movs	r1, #4
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->CR2 = 0;
	//this->ItemUsart->CR3 = 0;
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}
 800157e:	46c0      	nop			; (mov r8, r8)
 8001580:	007a1200 	.word	0x007a1200

08001584 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>:
#define SPI1_DR_8bit          (*(__IO uint8_t *)((uint32_t)&(SPI1->DR)))
#define SPI2_DR_8bit          (*(__IO uint8_t *)((uint32_t)&(SPI2->DR)))

extern "C" void SPI1_IRQHandler();

SPI::SPI(SPI_TypeDef *Port, SPI_DataSize_t size)
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	1dfb      	adds	r3, r7, #7
 8001590:	701a      	strb	r2, [r3, #0]
{

	this->_dataSize = size;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	1dfa      	adds	r2, r7, #7
 8001596:	2122      	movs	r1, #34	; 0x22
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	545a      	strb	r2, [r3, r1]
	this->SPI_ITEM = Port;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	601a      	str	r2, [r3, #0]

	this->InitGpio();
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	0018      	movs	r0, r3
 80015a6:	f000 f865 	bl	8001674 <_ZN3SPI8InitGpioEv>
	this->EnableClk();
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f000 f8c5 	bl	800173c <_ZN3SPI9EnableClkEv>
	this->SetClockPrsc(fPCLK_DIV_By_2);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2100      	movs	r1, #0
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 f90b 	bl	80017d2 <_ZN3SPI12SetClockPrscE12SetClockPrsc>
	this->EnableSoftwareSlaveManagment();
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	0018      	movs	r0, r3
 80015c0:	f000 f91d 	bl	80017fe <_ZN3SPI28EnableSoftwareSlaveManagmentEv>
	this->EnableMotorollaMode();
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	0018      	movs	r0, r3
 80015c8:	f000 f933 	bl	8001832 <_ZN3SPI19EnableMotorollaModeEv>
	this->Config();
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 f836 	bl	8001640 <_ZN3SPI6ConfigEv>

	if (this->_dataSize == DataSize_16B)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2222      	movs	r2, #34	; 0x22
 80015d8:	5c9b      	ldrb	r3, [r3, r2]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d104      	bne.n	80015e8 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x64>
	{
		this->SetFrameSize(DataSize_16B);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	2101      	movs	r1, #1
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 f8d0 	bl	8001788 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
	}
	if (this->_dataSize == DataSize_8B)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2222      	movs	r2, #34	; 0x22
 80015ec:	5c9b      	ldrb	r3, [r3, r2]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d10d      	bne.n	800160e <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x8a>
	{
		this->SetFrameSize(DataSize_8B);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2100      	movs	r1, #0
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 f8c6 	bl	8001788 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
		this->SPI_ITEM->CR2 |= SPI_CR2_FRXTH; //Подія RXNE генерується, якщо рівень FIFO більше або дорівнює 1/4 (8-біт)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	685a      	ldr	r2, [r3, #4]
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	0149      	lsls	r1, r1, #5
 800160a:	430a      	orrs	r2, r1
 800160c:	605a      	str	r2, [r3, #4]
	}

	this->SetClockPhase(CPHA0);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2101      	movs	r1, #1
 8001612:	0018      	movs	r0, r3
 8001614:	f000 f97f 	bl	8001916 <_ZN3SPI13SetClockPhaseE10ClockPhase>
	this->SetClockPolarity(CPOL0);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	2101      	movs	r1, #1
 800161c:	0018      	movs	r0, r3
 800161e:	f000 f953 	bl	80018c8 <_ZN3SPI16SetClockPolarityE8ClockPol>
	this->SetMsbLsbFirst(MSB_First);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	2101      	movs	r1, #1
 8001626:	0018      	movs	r0, r3
 8001628:	f000 f99c 	bl	8001964 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>
	this->Enable();
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	0018      	movs	r0, r3
 8001630:	f000 f93a 	bl	80018a8 <_ZN3SPI6EnableEv>
}
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <_ZN3SPI6ConfigEv>:
void SPI::Config()
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
	// 1: 1-проводной режим роботи з двунаправленою передачею по лініях даних

	//this->SPI_ITEM->CR1 |= SPI_CR1_BIDIOE;   // 1: Лише прийом (працює лише при BIDIMODE = 1)
	// 0: Лише передача (працює лише при BIDIMODE = 1)

	this->SPI_ITEM->CR1 |= SPI_CR1_MSTR;       // 1: Master configuration
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2104      	movs	r1, #4
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
											   // 0: Slave configuration

	this->SPI_ITEM->CR2 &= ~SPI_CR2_DS;       // Clear bitfield
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4903      	ldr	r1, [pc, #12]	; (8001670 <_ZN3SPI6ConfigEv+0x30>)
 8001664:	400a      	ands	r2, r1
 8001666:	605a      	str	r2, [r3, #4]

}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b002      	add	sp, #8
 800166e:	bd80      	pop	{r7, pc}
 8001670:	fffff0ff 	.word	0xfffff0ff

08001674 <_ZN3SPI8InitGpioEv>:

void SPI::InitGpio(void)
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b08b      	sub	sp, #44	; 0x2c
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	// Визначення GPIO
	this->MISO_PORT = GPIOA;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2290      	movs	r2, #144	; 0x90
 8001680:	05d2      	lsls	r2, r2, #23
 8001682:	60da      	str	r2, [r3, #12]
	this->MISO_PIN = 6;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2206      	movs	r2, #6
 8001688:	821a      	strh	r2, [r3, #16]

	this->MOSI_PORT = GPIOB;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a29      	ldr	r2, [pc, #164]	; (8001734 <_ZN3SPI8InitGpioEv+0xc0>)
 800168e:	605a      	str	r2, [r3, #4]
	this->MOSI_PIN = 5;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2205      	movs	r2, #5
 8001694:	811a      	strh	r2, [r3, #8]

	this->SCK_PORT = GPIOB;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a26      	ldr	r2, [pc, #152]	; (8001734 <_ZN3SPI8InitGpioEv+0xc0>)
 800169a:	615a      	str	r2, [r3, #20]
	this->SCK_PIN = 3;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2203      	movs	r2, #3
 80016a0:	831a      	strh	r2, [r3, #24]

	this->nSC_PORT = GPIOC;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a24      	ldr	r2, [pc, #144]	; (8001738 <_ZN3SPI8InitGpioEv+0xc4>)
 80016a6:	61da      	str	r2, [r3, #28]
	this->nSC_PIN = 4;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2204      	movs	r2, #4
 80016ac:	841a      	strh	r2, [r3, #32]

	// Ініціалізація GPIO
	Gpio MISO = Gpio(this->MISO_PORT, this->MISO_PIN);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68d9      	ldr	r1, [r3, #12]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	8a1a      	ldrh	r2, [r3, #16]
 80016b6:	2420      	movs	r4, #32
 80016b8:	193b      	adds	r3, r7, r4
 80016ba:	0018      	movs	r0, r3
 80016bc:	f7fe ff5e 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
	MISO.SetAsAF(AF0, OUTPUT_PP);
 80016c0:	193b      	adds	r3, r7, r4
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7ff f863 	bl	8000792 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio MOSI = Gpio(this->MOSI_PORT, this->MOSI_PIN);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	891a      	ldrh	r2, [r3, #8]
 80016d4:	2418      	movs	r4, #24
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	0018      	movs	r0, r3
 80016da:	f7fe ff4f 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
	MOSI.SetAsAF(AF0, OUTPUT_PP);
 80016de:	193b      	adds	r3, r7, r4
 80016e0:	2200      	movs	r2, #0
 80016e2:	2100      	movs	r1, #0
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff f854 	bl	8000792 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio SCK = Gpio(this->SCK_PORT, this->SCK_PIN);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6959      	ldr	r1, [r3, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	8b1a      	ldrh	r2, [r3, #24]
 80016f2:	2410      	movs	r4, #16
 80016f4:	193b      	adds	r3, r7, r4
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7fe ff40 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
	SCK.SetAsAF(AF0, OUTPUT_PP);
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff f845 	bl	8000792 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio nCS = Gpio(this->nSC_PORT, this->nSC_PIN);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69d9      	ldr	r1, [r3, #28]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	8c1a      	ldrh	r2, [r3, #32]
 8001710:	2408      	movs	r4, #8
 8001712:	193b      	adds	r3, r7, r4
 8001714:	0018      	movs	r0, r3
 8001716:	f7fe ff31 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
	nCS.SetAsGenerapPurporseOutput(OUTPUT_PP);
 800171a:	193b      	adds	r3, r7, r4
 800171c:	2100      	movs	r1, #0
 800171e:	0018      	movs	r0, r3
 8001720:	f7ff f89c 	bl	800085c <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>
	this->nCS_High();
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	0018      	movs	r0, r3
 8001728:	f000 f8a9 	bl	800187e <_ZN3SPI8nCS_HighEv>
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b00b      	add	sp, #44	; 0x2c
 8001732:	bd90      	pop	{r4, r7, pc}
 8001734:	48000400 	.word	0x48000400
 8001738:	48000800 	.word	0x48000800

0800173c <_ZN3SPI9EnableClkEv>:

void SPI::EnableClk(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	if (this->SPI_ITEM == SPI1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0c      	ldr	r2, [pc, #48]	; (800177c <_ZN3SPI9EnableClkEv+0x40>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d106      	bne.n	800175c <_ZN3SPI9EnableClkEv+0x20>
	{
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <_ZN3SPI9EnableClkEv+0x44>)
 8001750:	699a      	ldr	r2, [r3, #24]
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <_ZN3SPI9EnableClkEv+0x44>)
 8001754:	2180      	movs	r1, #128	; 0x80
 8001756:	0149      	lsls	r1, r1, #5
 8001758:	430a      	orrs	r2, r1
 800175a:	619a      	str	r2, [r3, #24]
	}
	if (this->SPI_ITEM == SPI2)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a08      	ldr	r2, [pc, #32]	; (8001784 <_ZN3SPI9EnableClkEv+0x48>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d106      	bne.n	8001774 <_ZN3SPI9EnableClkEv+0x38>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001766:	4b06      	ldr	r3, [pc, #24]	; (8001780 <_ZN3SPI9EnableClkEv+0x44>)
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <_ZN3SPI9EnableClkEv+0x44>)
 800176c:	2180      	movs	r1, #128	; 0x80
 800176e:	01c9      	lsls	r1, r1, #7
 8001770:	430a      	orrs	r2, r1
 8001772:	61da      	str	r2, [r3, #28]
	}
}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b002      	add	sp, #8
 800177a:	bd80      	pop	{r7, pc}
 800177c:	40013000 	.word	0x40013000
 8001780:	40021000 	.word	0x40021000
 8001784:	40003800 	.word	0x40003800

08001788 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>:

void SPI::SetFrameSize(SPI_DataSize_t Size)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	000a      	movs	r2, r1
 8001792:	1cfb      	adds	r3, r7, #3
 8001794:	701a      	strb	r2, [r3, #0]
	if (Size == DataSize_8B)
 8001796:	1cfb      	adds	r3, r7, #3
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d108      	bne.n	80017b0 <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x28>
	{
		this->SPI_ITEM->CR2 |= 0x07 << SPI_CR2_DS_Pos; // 8 Bit frame
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	21e0      	movs	r1, #224	; 0xe0
 80017aa:	00c9      	lsls	r1, r1, #3
 80017ac:	430a      	orrs	r2, r1
 80017ae:	605a      	str	r2, [r3, #4]
	}
	if (Size == DataSize_16B)
 80017b0:	1cfb      	adds	r3, r7, #3
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d108      	bne.n	80017ca <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x42>
	{
		this->SPI_ITEM->CR2 |= (0x0F << SPI_CR2_DS_Pos); // 16 Bit frame
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	21f0      	movs	r1, #240	; 0xf0
 80017c4:	0109      	lsls	r1, r1, #4
 80017c6:	430a      	orrs	r2, r1
 80017c8:	605a      	str	r2, [r3, #4]
	}
}
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	46bd      	mov	sp, r7
 80017ce:	b002      	add	sp, #8
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_ZN3SPI12SetClockPrscE12SetClockPrsc>:

void SPI::SetClockPrsc(SetClockPrsc_t Prescaler)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	000a      	movs	r2, r1
 80017dc:	1cfb      	adds	r3, r7, #3
 80017de:	701a      	strb	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= (Prescaler << SPI_CR1_BR_Pos);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	1cfb      	adds	r3, r7, #3
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	0019      	movs	r1, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}

080017fe <_ZN3SPI28EnableSoftwareSlaveManagmentEv>:

void SPI::EnableSoftwareSlaveManagment(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSM;  // 1: Software slave management enabled
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2180      	movs	r1, #128	; 0x80
 8001812:	0089      	lsls	r1, r1, #2
 8001814:	430a      	orrs	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSI;  // 1: Internal slave select
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2180      	movs	r1, #128	; 0x80
 8001824:	0049      	lsls	r1, r1, #1
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}

08001832 <_ZN3SPI19EnableMotorollaModeEv>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SSM; // 1: Software slave management disabled
}

void SPI::EnableMotorollaMode(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR2 &= ~SPI_CR2_FRF;      // Motorolla mode
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2110      	movs	r1, #16
 8001846:	438a      	bics	r2, r1
 8001848:	605a      	str	r2, [r3, #4]
}
 800184a:	46c0      	nop			; (mov r8, r8)
 800184c:	46bd      	mov	sp, r7
 800184e:	b002      	add	sp, #8
 8001850:	bd80      	pop	{r7, pc}

08001852 <_ZN3SPI7nCS_LowEv>:

void SPI::nCS_Low(void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	b082      	sub	sp, #8
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= ((1 << this->nSC_PIN) << 16U); // BIT RESET
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	699a      	ldr	r2, [r3, #24]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	8c1b      	ldrh	r3, [r3, #32]
 8001864:	0019      	movs	r1, r3
 8001866:	2301      	movs	r3, #1
 8001868:	408b      	lsls	r3, r1
 800186a:	041b      	lsls	r3, r3, #16
 800186c:	0019      	movs	r1, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	430a      	orrs	r2, r1
 8001874:	619a      	str	r2, [r3, #24]
}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b002      	add	sp, #8
 800187c:	bd80      	pop	{r7, pc}

0800187e <_ZN3SPI8nCS_HighEv>:

void SPI::nCS_High(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= (1 << this->nSC_PIN); // BIT SET
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	699a      	ldr	r2, [r3, #24]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	8c1b      	ldrh	r3, [r3, #32]
 8001890:	0019      	movs	r1, r3
 8001892:	2301      	movs	r3, #1
 8001894:	408b      	lsls	r3, r1
 8001896:	0019      	movs	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	69db      	ldr	r3, [r3, #28]
 800189c:	430a      	orrs	r2, r1
 800189e:	619a      	str	r2, [r3, #24]
}
 80018a0:	46c0      	nop			; (mov r8, r8)
 80018a2:	46bd      	mov	sp, r7
 80018a4:	b002      	add	sp, #8
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <_ZN3SPI6EnableEv>:

void SPI::Enable(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SPE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2140      	movs	r1, #64	; 0x40
 80018bc:	430a      	orrs	r2, r1
 80018be:	601a      	str	r2, [r3, #0]
}
 80018c0:	46c0      	nop			; (mov r8, r8)
 80018c2:	46bd      	mov	sp, r7
 80018c4:	b002      	add	sp, #8
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_ZN3SPI16SetClockPolarityE8ClockPol>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SPE;
}

void SPI::SetClockPolarity(ClockPol_t cpol)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	000a      	movs	r2, r1
 80018d2:	1cfb      	adds	r3, r7, #3
 80018d4:	701a      	strb	r2, [r3, #0]

	if (cpol = CPOL1)
 80018d6:	1cfb      	adds	r3, r7, #3
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	2300      	movs	r3, #0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <_ZN3SPI16SetClockPolarityE8ClockPol+0x2a>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_CPOL;    // Polarity clc signal CPOL = 1;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2102      	movs	r1, #2
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]
	}
	if (cpol = CPOL0)
 80018f2:	1cfb      	adds	r3, r7, #3
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	2301      	movs	r3, #1
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <_ZN3SPI16SetClockPolarityE8ClockPol+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPOL;   // Polarity clc signal CPOL = 0;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2102      	movs	r1, #2
 800190a:	438a      	bics	r2, r1
 800190c:	601a      	str	r2, [r3, #0]
	}

}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}

08001916 <_ZN3SPI13SetClockPhaseE10ClockPhase>:

void SPI::SetClockPhase(ClockPhase_t cpha)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	000a      	movs	r2, r1
 8001920:	1cfb      	adds	r3, r7, #3
 8001922:	701a      	strb	r2, [r3, #0]
	if (cpha = CPHA1)
 8001924:	1cfb      	adds	r3, r7, #3
 8001926:	2200      	movs	r2, #0
 8001928:	701a      	strb	r2, [r3, #0]
 800192a:	2300      	movs	r3, #0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d007      	beq.n	8001940 <_ZN3SPI13SetClockPhaseE10ClockPhase+0x2a>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2101      	movs	r1, #1
 800193c:	438a      	bics	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
	}
	if (cpha = CPHA0)
 8001940:	1cfb      	adds	r3, r7, #3
 8001942:	2201      	movs	r2, #1
 8001944:	701a      	strb	r2, [r3, #0]
 8001946:	2301      	movs	r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <_ZN3SPI13SetClockPhaseE10ClockPhase+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2101      	movs	r1, #1
 8001958:	438a      	bics	r2, r1
 800195a:	601a      	str	r2, [r3, #0]
	}

}
 800195c:	46c0      	nop			; (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}

08001964 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>:

void SPI::SetMsbLsbFirst(MSB_LSB_First_t msb_lsb_first)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	000a      	movs	r2, r1
 800196e:	1cfb      	adds	r3, r7, #3
 8001970:	701a      	strb	r2, [r3, #0]
	if (msb_lsb_first == MSB_First)
 8001972:	1cfb      	adds	r3, r7, #3
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d107      	bne.n	800198a <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x26>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_LSBFIRST;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2180      	movs	r1, #128	; 0x80
 8001986:	438a      	bics	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
	}
	if (msb_lsb_first == LSB_First)
 800198a:	1cfb      	adds	r3, r7, #3
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d107      	bne.n	80019a2 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x3e>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_LSBFIRST;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	430a      	orrs	r2, r1
 80019a0:	601a      	str	r2, [r3, #0]
	}
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <_ZN3SPI8transferEh>:

uint8_t SPI::transfer(uint8_t data){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	000a      	movs	r2, r1
 80019b6:	1cfb      	adds	r3, r7, #3
 80019b8:	701a      	strb	r2, [r3, #0]
	    //this->nCS_Low();
		while (!(this->SPI_ITEM->SR & SPI_SR_TXE))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2202      	movs	r2, #2
 80019c2:	4013      	ands	r3, r2
 80019c4:	425a      	negs	r2, r3
 80019c6:	4153      	adcs	r3, r2
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d000      	beq.n	80019d0 <_ZN3SPI8transferEh+0x24>
 80019ce:	e7f4      	b.n	80019ba <_ZN3SPI8transferEh+0xe>
			; // Очікую спустошення передавального буфера.
		SPI1_DR_8bit = data;
 80019d0:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <_ZN3SPI8transferEh+0x50>)
 80019d2:	1cfb      	adds	r3, r7, #3
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	7013      	strb	r3, [r2, #0]

		while (!(this->SPI_ITEM->SR & SPI_SR_RXNE))
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2201      	movs	r2, #1
 80019e0:	4013      	ands	r3, r2
 80019e2:	425a      	negs	r2, r3
 80019e4:	4153      	adcs	r3, r2
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d000      	beq.n	80019ee <_ZN3SPI8transferEh+0x42>
 80019ec:	e7f4      	b.n	80019d8 <_ZN3SPI8transferEh+0x2c>
			; // Очікую заповнення приймального буфера.
		return (SPI1_DR_8bit);
 80019ee:	4b03      	ldr	r3, [pc, #12]	; (80019fc <_ZN3SPI8transferEh+0x50>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	b2db      	uxtb	r3, r3
		//this->nCS_Low();
}
 80019f4:	0018      	movs	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b002      	add	sp, #8
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	4001300c 	.word	0x4001300c

08001a00 <main>:
uint8_t ReceiveRegValue = 0;
uint8_t Temperature = 0;
int32_t freq=0;

int main(void)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b0ad      	sub	sp, #180	; 0xb4
 8001a04:	af02      	add	r7, sp, #8

	mstimer_init();
 8001a06:	f000 f889 	bl	8001b1c <_Z12mstimer_initv>


	RFM69 Modem = RFM69(SPI1, GPIOC, 4, true, DataSize_8B);
 8001a0a:	4a2d      	ldr	r2, [pc, #180]	; (8001ac0 <main+0xc0>)
 8001a0c:	492d      	ldr	r1, [pc, #180]	; (8001ac4 <main+0xc4>)
 8001a0e:	2410      	movs	r4, #16
 8001a10:	1938      	adds	r0, r7, r4
 8001a12:	2300      	movs	r3, #0
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	2301      	movs	r3, #1
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	f7fe ff44 	bl	80008a8 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize>

	//freq = Modem.getFrequency();
	ReceiveRegValue = Modem.readRegister(REG_NODEADRS);
 8001a20:	193b      	adds	r3, r7, r4
 8001a22:	2139      	movs	r1, #57	; 0x39
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7fe ffff 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 8001a2a:	0003      	movs	r3, r0
 8001a2c:	001a      	movs	r2, r3
 8001a2e:	4b26      	ldr	r3, [pc, #152]	; (8001ac8 <main+0xc8>)
 8001a30:	701a      	strb	r2, [r3, #0]
	Modem.setAddress(21);
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	2115      	movs	r1, #21
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7ff fc86 	bl	8001348 <_ZN5RFM6910setAddressEt>
	ReceiveRegValue = Modem.readRegister(REG_NODEADRS);
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	2139      	movs	r1, #57	; 0x39
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7fe fff1 	bl	8000a28 <_ZN5RFM6912readRegisterEh>
 8001a46:	0003      	movs	r3, r0
 8001a48:	001a      	movs	r2, r3
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	; (8001ac8 <main+0xc8>)
 8001a4c:	701a      	strb	r2, [r3, #0]

	Modem.SetResetPin(GPIOC, 5);
 8001a4e:	491c      	ldr	r1, [pc, #112]	; (8001ac0 <main+0xc0>)
 8001a50:	193b      	adds	r3, r7, r4
 8001a52:	2205      	movs	r2, #5
 8001a54:	0018      	movs	r0, r3
 8001a56:	f7ff fc57 	bl	8001308 <_ZN5RFM6911SetResetPinEP12GPIO_TypeDeft>
	Modem.reset();
 8001a5a:	193b      	adds	r3, r7, r4
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7fe ff8d 	bl	800097c <_ZN5RFM695resetEv>

	Modem.init();
 8001a62:	193b      	adds	r3, r7, r4
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7fe ffbf 	bl	80009e8 <_ZN5RFM694initEv>
	Modem.sleep();
 8001a6a:	193b      	adds	r3, r7, r4
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff f9b0 	bl	8000dd2 <_ZN5RFM695sleepEv>
	Modem.setPowerDBm(10);
 8001a72:	193b      	adds	r3, r7, r4
 8001a74:	210a      	movs	r1, #10
 8001a76:	0018      	movs	r0, r3
 8001a78:	f7ff fa7c 	bl	8000f74 <_ZN5RFM6911setPowerDBmEa>
	Modem.setCSMA(true);
 8001a7c:	193b      	adds	r3, r7, r4
 8001a7e:	2101      	movs	r1, #1
 8001a80:	0018      	movs	r0, r3
 8001a82:	f7fe ff6b 	bl	800095c <_ZN5RFM697setCSMAEb>

	char testdata[] =
 8001a86:	2008      	movs	r0, #8
 8001a88:	183b      	adds	r3, r7, r0
 8001a8a:	4a10      	ldr	r2, [pc, #64]	; (8001acc <main+0xcc>)
 8001a8c:	6811      	ldr	r1, [r2, #0]
 8001a8e:	6019      	str	r1, [r3, #0]
 8001a90:	7912      	ldrb	r2, [r2, #4]
 8001a92:	711a      	strb	r2, [r3, #4]
	{ 'H', 'e', 'l', 'l', 'o' };
	Modem.send(testdata, sizeof(testdata));
 8001a94:	1839      	adds	r1, r7, r0
 8001a96:	193b      	adds	r3, r7, r4
 8001a98:	2205      	movs	r2, #5
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f7ff fb39 	bl	8001112 <_ZN5RFM694sendEPKvj>
	Modem.sleep();
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f7ff f995 	bl	8000dd2 <_ZN5RFM695sleepEv>

	char rx[8];
	int bytesReceived;
	bytesReceived = Modem.receive(rx, sizeof(rx));
 8001aa8:	0039      	movs	r1, r7
 8001aaa:	193b      	adds	r3, r7, r4
 8001aac:	2208      	movs	r2, #8
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff f99c 	bl	8000dec <_ZN5RFM697receiveEPcj>
 8001ab4:	0003      	movs	r3, r0
 8001ab6:	22a4      	movs	r2, #164	; 0xa4
 8001ab8:	18ba      	adds	r2, r7, r2
 8001aba:	6013      	str	r3, [r2, #0]


	while (1)
 8001abc:	e7fe      	b.n	8001abc <main+0xbc>
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	48000800 	.word	0x48000800
 8001ac4:	40013000 	.word	0x40013000
 8001ac8:	20000114 	.word	0x20000114
 8001acc:	08002eac 	.word	0x08002eac

08001ad0 <SysTick_Handler>:

	}
}

extern "C" void SysTick_Handler()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	uptime_ms++;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	; (8001ae4 <SysTick_Handler+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <SysTick_Handler+0x14>)
 8001adc:	601a      	str	r2, [r3, #0]
}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000084 	.word	0x20000084

08001ae8 <_Z8delay_msj>:
/** Wait for X milliseconds.
 *
 * @param ms Milliseconds
 */
void delay_ms(unsigned ms)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
	uint32_t start = uptime_ms;
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <_Z8delay_msj+0x30>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	60fb      	str	r3, [r7, #12]
	while (uptime_ms - start < ms)
 8001af6:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <_Z8delay_msj+0x30>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad2      	subs	r2, r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	419b      	sbcs	r3, r3
 8001b04:	425b      	negs	r3, r3
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d000      	beq.n	8001b0e <_Z8delay_msj+0x26>
 8001b0c:	e7f3      	b.n	8001af6 <_Z8delay_msj+0xe>
		;
}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b004      	add	sp, #16
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	20000084 	.word	0x20000084

08001b1c <_Z12mstimer_initv>:

/** Initialize the millisecond timer. */
void mstimer_init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <_Z12mstimer_initv+0x20>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	22fa      	movs	r2, #250	; 0xfa
 8001b26:	0091      	lsls	r1, r2, #2
 8001b28:	0018      	movs	r0, r3
 8001b2a:	f7fe faf7 	bl	800011c <__udivsi3>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7fe fcff 	bl	8000534 <SysTick_Config>
}
 8001b36:	46c0      	nop			; (mov r8, r8)
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000000 	.word	0x20000000

08001b40 <_Z11mstimer_getv>:
/** Return the number of milliseconds since start.
 *
 * @return Milliseconds
 */
uint32_t mstimer_get(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
	return uptime_ms;
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <_Z11mstimer_getv+0x10>)
 8001b46:	681b      	ldr	r3, [r3, #0]
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	20000084 	.word	0x20000084

08001b54 <_Z41__static_initialization_and_destruction_0ii>:
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d10a      	bne.n	8001b7a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d106      	bne.n	8001b7a <_Z41__static_initialization_and_destruction_0ii+0x26>
Uart Debug = Uart(USART1, 115200);
 8001b6c:	23e1      	movs	r3, #225	; 0xe1
 8001b6e:	025a      	lsls	r2, r3, #9
 8001b70:	4905      	ldr	r1, [pc, #20]	; (8001b88 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff fc00 	bl	800137a <_ZN4UartC1EP13USART_TypeDefm>
}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b002      	add	sp, #8
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	0000ffff 	.word	0x0000ffff
 8001b88:	40013800 	.word	0x40013800
 8001b8c:	20000088 	.word	0x20000088

08001b90 <_GLOBAL__sub_I__ZN4GpioC2EP12GPIO_TypeDeft>:
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <_GLOBAL__sub_I__ZN4GpioC2EP12GPIO_TypeDeft+0x14>)
 8001b96:	0019      	movs	r1, r3
 8001b98:	2001      	movs	r0, #1
 8001b9a:	f7ff ffdb 	bl	8001b54 <_Z41__static_initialization_and_destruction_0ii>
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	46c0      	nop			; (mov r8, r8)
 8001ba4:	0000ffff 	.word	0x0000ffff

08001ba8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
	return 1;
 8001bac:	2301      	movs	r3, #1
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <_kill>:

int _kill(int pid, int sig)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bbe:	f000 f8e1 	bl	8001d84 <__errno>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	2216      	movs	r2, #22
 8001bc6:	601a      	str	r2, [r3, #0]
	return -1;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	425b      	negs	r3, r3
}
 8001bcc:	0018      	movs	r0, r3
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	b002      	add	sp, #8
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_exit>:

void _exit (int status)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bdc:	2301      	movs	r3, #1
 8001bde:	425a      	negs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	0011      	movs	r1, r2
 8001be4:	0018      	movs	r0, r3
 8001be6:	f7ff ffe5 	bl	8001bb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bea:	e7fe      	b.n	8001bea <_exit+0x16>

08001bec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b086      	sub	sp, #24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	e00a      	b.n	8001c14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bfe:	e000      	b.n	8001c02 <_read+0x16>
 8001c00:	bf00      	nop
 8001c02:	0001      	movs	r1, r0
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	60ba      	str	r2, [r7, #8]
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	3301      	adds	r3, #1
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dbf0      	blt.n	8001bfe <_read+0x12>
	}

return len;
 8001c1c:	687b      	ldr	r3, [r7, #4]
}
 8001c1e:	0018      	movs	r0, r3
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b006      	add	sp, #24
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	60f8      	str	r0, [r7, #12]
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e009      	b.n	8001c4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	60ba      	str	r2, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	0018      	movs	r0, r3
 8001c42:	e000      	b.n	8001c46 <_write+0x20>
 8001c44:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	dbf1      	blt.n	8001c38 <_write+0x12>
	}
	return len;
 8001c54:	687b      	ldr	r3, [r7, #4]
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b006      	add	sp, #24
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <_close>:

int _close(int file)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
	return -1;
 8001c66:	2301      	movs	r3, #1
 8001c68:	425b      	negs	r3, r3
}
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	b002      	add	sp, #8
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b082      	sub	sp, #8
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	2280      	movs	r2, #128	; 0x80
 8001c80:	0192      	lsls	r2, r2, #6
 8001c82:	605a      	str	r2, [r3, #4]
	return 0;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	0018      	movs	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b002      	add	sp, #8
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_isatty>:

int _isatty(int file)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b082      	sub	sp, #8
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
	return 1;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
	return 0;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	0018      	movs	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b004      	add	sp, #16
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b086      	sub	sp, #24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc0:	4a14      	ldr	r2, [pc, #80]	; (8001d14 <_sbrk+0x5c>)
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <_sbrk+0x60>)
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d102      	bne.n	8001cda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <_sbrk+0x64>)
 8001cd6:	4a12      	ldr	r2, [pc, #72]	; (8001d20 <_sbrk+0x68>)
 8001cd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <_sbrk+0x64>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	18d3      	adds	r3, r2, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d207      	bcs.n	8001cf8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ce8:	f000 f84c 	bl	8001d84 <__errno>
 8001cec:	0003      	movs	r3, r0
 8001cee:	220c      	movs	r2, #12
 8001cf0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	425b      	negs	r3, r3
 8001cf6:	e009      	b.n	8001d0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <_sbrk+0x64>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <_sbrk+0x64>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	18d2      	adds	r2, r2, r3
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <_sbrk+0x64>)
 8001d08:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b006      	add	sp, #24
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20002000 	.word	0x20002000
 8001d18:	00000400 	.word	0x00000400
 8001d1c:	20000118 	.word	0x20000118
 8001d20:	20000138 	.word	0x20000138

08001d24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001d28:	46c0      	nop			; (mov r8, r8)
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
	...

08001d30 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d30:	480d      	ldr	r0, [pc, #52]	; (8001d68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d32:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001d34:	f7ff fff6 	bl	8001d24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d38:	480c      	ldr	r0, [pc, #48]	; (8001d6c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d3a:	490d      	ldr	r1, [pc, #52]	; (8001d70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <LoopForever+0xe>)
  movs r3, #0
 8001d3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d40:	e002      	b.n	8001d48 <LoopCopyDataInit>

08001d42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d46:	3304      	adds	r3, #4

08001d48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d4c:	d3f9      	bcc.n	8001d42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	; (8001d78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d50:	4c0a      	ldr	r4, [pc, #40]	; (8001d7c <LoopForever+0x16>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d54:	e001      	b.n	8001d5a <LoopFillZerobss>

08001d56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d58:	3204      	adds	r2, #4

08001d5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d5c:	d3fb      	bcc.n	8001d56 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d5e:	f000 f817 	bl	8001d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d62:	f7ff fe4d 	bl	8001a00 <main>

08001d66 <LoopForever>:

LoopForever:
    b LoopForever
 8001d66:	e7fe      	b.n	8001d66 <LoopForever>
  ldr   r0, =_estack
 8001d68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d70:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001d74:	08003038 	.word	0x08003038
  ldr r2, =_sbss
 8001d78:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001d7c:	20000134 	.word	0x20000134

08001d80 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d80:	e7fe      	b.n	8001d80 <ADC_COMP_IRQHandler>
	...

08001d84 <__errno>:
 8001d84:	4b01      	ldr	r3, [pc, #4]	; (8001d8c <__errno+0x8>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	4770      	bx	lr
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	20000004 	.word	0x20000004

08001d90 <__libc_init_array>:
 8001d90:	b570      	push	{r4, r5, r6, lr}
 8001d92:	2600      	movs	r6, #0
 8001d94:	4d0c      	ldr	r5, [pc, #48]	; (8001dc8 <__libc_init_array+0x38>)
 8001d96:	4c0d      	ldr	r4, [pc, #52]	; (8001dcc <__libc_init_array+0x3c>)
 8001d98:	1b64      	subs	r4, r4, r5
 8001d9a:	10a4      	asrs	r4, r4, #2
 8001d9c:	42a6      	cmp	r6, r4
 8001d9e:	d109      	bne.n	8001db4 <__libc_init_array+0x24>
 8001da0:	2600      	movs	r6, #0
 8001da2:	f001 f877 	bl	8002e94 <_init>
 8001da6:	4d0a      	ldr	r5, [pc, #40]	; (8001dd0 <__libc_init_array+0x40>)
 8001da8:	4c0a      	ldr	r4, [pc, #40]	; (8001dd4 <__libc_init_array+0x44>)
 8001daa:	1b64      	subs	r4, r4, r5
 8001dac:	10a4      	asrs	r4, r4, #2
 8001dae:	42a6      	cmp	r6, r4
 8001db0:	d105      	bne.n	8001dbe <__libc_init_array+0x2e>
 8001db2:	bd70      	pop	{r4, r5, r6, pc}
 8001db4:	00b3      	lsls	r3, r6, #2
 8001db6:	58eb      	ldr	r3, [r5, r3]
 8001db8:	4798      	blx	r3
 8001dba:	3601      	adds	r6, #1
 8001dbc:	e7ee      	b.n	8001d9c <__libc_init_array+0xc>
 8001dbe:	00b3      	lsls	r3, r6, #2
 8001dc0:	58eb      	ldr	r3, [r5, r3]
 8001dc2:	4798      	blx	r3
 8001dc4:	3601      	adds	r6, #1
 8001dc6:	e7f2      	b.n	8001dae <__libc_init_array+0x1e>
 8001dc8:	0800302c 	.word	0x0800302c
 8001dcc:	0800302c 	.word	0x0800302c
 8001dd0:	0800302c 	.word	0x0800302c
 8001dd4:	08003034 	.word	0x08003034

08001dd8 <memcpy>:
 8001dd8:	2300      	movs	r3, #0
 8001dda:	b510      	push	{r4, lr}
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d100      	bne.n	8001de2 <memcpy+0xa>
 8001de0:	bd10      	pop	{r4, pc}
 8001de2:	5ccc      	ldrb	r4, [r1, r3]
 8001de4:	54c4      	strb	r4, [r0, r3]
 8001de6:	3301      	adds	r3, #1
 8001de8:	e7f8      	b.n	8001ddc <memcpy+0x4>

08001dea <memset>:
 8001dea:	0003      	movs	r3, r0
 8001dec:	1882      	adds	r2, r0, r2
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d100      	bne.n	8001df4 <memset+0xa>
 8001df2:	4770      	bx	lr
 8001df4:	7019      	strb	r1, [r3, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	e7f9      	b.n	8001dee <memset+0x4>
	...

08001dfc <rand>:
 8001dfc:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <rand+0x5c>)
 8001dfe:	b510      	push	{r4, lr}
 8001e00:	681c      	ldr	r4, [r3, #0]
 8001e02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d116      	bne.n	8001e36 <rand+0x3a>
 8001e08:	2018      	movs	r0, #24
 8001e0a:	f000 f863 	bl	8001ed4 <malloc>
 8001e0e:	1e02      	subs	r2, r0, #0
 8001e10:	63a0      	str	r0, [r4, #56]	; 0x38
 8001e12:	d104      	bne.n	8001e1e <rand+0x22>
 8001e14:	214e      	movs	r1, #78	; 0x4e
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <rand+0x60>)
 8001e18:	4811      	ldr	r0, [pc, #68]	; (8001e60 <rand+0x64>)
 8001e1a:	f000 f82d 	bl	8001e78 <__assert_func>
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <rand+0x68>)
 8001e20:	2100      	movs	r1, #0
 8001e22:	6003      	str	r3, [r0, #0]
 8001e24:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <rand+0x6c>)
 8001e26:	6043      	str	r3, [r0, #4]
 8001e28:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <rand+0x70>)
 8001e2a:	6083      	str	r3, [r0, #8]
 8001e2c:	230b      	movs	r3, #11
 8001e2e:	8183      	strh	r3, [r0, #12]
 8001e30:	2001      	movs	r0, #1
 8001e32:	6110      	str	r0, [r2, #16]
 8001e34:	6151      	str	r1, [r2, #20]
 8001e36:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <rand+0x74>)
 8001e3a:	6920      	ldr	r0, [r4, #16]
 8001e3c:	6961      	ldr	r1, [r4, #20]
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <rand+0x78>)
 8001e40:	f7fe fae2 	bl	8000408 <__aeabi_lmul>
 8001e44:	2201      	movs	r2, #1
 8001e46:	2300      	movs	r3, #0
 8001e48:	1880      	adds	r0, r0, r2
 8001e4a:	4159      	adcs	r1, r3
 8001e4c:	6120      	str	r0, [r4, #16]
 8001e4e:	6161      	str	r1, [r4, #20]
 8001e50:	0048      	lsls	r0, r1, #1
 8001e52:	0840      	lsrs	r0, r0, #1
 8001e54:	bd10      	pop	{r4, pc}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	08002ee4 	.word	0x08002ee4
 8001e60:	08002efb 	.word	0x08002efb
 8001e64:	abcd330e 	.word	0xabcd330e
 8001e68:	e66d1234 	.word	0xe66d1234
 8001e6c:	0005deec 	.word	0x0005deec
 8001e70:	4c957f2d 	.word	0x4c957f2d
 8001e74:	5851f42d 	.word	0x5851f42d

08001e78 <__assert_func>:
 8001e78:	b530      	push	{r4, r5, lr}
 8001e7a:	0014      	movs	r4, r2
 8001e7c:	001a      	movs	r2, r3
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <__assert_func+0x2c>)
 8001e80:	0005      	movs	r5, r0
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	b085      	sub	sp, #20
 8001e86:	68d8      	ldr	r0, [r3, #12]
 8001e88:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <__assert_func+0x30>)
 8001e8a:	2c00      	cmp	r4, #0
 8001e8c:	d101      	bne.n	8001e92 <__assert_func+0x1a>
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <__assert_func+0x34>)
 8001e90:	001c      	movs	r4, r3
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	9100      	str	r1, [sp, #0]
 8001e96:	002b      	movs	r3, r5
 8001e98:	4905      	ldr	r1, [pc, #20]	; (8001eb0 <__assert_func+0x38>)
 8001e9a:	9402      	str	r4, [sp, #8]
 8001e9c:	f000 f80a 	bl	8001eb4 <fiprintf>
 8001ea0:	f000 fc8e 	bl	80027c0 <abort>
 8001ea4:	20000004 	.word	0x20000004
 8001ea8:	08002f5a 	.word	0x08002f5a
 8001eac:	08002f95 	.word	0x08002f95
 8001eb0:	08002f67 	.word	0x08002f67

08001eb4 <fiprintf>:
 8001eb4:	b40e      	push	{r1, r2, r3}
 8001eb6:	b503      	push	{r0, r1, lr}
 8001eb8:	0001      	movs	r1, r0
 8001eba:	ab03      	add	r3, sp, #12
 8001ebc:	4804      	ldr	r0, [pc, #16]	; (8001ed0 <fiprintf+0x1c>)
 8001ebe:	cb04      	ldmia	r3!, {r2}
 8001ec0:	6800      	ldr	r0, [r0, #0]
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	f000 f8e0 	bl	8002088 <_vfiprintf_r>
 8001ec8:	b002      	add	sp, #8
 8001eca:	bc08      	pop	{r3}
 8001ecc:	b003      	add	sp, #12
 8001ece:	4718      	bx	r3
 8001ed0:	20000004 	.word	0x20000004

08001ed4 <malloc>:
 8001ed4:	b510      	push	{r4, lr}
 8001ed6:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <malloc+0x10>)
 8001ed8:	0001      	movs	r1, r0
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	f000 f84e 	bl	8001f7c <_malloc_r>
 8001ee0:	bd10      	pop	{r4, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	20000004 	.word	0x20000004

08001ee8 <_free_r>:
 8001ee8:	b570      	push	{r4, r5, r6, lr}
 8001eea:	0005      	movs	r5, r0
 8001eec:	2900      	cmp	r1, #0
 8001eee:	d010      	beq.n	8001f12 <_free_r+0x2a>
 8001ef0:	1f0c      	subs	r4, r1, #4
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da00      	bge.n	8001efa <_free_r+0x12>
 8001ef8:	18e4      	adds	r4, r4, r3
 8001efa:	0028      	movs	r0, r5
 8001efc:	f000 feb2 	bl	8002c64 <__malloc_lock>
 8001f00:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <_free_r+0x90>)
 8001f02:	6813      	ldr	r3, [r2, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d105      	bne.n	8001f14 <_free_r+0x2c>
 8001f08:	6063      	str	r3, [r4, #4]
 8001f0a:	6014      	str	r4, [r2, #0]
 8001f0c:	0028      	movs	r0, r5
 8001f0e:	f000 feb1 	bl	8002c74 <__malloc_unlock>
 8001f12:	bd70      	pop	{r4, r5, r6, pc}
 8001f14:	42a3      	cmp	r3, r4
 8001f16:	d908      	bls.n	8001f2a <_free_r+0x42>
 8001f18:	6821      	ldr	r1, [r4, #0]
 8001f1a:	1860      	adds	r0, r4, r1
 8001f1c:	4283      	cmp	r3, r0
 8001f1e:	d1f3      	bne.n	8001f08 <_free_r+0x20>
 8001f20:	6818      	ldr	r0, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	1841      	adds	r1, r0, r1
 8001f26:	6021      	str	r1, [r4, #0]
 8001f28:	e7ee      	b.n	8001f08 <_free_r+0x20>
 8001f2a:	001a      	movs	r2, r3
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <_free_r+0x4e>
 8001f32:	42a3      	cmp	r3, r4
 8001f34:	d9f9      	bls.n	8001f2a <_free_r+0x42>
 8001f36:	6811      	ldr	r1, [r2, #0]
 8001f38:	1850      	adds	r0, r2, r1
 8001f3a:	42a0      	cmp	r0, r4
 8001f3c:	d10b      	bne.n	8001f56 <_free_r+0x6e>
 8001f3e:	6820      	ldr	r0, [r4, #0]
 8001f40:	1809      	adds	r1, r1, r0
 8001f42:	1850      	adds	r0, r2, r1
 8001f44:	6011      	str	r1, [r2, #0]
 8001f46:	4283      	cmp	r3, r0
 8001f48:	d1e0      	bne.n	8001f0c <_free_r+0x24>
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	1841      	adds	r1, r0, r1
 8001f50:	6011      	str	r1, [r2, #0]
 8001f52:	6053      	str	r3, [r2, #4]
 8001f54:	e7da      	b.n	8001f0c <_free_r+0x24>
 8001f56:	42a0      	cmp	r0, r4
 8001f58:	d902      	bls.n	8001f60 <_free_r+0x78>
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	602b      	str	r3, [r5, #0]
 8001f5e:	e7d5      	b.n	8001f0c <_free_r+0x24>
 8001f60:	6821      	ldr	r1, [r4, #0]
 8001f62:	1860      	adds	r0, r4, r1
 8001f64:	4283      	cmp	r3, r0
 8001f66:	d103      	bne.n	8001f70 <_free_r+0x88>
 8001f68:	6818      	ldr	r0, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	1841      	adds	r1, r0, r1
 8001f6e:	6021      	str	r1, [r4, #0]
 8001f70:	6063      	str	r3, [r4, #4]
 8001f72:	6054      	str	r4, [r2, #4]
 8001f74:	e7ca      	b.n	8001f0c <_free_r+0x24>
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	2000011c 	.word	0x2000011c

08001f7c <_malloc_r>:
 8001f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7e:	2303      	movs	r3, #3
 8001f80:	1ccd      	adds	r5, r1, #3
 8001f82:	439d      	bics	r5, r3
 8001f84:	3508      	adds	r5, #8
 8001f86:	0006      	movs	r6, r0
 8001f88:	2d0c      	cmp	r5, #12
 8001f8a:	d21f      	bcs.n	8001fcc <_malloc_r+0x50>
 8001f8c:	250c      	movs	r5, #12
 8001f8e:	42a9      	cmp	r1, r5
 8001f90:	d81e      	bhi.n	8001fd0 <_malloc_r+0x54>
 8001f92:	0030      	movs	r0, r6
 8001f94:	f000 fe66 	bl	8002c64 <__malloc_lock>
 8001f98:	4925      	ldr	r1, [pc, #148]	; (8002030 <_malloc_r+0xb4>)
 8001f9a:	680a      	ldr	r2, [r1, #0]
 8001f9c:	0014      	movs	r4, r2
 8001f9e:	2c00      	cmp	r4, #0
 8001fa0:	d11a      	bne.n	8001fd8 <_malloc_r+0x5c>
 8001fa2:	4f24      	ldr	r7, [pc, #144]	; (8002034 <_malloc_r+0xb8>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d104      	bne.n	8001fb4 <_malloc_r+0x38>
 8001faa:	0021      	movs	r1, r4
 8001fac:	0030      	movs	r0, r6
 8001fae:	f000 fb27 	bl	8002600 <_sbrk_r>
 8001fb2:	6038      	str	r0, [r7, #0]
 8001fb4:	0029      	movs	r1, r5
 8001fb6:	0030      	movs	r0, r6
 8001fb8:	f000 fb22 	bl	8002600 <_sbrk_r>
 8001fbc:	1c43      	adds	r3, r0, #1
 8001fbe:	d12b      	bne.n	8002018 <_malloc_r+0x9c>
 8001fc0:	230c      	movs	r3, #12
 8001fc2:	0030      	movs	r0, r6
 8001fc4:	6033      	str	r3, [r6, #0]
 8001fc6:	f000 fe55 	bl	8002c74 <__malloc_unlock>
 8001fca:	e003      	b.n	8001fd4 <_malloc_r+0x58>
 8001fcc:	2d00      	cmp	r5, #0
 8001fce:	dade      	bge.n	8001f8e <_malloc_r+0x12>
 8001fd0:	230c      	movs	r3, #12
 8001fd2:	6033      	str	r3, [r6, #0]
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	1b5b      	subs	r3, r3, r5
 8001fdc:	d419      	bmi.n	8002012 <_malloc_r+0x96>
 8001fde:	2b0b      	cmp	r3, #11
 8001fe0:	d903      	bls.n	8001fea <_malloc_r+0x6e>
 8001fe2:	6023      	str	r3, [r4, #0]
 8001fe4:	18e4      	adds	r4, r4, r3
 8001fe6:	6025      	str	r5, [r4, #0]
 8001fe8:	e003      	b.n	8001ff2 <_malloc_r+0x76>
 8001fea:	6863      	ldr	r3, [r4, #4]
 8001fec:	42a2      	cmp	r2, r4
 8001fee:	d10e      	bne.n	800200e <_malloc_r+0x92>
 8001ff0:	600b      	str	r3, [r1, #0]
 8001ff2:	0030      	movs	r0, r6
 8001ff4:	f000 fe3e 	bl	8002c74 <__malloc_unlock>
 8001ff8:	0020      	movs	r0, r4
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	300b      	adds	r0, #11
 8001ffe:	1d23      	adds	r3, r4, #4
 8002000:	4390      	bics	r0, r2
 8002002:	1ac2      	subs	r2, r0, r3
 8002004:	4298      	cmp	r0, r3
 8002006:	d0e6      	beq.n	8001fd6 <_malloc_r+0x5a>
 8002008:	1a1b      	subs	r3, r3, r0
 800200a:	50a3      	str	r3, [r4, r2]
 800200c:	e7e3      	b.n	8001fd6 <_malloc_r+0x5a>
 800200e:	6053      	str	r3, [r2, #4]
 8002010:	e7ef      	b.n	8001ff2 <_malloc_r+0x76>
 8002012:	0022      	movs	r2, r4
 8002014:	6864      	ldr	r4, [r4, #4]
 8002016:	e7c2      	b.n	8001f9e <_malloc_r+0x22>
 8002018:	2303      	movs	r3, #3
 800201a:	1cc4      	adds	r4, r0, #3
 800201c:	439c      	bics	r4, r3
 800201e:	42a0      	cmp	r0, r4
 8002020:	d0e1      	beq.n	8001fe6 <_malloc_r+0x6a>
 8002022:	1a21      	subs	r1, r4, r0
 8002024:	0030      	movs	r0, r6
 8002026:	f000 faeb 	bl	8002600 <_sbrk_r>
 800202a:	1c43      	adds	r3, r0, #1
 800202c:	d1db      	bne.n	8001fe6 <_malloc_r+0x6a>
 800202e:	e7c7      	b.n	8001fc0 <_malloc_r+0x44>
 8002030:	2000011c 	.word	0x2000011c
 8002034:	20000120 	.word	0x20000120

08002038 <__sfputc_r>:
 8002038:	6893      	ldr	r3, [r2, #8]
 800203a:	b510      	push	{r4, lr}
 800203c:	3b01      	subs	r3, #1
 800203e:	6093      	str	r3, [r2, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	da04      	bge.n	800204e <__sfputc_r+0x16>
 8002044:	6994      	ldr	r4, [r2, #24]
 8002046:	42a3      	cmp	r3, r4
 8002048:	db07      	blt.n	800205a <__sfputc_r+0x22>
 800204a:	290a      	cmp	r1, #10
 800204c:	d005      	beq.n	800205a <__sfputc_r+0x22>
 800204e:	6813      	ldr	r3, [r2, #0]
 8002050:	1c58      	adds	r0, r3, #1
 8002052:	6010      	str	r0, [r2, #0]
 8002054:	7019      	strb	r1, [r3, #0]
 8002056:	0008      	movs	r0, r1
 8002058:	bd10      	pop	{r4, pc}
 800205a:	f000 fae3 	bl	8002624 <__swbuf_r>
 800205e:	0001      	movs	r1, r0
 8002060:	e7f9      	b.n	8002056 <__sfputc_r+0x1e>

08002062 <__sfputs_r>:
 8002062:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002064:	0006      	movs	r6, r0
 8002066:	000f      	movs	r7, r1
 8002068:	0014      	movs	r4, r2
 800206a:	18d5      	adds	r5, r2, r3
 800206c:	42ac      	cmp	r4, r5
 800206e:	d101      	bne.n	8002074 <__sfputs_r+0x12>
 8002070:	2000      	movs	r0, #0
 8002072:	e007      	b.n	8002084 <__sfputs_r+0x22>
 8002074:	7821      	ldrb	r1, [r4, #0]
 8002076:	003a      	movs	r2, r7
 8002078:	0030      	movs	r0, r6
 800207a:	f7ff ffdd 	bl	8002038 <__sfputc_r>
 800207e:	3401      	adds	r4, #1
 8002080:	1c43      	adds	r3, r0, #1
 8002082:	d1f3      	bne.n	800206c <__sfputs_r+0xa>
 8002084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002088 <_vfiprintf_r>:
 8002088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800208a:	b0a1      	sub	sp, #132	; 0x84
 800208c:	0006      	movs	r6, r0
 800208e:	000c      	movs	r4, r1
 8002090:	001f      	movs	r7, r3
 8002092:	9203      	str	r2, [sp, #12]
 8002094:	2800      	cmp	r0, #0
 8002096:	d004      	beq.n	80020a2 <_vfiprintf_r+0x1a>
 8002098:	6983      	ldr	r3, [r0, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d101      	bne.n	80020a2 <_vfiprintf_r+0x1a>
 800209e:	f000 fcc5 	bl	8002a2c <__sinit>
 80020a2:	4b8e      	ldr	r3, [pc, #568]	; (80022dc <_vfiprintf_r+0x254>)
 80020a4:	429c      	cmp	r4, r3
 80020a6:	d11c      	bne.n	80020e2 <_vfiprintf_r+0x5a>
 80020a8:	6874      	ldr	r4, [r6, #4]
 80020aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020ac:	07db      	lsls	r3, r3, #31
 80020ae:	d405      	bmi.n	80020bc <_vfiprintf_r+0x34>
 80020b0:	89a3      	ldrh	r3, [r4, #12]
 80020b2:	059b      	lsls	r3, r3, #22
 80020b4:	d402      	bmi.n	80020bc <_vfiprintf_r+0x34>
 80020b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020b8:	f000 fd59 	bl	8002b6e <__retarget_lock_acquire_recursive>
 80020bc:	89a3      	ldrh	r3, [r4, #12]
 80020be:	071b      	lsls	r3, r3, #28
 80020c0:	d502      	bpl.n	80020c8 <_vfiprintf_r+0x40>
 80020c2:	6923      	ldr	r3, [r4, #16]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d11d      	bne.n	8002104 <_vfiprintf_r+0x7c>
 80020c8:	0021      	movs	r1, r4
 80020ca:	0030      	movs	r0, r6
 80020cc:	f000 fb00 	bl	80026d0 <__swsetup_r>
 80020d0:	2800      	cmp	r0, #0
 80020d2:	d017      	beq.n	8002104 <_vfiprintf_r+0x7c>
 80020d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80020d6:	07db      	lsls	r3, r3, #31
 80020d8:	d50d      	bpl.n	80020f6 <_vfiprintf_r+0x6e>
 80020da:	2001      	movs	r0, #1
 80020dc:	4240      	negs	r0, r0
 80020de:	b021      	add	sp, #132	; 0x84
 80020e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020e2:	4b7f      	ldr	r3, [pc, #508]	; (80022e0 <_vfiprintf_r+0x258>)
 80020e4:	429c      	cmp	r4, r3
 80020e6:	d101      	bne.n	80020ec <_vfiprintf_r+0x64>
 80020e8:	68b4      	ldr	r4, [r6, #8]
 80020ea:	e7de      	b.n	80020aa <_vfiprintf_r+0x22>
 80020ec:	4b7d      	ldr	r3, [pc, #500]	; (80022e4 <_vfiprintf_r+0x25c>)
 80020ee:	429c      	cmp	r4, r3
 80020f0:	d1db      	bne.n	80020aa <_vfiprintf_r+0x22>
 80020f2:	68f4      	ldr	r4, [r6, #12]
 80020f4:	e7d9      	b.n	80020aa <_vfiprintf_r+0x22>
 80020f6:	89a3      	ldrh	r3, [r4, #12]
 80020f8:	059b      	lsls	r3, r3, #22
 80020fa:	d4ee      	bmi.n	80020da <_vfiprintf_r+0x52>
 80020fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80020fe:	f000 fd37 	bl	8002b70 <__retarget_lock_release_recursive>
 8002102:	e7ea      	b.n	80020da <_vfiprintf_r+0x52>
 8002104:	2300      	movs	r3, #0
 8002106:	ad08      	add	r5, sp, #32
 8002108:	616b      	str	r3, [r5, #20]
 800210a:	3320      	adds	r3, #32
 800210c:	766b      	strb	r3, [r5, #25]
 800210e:	3310      	adds	r3, #16
 8002110:	76ab      	strb	r3, [r5, #26]
 8002112:	9707      	str	r7, [sp, #28]
 8002114:	9f03      	ldr	r7, [sp, #12]
 8002116:	783b      	ldrb	r3, [r7, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <_vfiprintf_r+0x98>
 800211c:	2b25      	cmp	r3, #37	; 0x25
 800211e:	d14e      	bne.n	80021be <_vfiprintf_r+0x136>
 8002120:	9b03      	ldr	r3, [sp, #12]
 8002122:	1afb      	subs	r3, r7, r3
 8002124:	9305      	str	r3, [sp, #20]
 8002126:	9b03      	ldr	r3, [sp, #12]
 8002128:	429f      	cmp	r7, r3
 800212a:	d00d      	beq.n	8002148 <_vfiprintf_r+0xc0>
 800212c:	9b05      	ldr	r3, [sp, #20]
 800212e:	0021      	movs	r1, r4
 8002130:	0030      	movs	r0, r6
 8002132:	9a03      	ldr	r2, [sp, #12]
 8002134:	f7ff ff95 	bl	8002062 <__sfputs_r>
 8002138:	1c43      	adds	r3, r0, #1
 800213a:	d100      	bne.n	800213e <_vfiprintf_r+0xb6>
 800213c:	e0b5      	b.n	80022aa <_vfiprintf_r+0x222>
 800213e:	696a      	ldr	r2, [r5, #20]
 8002140:	9b05      	ldr	r3, [sp, #20]
 8002142:	4694      	mov	ip, r2
 8002144:	4463      	add	r3, ip
 8002146:	616b      	str	r3, [r5, #20]
 8002148:	783b      	ldrb	r3, [r7, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d100      	bne.n	8002150 <_vfiprintf_r+0xc8>
 800214e:	e0ac      	b.n	80022aa <_vfiprintf_r+0x222>
 8002150:	2201      	movs	r2, #1
 8002152:	1c7b      	adds	r3, r7, #1
 8002154:	9303      	str	r3, [sp, #12]
 8002156:	2300      	movs	r3, #0
 8002158:	4252      	negs	r2, r2
 800215a:	606a      	str	r2, [r5, #4]
 800215c:	a904      	add	r1, sp, #16
 800215e:	3254      	adds	r2, #84	; 0x54
 8002160:	1852      	adds	r2, r2, r1
 8002162:	602b      	str	r3, [r5, #0]
 8002164:	60eb      	str	r3, [r5, #12]
 8002166:	60ab      	str	r3, [r5, #8]
 8002168:	7013      	strb	r3, [r2, #0]
 800216a:	65ab      	str	r3, [r5, #88]	; 0x58
 800216c:	9b03      	ldr	r3, [sp, #12]
 800216e:	2205      	movs	r2, #5
 8002170:	7819      	ldrb	r1, [r3, #0]
 8002172:	485d      	ldr	r0, [pc, #372]	; (80022e8 <_vfiprintf_r+0x260>)
 8002174:	f000 fd6a 	bl	8002c4c <memchr>
 8002178:	9b03      	ldr	r3, [sp, #12]
 800217a:	1c5f      	adds	r7, r3, #1
 800217c:	2800      	cmp	r0, #0
 800217e:	d120      	bne.n	80021c2 <_vfiprintf_r+0x13a>
 8002180:	682a      	ldr	r2, [r5, #0]
 8002182:	06d3      	lsls	r3, r2, #27
 8002184:	d504      	bpl.n	8002190 <_vfiprintf_r+0x108>
 8002186:	2353      	movs	r3, #83	; 0x53
 8002188:	a904      	add	r1, sp, #16
 800218a:	185b      	adds	r3, r3, r1
 800218c:	2120      	movs	r1, #32
 800218e:	7019      	strb	r1, [r3, #0]
 8002190:	0713      	lsls	r3, r2, #28
 8002192:	d504      	bpl.n	800219e <_vfiprintf_r+0x116>
 8002194:	2353      	movs	r3, #83	; 0x53
 8002196:	a904      	add	r1, sp, #16
 8002198:	185b      	adds	r3, r3, r1
 800219a:	212b      	movs	r1, #43	; 0x2b
 800219c:	7019      	strb	r1, [r3, #0]
 800219e:	9b03      	ldr	r3, [sp, #12]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b2a      	cmp	r3, #42	; 0x2a
 80021a4:	d016      	beq.n	80021d4 <_vfiprintf_r+0x14c>
 80021a6:	2100      	movs	r1, #0
 80021a8:	68eb      	ldr	r3, [r5, #12]
 80021aa:	9f03      	ldr	r7, [sp, #12]
 80021ac:	783a      	ldrb	r2, [r7, #0]
 80021ae:	1c78      	adds	r0, r7, #1
 80021b0:	3a30      	subs	r2, #48	; 0x30
 80021b2:	4684      	mov	ip, r0
 80021b4:	2a09      	cmp	r2, #9
 80021b6:	d94f      	bls.n	8002258 <_vfiprintf_r+0x1d0>
 80021b8:	2900      	cmp	r1, #0
 80021ba:	d111      	bne.n	80021e0 <_vfiprintf_r+0x158>
 80021bc:	e017      	b.n	80021ee <_vfiprintf_r+0x166>
 80021be:	3701      	adds	r7, #1
 80021c0:	e7a9      	b.n	8002116 <_vfiprintf_r+0x8e>
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <_vfiprintf_r+0x260>)
 80021c4:	682a      	ldr	r2, [r5, #0]
 80021c6:	1ac0      	subs	r0, r0, r3
 80021c8:	2301      	movs	r3, #1
 80021ca:	4083      	lsls	r3, r0
 80021cc:	4313      	orrs	r3, r2
 80021ce:	602b      	str	r3, [r5, #0]
 80021d0:	9703      	str	r7, [sp, #12]
 80021d2:	e7cb      	b.n	800216c <_vfiprintf_r+0xe4>
 80021d4:	9b07      	ldr	r3, [sp, #28]
 80021d6:	1d19      	adds	r1, r3, #4
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	9107      	str	r1, [sp, #28]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db01      	blt.n	80021e4 <_vfiprintf_r+0x15c>
 80021e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80021e2:	e004      	b.n	80021ee <_vfiprintf_r+0x166>
 80021e4:	425b      	negs	r3, r3
 80021e6:	60eb      	str	r3, [r5, #12]
 80021e8:	2302      	movs	r3, #2
 80021ea:	4313      	orrs	r3, r2
 80021ec:	602b      	str	r3, [r5, #0]
 80021ee:	783b      	ldrb	r3, [r7, #0]
 80021f0:	2b2e      	cmp	r3, #46	; 0x2e
 80021f2:	d10a      	bne.n	800220a <_vfiprintf_r+0x182>
 80021f4:	787b      	ldrb	r3, [r7, #1]
 80021f6:	2b2a      	cmp	r3, #42	; 0x2a
 80021f8:	d137      	bne.n	800226a <_vfiprintf_r+0x1e2>
 80021fa:	9b07      	ldr	r3, [sp, #28]
 80021fc:	3702      	adds	r7, #2
 80021fe:	1d1a      	adds	r2, r3, #4
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	9207      	str	r2, [sp, #28]
 8002204:	2b00      	cmp	r3, #0
 8002206:	db2d      	blt.n	8002264 <_vfiprintf_r+0x1dc>
 8002208:	9309      	str	r3, [sp, #36]	; 0x24
 800220a:	2203      	movs	r2, #3
 800220c:	7839      	ldrb	r1, [r7, #0]
 800220e:	4837      	ldr	r0, [pc, #220]	; (80022ec <_vfiprintf_r+0x264>)
 8002210:	f000 fd1c 	bl	8002c4c <memchr>
 8002214:	2800      	cmp	r0, #0
 8002216:	d007      	beq.n	8002228 <_vfiprintf_r+0x1a0>
 8002218:	4b34      	ldr	r3, [pc, #208]	; (80022ec <_vfiprintf_r+0x264>)
 800221a:	682a      	ldr	r2, [r5, #0]
 800221c:	1ac0      	subs	r0, r0, r3
 800221e:	2340      	movs	r3, #64	; 0x40
 8002220:	4083      	lsls	r3, r0
 8002222:	4313      	orrs	r3, r2
 8002224:	3701      	adds	r7, #1
 8002226:	602b      	str	r3, [r5, #0]
 8002228:	7839      	ldrb	r1, [r7, #0]
 800222a:	1c7b      	adds	r3, r7, #1
 800222c:	2206      	movs	r2, #6
 800222e:	4830      	ldr	r0, [pc, #192]	; (80022f0 <_vfiprintf_r+0x268>)
 8002230:	9303      	str	r3, [sp, #12]
 8002232:	7629      	strb	r1, [r5, #24]
 8002234:	f000 fd0a 	bl	8002c4c <memchr>
 8002238:	2800      	cmp	r0, #0
 800223a:	d045      	beq.n	80022c8 <_vfiprintf_r+0x240>
 800223c:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <_vfiprintf_r+0x26c>)
 800223e:	2b00      	cmp	r3, #0
 8002240:	d127      	bne.n	8002292 <_vfiprintf_r+0x20a>
 8002242:	2207      	movs	r2, #7
 8002244:	9b07      	ldr	r3, [sp, #28]
 8002246:	3307      	adds	r3, #7
 8002248:	4393      	bics	r3, r2
 800224a:	3308      	adds	r3, #8
 800224c:	9307      	str	r3, [sp, #28]
 800224e:	696b      	ldr	r3, [r5, #20]
 8002250:	9a04      	ldr	r2, [sp, #16]
 8002252:	189b      	adds	r3, r3, r2
 8002254:	616b      	str	r3, [r5, #20]
 8002256:	e75d      	b.n	8002114 <_vfiprintf_r+0x8c>
 8002258:	210a      	movs	r1, #10
 800225a:	434b      	muls	r3, r1
 800225c:	4667      	mov	r7, ip
 800225e:	189b      	adds	r3, r3, r2
 8002260:	3909      	subs	r1, #9
 8002262:	e7a3      	b.n	80021ac <_vfiprintf_r+0x124>
 8002264:	2301      	movs	r3, #1
 8002266:	425b      	negs	r3, r3
 8002268:	e7ce      	b.n	8002208 <_vfiprintf_r+0x180>
 800226a:	2300      	movs	r3, #0
 800226c:	001a      	movs	r2, r3
 800226e:	3701      	adds	r7, #1
 8002270:	606b      	str	r3, [r5, #4]
 8002272:	7839      	ldrb	r1, [r7, #0]
 8002274:	1c78      	adds	r0, r7, #1
 8002276:	3930      	subs	r1, #48	; 0x30
 8002278:	4684      	mov	ip, r0
 800227a:	2909      	cmp	r1, #9
 800227c:	d903      	bls.n	8002286 <_vfiprintf_r+0x1fe>
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0c3      	beq.n	800220a <_vfiprintf_r+0x182>
 8002282:	9209      	str	r2, [sp, #36]	; 0x24
 8002284:	e7c1      	b.n	800220a <_vfiprintf_r+0x182>
 8002286:	230a      	movs	r3, #10
 8002288:	435a      	muls	r2, r3
 800228a:	4667      	mov	r7, ip
 800228c:	1852      	adds	r2, r2, r1
 800228e:	3b09      	subs	r3, #9
 8002290:	e7ef      	b.n	8002272 <_vfiprintf_r+0x1ea>
 8002292:	ab07      	add	r3, sp, #28
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	0022      	movs	r2, r4
 8002298:	0029      	movs	r1, r5
 800229a:	0030      	movs	r0, r6
 800229c:	4b16      	ldr	r3, [pc, #88]	; (80022f8 <_vfiprintf_r+0x270>)
 800229e:	e000      	b.n	80022a2 <_vfiprintf_r+0x21a>
 80022a0:	bf00      	nop
 80022a2:	9004      	str	r0, [sp, #16]
 80022a4:	9b04      	ldr	r3, [sp, #16]
 80022a6:	3301      	adds	r3, #1
 80022a8:	d1d1      	bne.n	800224e <_vfiprintf_r+0x1c6>
 80022aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80022ac:	07db      	lsls	r3, r3, #31
 80022ae:	d405      	bmi.n	80022bc <_vfiprintf_r+0x234>
 80022b0:	89a3      	ldrh	r3, [r4, #12]
 80022b2:	059b      	lsls	r3, r3, #22
 80022b4:	d402      	bmi.n	80022bc <_vfiprintf_r+0x234>
 80022b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80022b8:	f000 fc5a 	bl	8002b70 <__retarget_lock_release_recursive>
 80022bc:	89a3      	ldrh	r3, [r4, #12]
 80022be:	065b      	lsls	r3, r3, #25
 80022c0:	d500      	bpl.n	80022c4 <_vfiprintf_r+0x23c>
 80022c2:	e70a      	b.n	80020da <_vfiprintf_r+0x52>
 80022c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80022c6:	e70a      	b.n	80020de <_vfiprintf_r+0x56>
 80022c8:	ab07      	add	r3, sp, #28
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	0022      	movs	r2, r4
 80022ce:	0029      	movs	r1, r5
 80022d0:	0030      	movs	r0, r6
 80022d2:	4b09      	ldr	r3, [pc, #36]	; (80022f8 <_vfiprintf_r+0x270>)
 80022d4:	f000 f882 	bl	80023dc <_printf_i>
 80022d8:	e7e3      	b.n	80022a2 <_vfiprintf_r+0x21a>
 80022da:	46c0      	nop			; (mov r8, r8)
 80022dc:	08002fec 	.word	0x08002fec
 80022e0:	0800300c 	.word	0x0800300c
 80022e4:	08002fcc 	.word	0x08002fcc
 80022e8:	08002f96 	.word	0x08002f96
 80022ec:	08002f9c 	.word	0x08002f9c
 80022f0:	08002fa0 	.word	0x08002fa0
 80022f4:	00000000 	.word	0x00000000
 80022f8:	08002063 	.word	0x08002063

080022fc <_printf_common>:
 80022fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022fe:	0015      	movs	r5, r2
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	688a      	ldr	r2, [r1, #8]
 8002304:	690b      	ldr	r3, [r1, #16]
 8002306:	000c      	movs	r4, r1
 8002308:	9000      	str	r0, [sp, #0]
 800230a:	4293      	cmp	r3, r2
 800230c:	da00      	bge.n	8002310 <_printf_common+0x14>
 800230e:	0013      	movs	r3, r2
 8002310:	0022      	movs	r2, r4
 8002312:	602b      	str	r3, [r5, #0]
 8002314:	3243      	adds	r2, #67	; 0x43
 8002316:	7812      	ldrb	r2, [r2, #0]
 8002318:	2a00      	cmp	r2, #0
 800231a:	d001      	beq.n	8002320 <_printf_common+0x24>
 800231c:	3301      	adds	r3, #1
 800231e:	602b      	str	r3, [r5, #0]
 8002320:	6823      	ldr	r3, [r4, #0]
 8002322:	069b      	lsls	r3, r3, #26
 8002324:	d502      	bpl.n	800232c <_printf_common+0x30>
 8002326:	682b      	ldr	r3, [r5, #0]
 8002328:	3302      	adds	r3, #2
 800232a:	602b      	str	r3, [r5, #0]
 800232c:	6822      	ldr	r2, [r4, #0]
 800232e:	2306      	movs	r3, #6
 8002330:	0017      	movs	r7, r2
 8002332:	401f      	ands	r7, r3
 8002334:	421a      	tst	r2, r3
 8002336:	d027      	beq.n	8002388 <_printf_common+0x8c>
 8002338:	0023      	movs	r3, r4
 800233a:	3343      	adds	r3, #67	; 0x43
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	1e5a      	subs	r2, r3, #1
 8002340:	4193      	sbcs	r3, r2
 8002342:	6822      	ldr	r2, [r4, #0]
 8002344:	0692      	lsls	r2, r2, #26
 8002346:	d430      	bmi.n	80023aa <_printf_common+0xae>
 8002348:	0022      	movs	r2, r4
 800234a:	9901      	ldr	r1, [sp, #4]
 800234c:	9800      	ldr	r0, [sp, #0]
 800234e:	9e08      	ldr	r6, [sp, #32]
 8002350:	3243      	adds	r2, #67	; 0x43
 8002352:	47b0      	blx	r6
 8002354:	1c43      	adds	r3, r0, #1
 8002356:	d025      	beq.n	80023a4 <_printf_common+0xa8>
 8002358:	2306      	movs	r3, #6
 800235a:	6820      	ldr	r0, [r4, #0]
 800235c:	682a      	ldr	r2, [r5, #0]
 800235e:	68e1      	ldr	r1, [r4, #12]
 8002360:	2500      	movs	r5, #0
 8002362:	4003      	ands	r3, r0
 8002364:	2b04      	cmp	r3, #4
 8002366:	d103      	bne.n	8002370 <_printf_common+0x74>
 8002368:	1a8d      	subs	r5, r1, r2
 800236a:	43eb      	mvns	r3, r5
 800236c:	17db      	asrs	r3, r3, #31
 800236e:	401d      	ands	r5, r3
 8002370:	68a3      	ldr	r3, [r4, #8]
 8002372:	6922      	ldr	r2, [r4, #16]
 8002374:	4293      	cmp	r3, r2
 8002376:	dd01      	ble.n	800237c <_printf_common+0x80>
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	18ed      	adds	r5, r5, r3
 800237c:	2700      	movs	r7, #0
 800237e:	42bd      	cmp	r5, r7
 8002380:	d120      	bne.n	80023c4 <_printf_common+0xc8>
 8002382:	2000      	movs	r0, #0
 8002384:	e010      	b.n	80023a8 <_printf_common+0xac>
 8002386:	3701      	adds	r7, #1
 8002388:	68e3      	ldr	r3, [r4, #12]
 800238a:	682a      	ldr	r2, [r5, #0]
 800238c:	1a9b      	subs	r3, r3, r2
 800238e:	42bb      	cmp	r3, r7
 8002390:	ddd2      	ble.n	8002338 <_printf_common+0x3c>
 8002392:	0022      	movs	r2, r4
 8002394:	2301      	movs	r3, #1
 8002396:	9901      	ldr	r1, [sp, #4]
 8002398:	9800      	ldr	r0, [sp, #0]
 800239a:	9e08      	ldr	r6, [sp, #32]
 800239c:	3219      	adds	r2, #25
 800239e:	47b0      	blx	r6
 80023a0:	1c43      	adds	r3, r0, #1
 80023a2:	d1f0      	bne.n	8002386 <_printf_common+0x8a>
 80023a4:	2001      	movs	r0, #1
 80023a6:	4240      	negs	r0, r0
 80023a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023aa:	2030      	movs	r0, #48	; 0x30
 80023ac:	18e1      	adds	r1, r4, r3
 80023ae:	3143      	adds	r1, #67	; 0x43
 80023b0:	7008      	strb	r0, [r1, #0]
 80023b2:	0021      	movs	r1, r4
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	3145      	adds	r1, #69	; 0x45
 80023b8:	7809      	ldrb	r1, [r1, #0]
 80023ba:	18a2      	adds	r2, r4, r2
 80023bc:	3243      	adds	r2, #67	; 0x43
 80023be:	3302      	adds	r3, #2
 80023c0:	7011      	strb	r1, [r2, #0]
 80023c2:	e7c1      	b.n	8002348 <_printf_common+0x4c>
 80023c4:	0022      	movs	r2, r4
 80023c6:	2301      	movs	r3, #1
 80023c8:	9901      	ldr	r1, [sp, #4]
 80023ca:	9800      	ldr	r0, [sp, #0]
 80023cc:	9e08      	ldr	r6, [sp, #32]
 80023ce:	321a      	adds	r2, #26
 80023d0:	47b0      	blx	r6
 80023d2:	1c43      	adds	r3, r0, #1
 80023d4:	d0e6      	beq.n	80023a4 <_printf_common+0xa8>
 80023d6:	3701      	adds	r7, #1
 80023d8:	e7d1      	b.n	800237e <_printf_common+0x82>
	...

080023dc <_printf_i>:
 80023dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023de:	b08b      	sub	sp, #44	; 0x2c
 80023e0:	9206      	str	r2, [sp, #24]
 80023e2:	000a      	movs	r2, r1
 80023e4:	3243      	adds	r2, #67	; 0x43
 80023e6:	9307      	str	r3, [sp, #28]
 80023e8:	9005      	str	r0, [sp, #20]
 80023ea:	9204      	str	r2, [sp, #16]
 80023ec:	7e0a      	ldrb	r2, [r1, #24]
 80023ee:	000c      	movs	r4, r1
 80023f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80023f2:	2a78      	cmp	r2, #120	; 0x78
 80023f4:	d806      	bhi.n	8002404 <_printf_i+0x28>
 80023f6:	2a62      	cmp	r2, #98	; 0x62
 80023f8:	d808      	bhi.n	800240c <_printf_i+0x30>
 80023fa:	2a00      	cmp	r2, #0
 80023fc:	d100      	bne.n	8002400 <_printf_i+0x24>
 80023fe:	e0c0      	b.n	8002582 <_printf_i+0x1a6>
 8002400:	2a58      	cmp	r2, #88	; 0x58
 8002402:	d052      	beq.n	80024aa <_printf_i+0xce>
 8002404:	0026      	movs	r6, r4
 8002406:	3642      	adds	r6, #66	; 0x42
 8002408:	7032      	strb	r2, [r6, #0]
 800240a:	e022      	b.n	8002452 <_printf_i+0x76>
 800240c:	0010      	movs	r0, r2
 800240e:	3863      	subs	r0, #99	; 0x63
 8002410:	2815      	cmp	r0, #21
 8002412:	d8f7      	bhi.n	8002404 <_printf_i+0x28>
 8002414:	f7fd fe78 	bl	8000108 <__gnu_thumb1_case_shi>
 8002418:	001f0016 	.word	0x001f0016
 800241c:	fff6fff6 	.word	0xfff6fff6
 8002420:	fff6fff6 	.word	0xfff6fff6
 8002424:	fff6001f 	.word	0xfff6001f
 8002428:	fff6fff6 	.word	0xfff6fff6
 800242c:	00a8fff6 	.word	0x00a8fff6
 8002430:	009a0036 	.word	0x009a0036
 8002434:	fff6fff6 	.word	0xfff6fff6
 8002438:	fff600b9 	.word	0xfff600b9
 800243c:	fff60036 	.word	0xfff60036
 8002440:	009efff6 	.word	0x009efff6
 8002444:	0026      	movs	r6, r4
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	3642      	adds	r6, #66	; 0x42
 800244a:	1d11      	adds	r1, r2, #4
 800244c:	6019      	str	r1, [r3, #0]
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	7033      	strb	r3, [r6, #0]
 8002452:	2301      	movs	r3, #1
 8002454:	e0a7      	b.n	80025a6 <_printf_i+0x1ca>
 8002456:	6808      	ldr	r0, [r1, #0]
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	1d0a      	adds	r2, r1, #4
 800245c:	0605      	lsls	r5, r0, #24
 800245e:	d50b      	bpl.n	8002478 <_printf_i+0x9c>
 8002460:	680d      	ldr	r5, [r1, #0]
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	2d00      	cmp	r5, #0
 8002466:	da03      	bge.n	8002470 <_printf_i+0x94>
 8002468:	232d      	movs	r3, #45	; 0x2d
 800246a:	9a04      	ldr	r2, [sp, #16]
 800246c:	426d      	negs	r5, r5
 800246e:	7013      	strb	r3, [r2, #0]
 8002470:	4b61      	ldr	r3, [pc, #388]	; (80025f8 <_printf_i+0x21c>)
 8002472:	270a      	movs	r7, #10
 8002474:	9303      	str	r3, [sp, #12]
 8002476:	e032      	b.n	80024de <_printf_i+0x102>
 8002478:	680d      	ldr	r5, [r1, #0]
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	0641      	lsls	r1, r0, #25
 800247e:	d5f1      	bpl.n	8002464 <_printf_i+0x88>
 8002480:	b22d      	sxth	r5, r5
 8002482:	e7ef      	b.n	8002464 <_printf_i+0x88>
 8002484:	680d      	ldr	r5, [r1, #0]
 8002486:	6819      	ldr	r1, [r3, #0]
 8002488:	1d08      	adds	r0, r1, #4
 800248a:	6018      	str	r0, [r3, #0]
 800248c:	062e      	lsls	r6, r5, #24
 800248e:	d501      	bpl.n	8002494 <_printf_i+0xb8>
 8002490:	680d      	ldr	r5, [r1, #0]
 8002492:	e003      	b.n	800249c <_printf_i+0xc0>
 8002494:	066d      	lsls	r5, r5, #25
 8002496:	d5fb      	bpl.n	8002490 <_printf_i+0xb4>
 8002498:	680d      	ldr	r5, [r1, #0]
 800249a:	b2ad      	uxth	r5, r5
 800249c:	4b56      	ldr	r3, [pc, #344]	; (80025f8 <_printf_i+0x21c>)
 800249e:	270a      	movs	r7, #10
 80024a0:	9303      	str	r3, [sp, #12]
 80024a2:	2a6f      	cmp	r2, #111	; 0x6f
 80024a4:	d117      	bne.n	80024d6 <_printf_i+0xfa>
 80024a6:	2708      	movs	r7, #8
 80024a8:	e015      	b.n	80024d6 <_printf_i+0xfa>
 80024aa:	3145      	adds	r1, #69	; 0x45
 80024ac:	700a      	strb	r2, [r1, #0]
 80024ae:	4a52      	ldr	r2, [pc, #328]	; (80025f8 <_printf_i+0x21c>)
 80024b0:	9203      	str	r2, [sp, #12]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	6821      	ldr	r1, [r4, #0]
 80024b6:	ca20      	ldmia	r2!, {r5}
 80024b8:	601a      	str	r2, [r3, #0]
 80024ba:	0608      	lsls	r0, r1, #24
 80024bc:	d550      	bpl.n	8002560 <_printf_i+0x184>
 80024be:	07cb      	lsls	r3, r1, #31
 80024c0:	d502      	bpl.n	80024c8 <_printf_i+0xec>
 80024c2:	2320      	movs	r3, #32
 80024c4:	4319      	orrs	r1, r3
 80024c6:	6021      	str	r1, [r4, #0]
 80024c8:	2710      	movs	r7, #16
 80024ca:	2d00      	cmp	r5, #0
 80024cc:	d103      	bne.n	80024d6 <_printf_i+0xfa>
 80024ce:	2320      	movs	r3, #32
 80024d0:	6822      	ldr	r2, [r4, #0]
 80024d2:	439a      	bics	r2, r3
 80024d4:	6022      	str	r2, [r4, #0]
 80024d6:	0023      	movs	r3, r4
 80024d8:	2200      	movs	r2, #0
 80024da:	3343      	adds	r3, #67	; 0x43
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	6863      	ldr	r3, [r4, #4]
 80024e0:	60a3      	str	r3, [r4, #8]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	db03      	blt.n	80024ee <_printf_i+0x112>
 80024e6:	2204      	movs	r2, #4
 80024e8:	6821      	ldr	r1, [r4, #0]
 80024ea:	4391      	bics	r1, r2
 80024ec:	6021      	str	r1, [r4, #0]
 80024ee:	2d00      	cmp	r5, #0
 80024f0:	d102      	bne.n	80024f8 <_printf_i+0x11c>
 80024f2:	9e04      	ldr	r6, [sp, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00c      	beq.n	8002512 <_printf_i+0x136>
 80024f8:	9e04      	ldr	r6, [sp, #16]
 80024fa:	0028      	movs	r0, r5
 80024fc:	0039      	movs	r1, r7
 80024fe:	f7fd fe93 	bl	8000228 <__aeabi_uidivmod>
 8002502:	9b03      	ldr	r3, [sp, #12]
 8002504:	3e01      	subs	r6, #1
 8002506:	5c5b      	ldrb	r3, [r3, r1]
 8002508:	7033      	strb	r3, [r6, #0]
 800250a:	002b      	movs	r3, r5
 800250c:	0005      	movs	r5, r0
 800250e:	429f      	cmp	r7, r3
 8002510:	d9f3      	bls.n	80024fa <_printf_i+0x11e>
 8002512:	2f08      	cmp	r7, #8
 8002514:	d109      	bne.n	800252a <_printf_i+0x14e>
 8002516:	6823      	ldr	r3, [r4, #0]
 8002518:	07db      	lsls	r3, r3, #31
 800251a:	d506      	bpl.n	800252a <_printf_i+0x14e>
 800251c:	6863      	ldr	r3, [r4, #4]
 800251e:	6922      	ldr	r2, [r4, #16]
 8002520:	4293      	cmp	r3, r2
 8002522:	dc02      	bgt.n	800252a <_printf_i+0x14e>
 8002524:	2330      	movs	r3, #48	; 0x30
 8002526:	3e01      	subs	r6, #1
 8002528:	7033      	strb	r3, [r6, #0]
 800252a:	9b04      	ldr	r3, [sp, #16]
 800252c:	1b9b      	subs	r3, r3, r6
 800252e:	6123      	str	r3, [r4, #16]
 8002530:	9b07      	ldr	r3, [sp, #28]
 8002532:	0021      	movs	r1, r4
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	9805      	ldr	r0, [sp, #20]
 8002538:	9b06      	ldr	r3, [sp, #24]
 800253a:	aa09      	add	r2, sp, #36	; 0x24
 800253c:	f7ff fede 	bl	80022fc <_printf_common>
 8002540:	1c43      	adds	r3, r0, #1
 8002542:	d135      	bne.n	80025b0 <_printf_i+0x1d4>
 8002544:	2001      	movs	r0, #1
 8002546:	4240      	negs	r0, r0
 8002548:	b00b      	add	sp, #44	; 0x2c
 800254a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800254c:	2220      	movs	r2, #32
 800254e:	6809      	ldr	r1, [r1, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	6022      	str	r2, [r4, #0]
 8002554:	0022      	movs	r2, r4
 8002556:	2178      	movs	r1, #120	; 0x78
 8002558:	3245      	adds	r2, #69	; 0x45
 800255a:	7011      	strb	r1, [r2, #0]
 800255c:	4a27      	ldr	r2, [pc, #156]	; (80025fc <_printf_i+0x220>)
 800255e:	e7a7      	b.n	80024b0 <_printf_i+0xd4>
 8002560:	0648      	lsls	r0, r1, #25
 8002562:	d5ac      	bpl.n	80024be <_printf_i+0xe2>
 8002564:	b2ad      	uxth	r5, r5
 8002566:	e7aa      	b.n	80024be <_printf_i+0xe2>
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	680d      	ldr	r5, [r1, #0]
 800256c:	1d10      	adds	r0, r2, #4
 800256e:	6949      	ldr	r1, [r1, #20]
 8002570:	6018      	str	r0, [r3, #0]
 8002572:	6813      	ldr	r3, [r2, #0]
 8002574:	062e      	lsls	r6, r5, #24
 8002576:	d501      	bpl.n	800257c <_printf_i+0x1a0>
 8002578:	6019      	str	r1, [r3, #0]
 800257a:	e002      	b.n	8002582 <_printf_i+0x1a6>
 800257c:	066d      	lsls	r5, r5, #25
 800257e:	d5fb      	bpl.n	8002578 <_printf_i+0x19c>
 8002580:	8019      	strh	r1, [r3, #0]
 8002582:	2300      	movs	r3, #0
 8002584:	9e04      	ldr	r6, [sp, #16]
 8002586:	6123      	str	r3, [r4, #16]
 8002588:	e7d2      	b.n	8002530 <_printf_i+0x154>
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	1d11      	adds	r1, r2, #4
 800258e:	6019      	str	r1, [r3, #0]
 8002590:	6816      	ldr	r6, [r2, #0]
 8002592:	2100      	movs	r1, #0
 8002594:	0030      	movs	r0, r6
 8002596:	6862      	ldr	r2, [r4, #4]
 8002598:	f000 fb58 	bl	8002c4c <memchr>
 800259c:	2800      	cmp	r0, #0
 800259e:	d001      	beq.n	80025a4 <_printf_i+0x1c8>
 80025a0:	1b80      	subs	r0, r0, r6
 80025a2:	6060      	str	r0, [r4, #4]
 80025a4:	6863      	ldr	r3, [r4, #4]
 80025a6:	6123      	str	r3, [r4, #16]
 80025a8:	2300      	movs	r3, #0
 80025aa:	9a04      	ldr	r2, [sp, #16]
 80025ac:	7013      	strb	r3, [r2, #0]
 80025ae:	e7bf      	b.n	8002530 <_printf_i+0x154>
 80025b0:	6923      	ldr	r3, [r4, #16]
 80025b2:	0032      	movs	r2, r6
 80025b4:	9906      	ldr	r1, [sp, #24]
 80025b6:	9805      	ldr	r0, [sp, #20]
 80025b8:	9d07      	ldr	r5, [sp, #28]
 80025ba:	47a8      	blx	r5
 80025bc:	1c43      	adds	r3, r0, #1
 80025be:	d0c1      	beq.n	8002544 <_printf_i+0x168>
 80025c0:	6823      	ldr	r3, [r4, #0]
 80025c2:	079b      	lsls	r3, r3, #30
 80025c4:	d415      	bmi.n	80025f2 <_printf_i+0x216>
 80025c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80025c8:	68e0      	ldr	r0, [r4, #12]
 80025ca:	4298      	cmp	r0, r3
 80025cc:	dabc      	bge.n	8002548 <_printf_i+0x16c>
 80025ce:	0018      	movs	r0, r3
 80025d0:	e7ba      	b.n	8002548 <_printf_i+0x16c>
 80025d2:	0022      	movs	r2, r4
 80025d4:	2301      	movs	r3, #1
 80025d6:	9906      	ldr	r1, [sp, #24]
 80025d8:	9805      	ldr	r0, [sp, #20]
 80025da:	9e07      	ldr	r6, [sp, #28]
 80025dc:	3219      	adds	r2, #25
 80025de:	47b0      	blx	r6
 80025e0:	1c43      	adds	r3, r0, #1
 80025e2:	d0af      	beq.n	8002544 <_printf_i+0x168>
 80025e4:	3501      	adds	r5, #1
 80025e6:	68e3      	ldr	r3, [r4, #12]
 80025e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025ea:	1a9b      	subs	r3, r3, r2
 80025ec:	42ab      	cmp	r3, r5
 80025ee:	dcf0      	bgt.n	80025d2 <_printf_i+0x1f6>
 80025f0:	e7e9      	b.n	80025c6 <_printf_i+0x1ea>
 80025f2:	2500      	movs	r5, #0
 80025f4:	e7f7      	b.n	80025e6 <_printf_i+0x20a>
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	08002fa7 	.word	0x08002fa7
 80025fc:	08002fb8 	.word	0x08002fb8

08002600 <_sbrk_r>:
 8002600:	2300      	movs	r3, #0
 8002602:	b570      	push	{r4, r5, r6, lr}
 8002604:	4d06      	ldr	r5, [pc, #24]	; (8002620 <_sbrk_r+0x20>)
 8002606:	0004      	movs	r4, r0
 8002608:	0008      	movs	r0, r1
 800260a:	602b      	str	r3, [r5, #0]
 800260c:	f7ff fb54 	bl	8001cb8 <_sbrk>
 8002610:	1c43      	adds	r3, r0, #1
 8002612:	d103      	bne.n	800261c <_sbrk_r+0x1c>
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d000      	beq.n	800261c <_sbrk_r+0x1c>
 800261a:	6023      	str	r3, [r4, #0]
 800261c:	bd70      	pop	{r4, r5, r6, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	20000130 	.word	0x20000130

08002624 <__swbuf_r>:
 8002624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002626:	0005      	movs	r5, r0
 8002628:	000e      	movs	r6, r1
 800262a:	0014      	movs	r4, r2
 800262c:	2800      	cmp	r0, #0
 800262e:	d004      	beq.n	800263a <__swbuf_r+0x16>
 8002630:	6983      	ldr	r3, [r0, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <__swbuf_r+0x16>
 8002636:	f000 f9f9 	bl	8002a2c <__sinit>
 800263a:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <__swbuf_r+0xa0>)
 800263c:	429c      	cmp	r4, r3
 800263e:	d12e      	bne.n	800269e <__swbuf_r+0x7a>
 8002640:	686c      	ldr	r4, [r5, #4]
 8002642:	69a3      	ldr	r3, [r4, #24]
 8002644:	60a3      	str	r3, [r4, #8]
 8002646:	89a3      	ldrh	r3, [r4, #12]
 8002648:	071b      	lsls	r3, r3, #28
 800264a:	d532      	bpl.n	80026b2 <__swbuf_r+0x8e>
 800264c:	6923      	ldr	r3, [r4, #16]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d02f      	beq.n	80026b2 <__swbuf_r+0x8e>
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	6922      	ldr	r2, [r4, #16]
 8002656:	b2f7      	uxtb	r7, r6
 8002658:	1a98      	subs	r0, r3, r2
 800265a:	6963      	ldr	r3, [r4, #20]
 800265c:	b2f6      	uxtb	r6, r6
 800265e:	4283      	cmp	r3, r0
 8002660:	dc05      	bgt.n	800266e <__swbuf_r+0x4a>
 8002662:	0021      	movs	r1, r4
 8002664:	0028      	movs	r0, r5
 8002666:	f000 f93f 	bl	80028e8 <_fflush_r>
 800266a:	2800      	cmp	r0, #0
 800266c:	d127      	bne.n	80026be <__swbuf_r+0x9a>
 800266e:	68a3      	ldr	r3, [r4, #8]
 8002670:	3001      	adds	r0, #1
 8002672:	3b01      	subs	r3, #1
 8002674:	60a3      	str	r3, [r4, #8]
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	1c5a      	adds	r2, r3, #1
 800267a:	6022      	str	r2, [r4, #0]
 800267c:	701f      	strb	r7, [r3, #0]
 800267e:	6963      	ldr	r3, [r4, #20]
 8002680:	4283      	cmp	r3, r0
 8002682:	d004      	beq.n	800268e <__swbuf_r+0x6a>
 8002684:	89a3      	ldrh	r3, [r4, #12]
 8002686:	07db      	lsls	r3, r3, #31
 8002688:	d507      	bpl.n	800269a <__swbuf_r+0x76>
 800268a:	2e0a      	cmp	r6, #10
 800268c:	d105      	bne.n	800269a <__swbuf_r+0x76>
 800268e:	0021      	movs	r1, r4
 8002690:	0028      	movs	r0, r5
 8002692:	f000 f929 	bl	80028e8 <_fflush_r>
 8002696:	2800      	cmp	r0, #0
 8002698:	d111      	bne.n	80026be <__swbuf_r+0x9a>
 800269a:	0030      	movs	r0, r6
 800269c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <__swbuf_r+0xa4>)
 80026a0:	429c      	cmp	r4, r3
 80026a2:	d101      	bne.n	80026a8 <__swbuf_r+0x84>
 80026a4:	68ac      	ldr	r4, [r5, #8]
 80026a6:	e7cc      	b.n	8002642 <__swbuf_r+0x1e>
 80026a8:	4b08      	ldr	r3, [pc, #32]	; (80026cc <__swbuf_r+0xa8>)
 80026aa:	429c      	cmp	r4, r3
 80026ac:	d1c9      	bne.n	8002642 <__swbuf_r+0x1e>
 80026ae:	68ec      	ldr	r4, [r5, #12]
 80026b0:	e7c7      	b.n	8002642 <__swbuf_r+0x1e>
 80026b2:	0021      	movs	r1, r4
 80026b4:	0028      	movs	r0, r5
 80026b6:	f000 f80b 	bl	80026d0 <__swsetup_r>
 80026ba:	2800      	cmp	r0, #0
 80026bc:	d0c9      	beq.n	8002652 <__swbuf_r+0x2e>
 80026be:	2601      	movs	r6, #1
 80026c0:	4276      	negs	r6, r6
 80026c2:	e7ea      	b.n	800269a <__swbuf_r+0x76>
 80026c4:	08002fec 	.word	0x08002fec
 80026c8:	0800300c 	.word	0x0800300c
 80026cc:	08002fcc 	.word	0x08002fcc

080026d0 <__swsetup_r>:
 80026d0:	4b37      	ldr	r3, [pc, #220]	; (80027b0 <__swsetup_r+0xe0>)
 80026d2:	b570      	push	{r4, r5, r6, lr}
 80026d4:	681d      	ldr	r5, [r3, #0]
 80026d6:	0006      	movs	r6, r0
 80026d8:	000c      	movs	r4, r1
 80026da:	2d00      	cmp	r5, #0
 80026dc:	d005      	beq.n	80026ea <__swsetup_r+0x1a>
 80026de:	69ab      	ldr	r3, [r5, #24]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <__swsetup_r+0x1a>
 80026e4:	0028      	movs	r0, r5
 80026e6:	f000 f9a1 	bl	8002a2c <__sinit>
 80026ea:	4b32      	ldr	r3, [pc, #200]	; (80027b4 <__swsetup_r+0xe4>)
 80026ec:	429c      	cmp	r4, r3
 80026ee:	d10f      	bne.n	8002710 <__swsetup_r+0x40>
 80026f0:	686c      	ldr	r4, [r5, #4]
 80026f2:	230c      	movs	r3, #12
 80026f4:	5ee2      	ldrsh	r2, [r4, r3]
 80026f6:	b293      	uxth	r3, r2
 80026f8:	0711      	lsls	r1, r2, #28
 80026fa:	d42d      	bmi.n	8002758 <__swsetup_r+0x88>
 80026fc:	06d9      	lsls	r1, r3, #27
 80026fe:	d411      	bmi.n	8002724 <__swsetup_r+0x54>
 8002700:	2309      	movs	r3, #9
 8002702:	2001      	movs	r0, #1
 8002704:	6033      	str	r3, [r6, #0]
 8002706:	3337      	adds	r3, #55	; 0x37
 8002708:	4313      	orrs	r3, r2
 800270a:	81a3      	strh	r3, [r4, #12]
 800270c:	4240      	negs	r0, r0
 800270e:	bd70      	pop	{r4, r5, r6, pc}
 8002710:	4b29      	ldr	r3, [pc, #164]	; (80027b8 <__swsetup_r+0xe8>)
 8002712:	429c      	cmp	r4, r3
 8002714:	d101      	bne.n	800271a <__swsetup_r+0x4a>
 8002716:	68ac      	ldr	r4, [r5, #8]
 8002718:	e7eb      	b.n	80026f2 <__swsetup_r+0x22>
 800271a:	4b28      	ldr	r3, [pc, #160]	; (80027bc <__swsetup_r+0xec>)
 800271c:	429c      	cmp	r4, r3
 800271e:	d1e8      	bne.n	80026f2 <__swsetup_r+0x22>
 8002720:	68ec      	ldr	r4, [r5, #12]
 8002722:	e7e6      	b.n	80026f2 <__swsetup_r+0x22>
 8002724:	075b      	lsls	r3, r3, #29
 8002726:	d513      	bpl.n	8002750 <__swsetup_r+0x80>
 8002728:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800272a:	2900      	cmp	r1, #0
 800272c:	d008      	beq.n	8002740 <__swsetup_r+0x70>
 800272e:	0023      	movs	r3, r4
 8002730:	3344      	adds	r3, #68	; 0x44
 8002732:	4299      	cmp	r1, r3
 8002734:	d002      	beq.n	800273c <__swsetup_r+0x6c>
 8002736:	0030      	movs	r0, r6
 8002738:	f7ff fbd6 	bl	8001ee8 <_free_r>
 800273c:	2300      	movs	r3, #0
 800273e:	6363      	str	r3, [r4, #52]	; 0x34
 8002740:	2224      	movs	r2, #36	; 0x24
 8002742:	89a3      	ldrh	r3, [r4, #12]
 8002744:	4393      	bics	r3, r2
 8002746:	81a3      	strh	r3, [r4, #12]
 8002748:	2300      	movs	r3, #0
 800274a:	6063      	str	r3, [r4, #4]
 800274c:	6923      	ldr	r3, [r4, #16]
 800274e:	6023      	str	r3, [r4, #0]
 8002750:	2308      	movs	r3, #8
 8002752:	89a2      	ldrh	r2, [r4, #12]
 8002754:	4313      	orrs	r3, r2
 8002756:	81a3      	strh	r3, [r4, #12]
 8002758:	6923      	ldr	r3, [r4, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10b      	bne.n	8002776 <__swsetup_r+0xa6>
 800275e:	21a0      	movs	r1, #160	; 0xa0
 8002760:	2280      	movs	r2, #128	; 0x80
 8002762:	89a3      	ldrh	r3, [r4, #12]
 8002764:	0089      	lsls	r1, r1, #2
 8002766:	0092      	lsls	r2, r2, #2
 8002768:	400b      	ands	r3, r1
 800276a:	4293      	cmp	r3, r2
 800276c:	d003      	beq.n	8002776 <__swsetup_r+0xa6>
 800276e:	0021      	movs	r1, r4
 8002770:	0030      	movs	r0, r6
 8002772:	f000 fa27 	bl	8002bc4 <__smakebuf_r>
 8002776:	220c      	movs	r2, #12
 8002778:	5ea3      	ldrsh	r3, [r4, r2]
 800277a:	2001      	movs	r0, #1
 800277c:	001a      	movs	r2, r3
 800277e:	b299      	uxth	r1, r3
 8002780:	4002      	ands	r2, r0
 8002782:	4203      	tst	r3, r0
 8002784:	d00f      	beq.n	80027a6 <__swsetup_r+0xd6>
 8002786:	2200      	movs	r2, #0
 8002788:	60a2      	str	r2, [r4, #8]
 800278a:	6962      	ldr	r2, [r4, #20]
 800278c:	4252      	negs	r2, r2
 800278e:	61a2      	str	r2, [r4, #24]
 8002790:	2000      	movs	r0, #0
 8002792:	6922      	ldr	r2, [r4, #16]
 8002794:	4282      	cmp	r2, r0
 8002796:	d1ba      	bne.n	800270e <__swsetup_r+0x3e>
 8002798:	060a      	lsls	r2, r1, #24
 800279a:	d5b8      	bpl.n	800270e <__swsetup_r+0x3e>
 800279c:	2240      	movs	r2, #64	; 0x40
 800279e:	4313      	orrs	r3, r2
 80027a0:	81a3      	strh	r3, [r4, #12]
 80027a2:	3801      	subs	r0, #1
 80027a4:	e7b3      	b.n	800270e <__swsetup_r+0x3e>
 80027a6:	0788      	lsls	r0, r1, #30
 80027a8:	d400      	bmi.n	80027ac <__swsetup_r+0xdc>
 80027aa:	6962      	ldr	r2, [r4, #20]
 80027ac:	60a2      	str	r2, [r4, #8]
 80027ae:	e7ef      	b.n	8002790 <__swsetup_r+0xc0>
 80027b0:	20000004 	.word	0x20000004
 80027b4:	08002fec 	.word	0x08002fec
 80027b8:	0800300c 	.word	0x0800300c
 80027bc:	08002fcc 	.word	0x08002fcc

080027c0 <abort>:
 80027c0:	2006      	movs	r0, #6
 80027c2:	b510      	push	{r4, lr}
 80027c4:	f000 fa88 	bl	8002cd8 <raise>
 80027c8:	2001      	movs	r0, #1
 80027ca:	f7ff fa03 	bl	8001bd4 <_exit>
	...

080027d0 <__sflush_r>:
 80027d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80027d2:	898b      	ldrh	r3, [r1, #12]
 80027d4:	0005      	movs	r5, r0
 80027d6:	000c      	movs	r4, r1
 80027d8:	071a      	lsls	r2, r3, #28
 80027da:	d45f      	bmi.n	800289c <__sflush_r+0xcc>
 80027dc:	684a      	ldr	r2, [r1, #4]
 80027de:	2a00      	cmp	r2, #0
 80027e0:	dc04      	bgt.n	80027ec <__sflush_r+0x1c>
 80027e2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80027e4:	2a00      	cmp	r2, #0
 80027e6:	dc01      	bgt.n	80027ec <__sflush_r+0x1c>
 80027e8:	2000      	movs	r0, #0
 80027ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027ec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80027ee:	2f00      	cmp	r7, #0
 80027f0:	d0fa      	beq.n	80027e8 <__sflush_r+0x18>
 80027f2:	2200      	movs	r2, #0
 80027f4:	2180      	movs	r1, #128	; 0x80
 80027f6:	682e      	ldr	r6, [r5, #0]
 80027f8:	602a      	str	r2, [r5, #0]
 80027fa:	001a      	movs	r2, r3
 80027fc:	0149      	lsls	r1, r1, #5
 80027fe:	400a      	ands	r2, r1
 8002800:	420b      	tst	r3, r1
 8002802:	d034      	beq.n	800286e <__sflush_r+0x9e>
 8002804:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002806:	89a3      	ldrh	r3, [r4, #12]
 8002808:	075b      	lsls	r3, r3, #29
 800280a:	d506      	bpl.n	800281a <__sflush_r+0x4a>
 800280c:	6863      	ldr	r3, [r4, #4]
 800280e:	1ac0      	subs	r0, r0, r3
 8002810:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <__sflush_r+0x4a>
 8002816:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002818:	1ac0      	subs	r0, r0, r3
 800281a:	0002      	movs	r2, r0
 800281c:	6a21      	ldr	r1, [r4, #32]
 800281e:	2300      	movs	r3, #0
 8002820:	0028      	movs	r0, r5
 8002822:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002824:	47b8      	blx	r7
 8002826:	89a1      	ldrh	r1, [r4, #12]
 8002828:	1c43      	adds	r3, r0, #1
 800282a:	d106      	bne.n	800283a <__sflush_r+0x6a>
 800282c:	682b      	ldr	r3, [r5, #0]
 800282e:	2b1d      	cmp	r3, #29
 8002830:	d831      	bhi.n	8002896 <__sflush_r+0xc6>
 8002832:	4a2c      	ldr	r2, [pc, #176]	; (80028e4 <__sflush_r+0x114>)
 8002834:	40da      	lsrs	r2, r3
 8002836:	07d3      	lsls	r3, r2, #31
 8002838:	d52d      	bpl.n	8002896 <__sflush_r+0xc6>
 800283a:	2300      	movs	r3, #0
 800283c:	6063      	str	r3, [r4, #4]
 800283e:	6923      	ldr	r3, [r4, #16]
 8002840:	6023      	str	r3, [r4, #0]
 8002842:	04cb      	lsls	r3, r1, #19
 8002844:	d505      	bpl.n	8002852 <__sflush_r+0x82>
 8002846:	1c43      	adds	r3, r0, #1
 8002848:	d102      	bne.n	8002850 <__sflush_r+0x80>
 800284a:	682b      	ldr	r3, [r5, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d100      	bne.n	8002852 <__sflush_r+0x82>
 8002850:	6560      	str	r0, [r4, #84]	; 0x54
 8002852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002854:	602e      	str	r6, [r5, #0]
 8002856:	2900      	cmp	r1, #0
 8002858:	d0c6      	beq.n	80027e8 <__sflush_r+0x18>
 800285a:	0023      	movs	r3, r4
 800285c:	3344      	adds	r3, #68	; 0x44
 800285e:	4299      	cmp	r1, r3
 8002860:	d002      	beq.n	8002868 <__sflush_r+0x98>
 8002862:	0028      	movs	r0, r5
 8002864:	f7ff fb40 	bl	8001ee8 <_free_r>
 8002868:	2000      	movs	r0, #0
 800286a:	6360      	str	r0, [r4, #52]	; 0x34
 800286c:	e7bd      	b.n	80027ea <__sflush_r+0x1a>
 800286e:	2301      	movs	r3, #1
 8002870:	0028      	movs	r0, r5
 8002872:	6a21      	ldr	r1, [r4, #32]
 8002874:	47b8      	blx	r7
 8002876:	1c43      	adds	r3, r0, #1
 8002878:	d1c5      	bne.n	8002806 <__sflush_r+0x36>
 800287a:	682b      	ldr	r3, [r5, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0c2      	beq.n	8002806 <__sflush_r+0x36>
 8002880:	2b1d      	cmp	r3, #29
 8002882:	d001      	beq.n	8002888 <__sflush_r+0xb8>
 8002884:	2b16      	cmp	r3, #22
 8002886:	d101      	bne.n	800288c <__sflush_r+0xbc>
 8002888:	602e      	str	r6, [r5, #0]
 800288a:	e7ad      	b.n	80027e8 <__sflush_r+0x18>
 800288c:	2340      	movs	r3, #64	; 0x40
 800288e:	89a2      	ldrh	r2, [r4, #12]
 8002890:	4313      	orrs	r3, r2
 8002892:	81a3      	strh	r3, [r4, #12]
 8002894:	e7a9      	b.n	80027ea <__sflush_r+0x1a>
 8002896:	2340      	movs	r3, #64	; 0x40
 8002898:	430b      	orrs	r3, r1
 800289a:	e7fa      	b.n	8002892 <__sflush_r+0xc2>
 800289c:	690f      	ldr	r7, [r1, #16]
 800289e:	2f00      	cmp	r7, #0
 80028a0:	d0a2      	beq.n	80027e8 <__sflush_r+0x18>
 80028a2:	680a      	ldr	r2, [r1, #0]
 80028a4:	600f      	str	r7, [r1, #0]
 80028a6:	1bd2      	subs	r2, r2, r7
 80028a8:	9201      	str	r2, [sp, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	079b      	lsls	r3, r3, #30
 80028ae:	d100      	bne.n	80028b2 <__sflush_r+0xe2>
 80028b0:	694a      	ldr	r2, [r1, #20]
 80028b2:	60a2      	str	r2, [r4, #8]
 80028b4:	9b01      	ldr	r3, [sp, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	dc00      	bgt.n	80028bc <__sflush_r+0xec>
 80028ba:	e795      	b.n	80027e8 <__sflush_r+0x18>
 80028bc:	003a      	movs	r2, r7
 80028be:	0028      	movs	r0, r5
 80028c0:	9b01      	ldr	r3, [sp, #4]
 80028c2:	6a21      	ldr	r1, [r4, #32]
 80028c4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028c6:	47b0      	blx	r6
 80028c8:	2800      	cmp	r0, #0
 80028ca:	dc06      	bgt.n	80028da <__sflush_r+0x10a>
 80028cc:	2340      	movs	r3, #64	; 0x40
 80028ce:	2001      	movs	r0, #1
 80028d0:	89a2      	ldrh	r2, [r4, #12]
 80028d2:	4240      	negs	r0, r0
 80028d4:	4313      	orrs	r3, r2
 80028d6:	81a3      	strh	r3, [r4, #12]
 80028d8:	e787      	b.n	80027ea <__sflush_r+0x1a>
 80028da:	9b01      	ldr	r3, [sp, #4]
 80028dc:	183f      	adds	r7, r7, r0
 80028de:	1a1b      	subs	r3, r3, r0
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	e7e7      	b.n	80028b4 <__sflush_r+0xe4>
 80028e4:	20400001 	.word	0x20400001

080028e8 <_fflush_r>:
 80028e8:	690b      	ldr	r3, [r1, #16]
 80028ea:	b570      	push	{r4, r5, r6, lr}
 80028ec:	0005      	movs	r5, r0
 80028ee:	000c      	movs	r4, r1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d102      	bne.n	80028fa <_fflush_r+0x12>
 80028f4:	2500      	movs	r5, #0
 80028f6:	0028      	movs	r0, r5
 80028f8:	bd70      	pop	{r4, r5, r6, pc}
 80028fa:	2800      	cmp	r0, #0
 80028fc:	d004      	beq.n	8002908 <_fflush_r+0x20>
 80028fe:	6983      	ldr	r3, [r0, #24]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <_fflush_r+0x20>
 8002904:	f000 f892 	bl	8002a2c <__sinit>
 8002908:	4b14      	ldr	r3, [pc, #80]	; (800295c <_fflush_r+0x74>)
 800290a:	429c      	cmp	r4, r3
 800290c:	d11b      	bne.n	8002946 <_fflush_r+0x5e>
 800290e:	686c      	ldr	r4, [r5, #4]
 8002910:	220c      	movs	r2, #12
 8002912:	5ea3      	ldrsh	r3, [r4, r2]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d0ed      	beq.n	80028f4 <_fflush_r+0xc>
 8002918:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800291a:	07d2      	lsls	r2, r2, #31
 800291c:	d404      	bmi.n	8002928 <_fflush_r+0x40>
 800291e:	059b      	lsls	r3, r3, #22
 8002920:	d402      	bmi.n	8002928 <_fflush_r+0x40>
 8002922:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002924:	f000 f923 	bl	8002b6e <__retarget_lock_acquire_recursive>
 8002928:	0028      	movs	r0, r5
 800292a:	0021      	movs	r1, r4
 800292c:	f7ff ff50 	bl	80027d0 <__sflush_r>
 8002930:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002932:	0005      	movs	r5, r0
 8002934:	07db      	lsls	r3, r3, #31
 8002936:	d4de      	bmi.n	80028f6 <_fflush_r+0xe>
 8002938:	89a3      	ldrh	r3, [r4, #12]
 800293a:	059b      	lsls	r3, r3, #22
 800293c:	d4db      	bmi.n	80028f6 <_fflush_r+0xe>
 800293e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002940:	f000 f916 	bl	8002b70 <__retarget_lock_release_recursive>
 8002944:	e7d7      	b.n	80028f6 <_fflush_r+0xe>
 8002946:	4b06      	ldr	r3, [pc, #24]	; (8002960 <_fflush_r+0x78>)
 8002948:	429c      	cmp	r4, r3
 800294a:	d101      	bne.n	8002950 <_fflush_r+0x68>
 800294c:	68ac      	ldr	r4, [r5, #8]
 800294e:	e7df      	b.n	8002910 <_fflush_r+0x28>
 8002950:	4b04      	ldr	r3, [pc, #16]	; (8002964 <_fflush_r+0x7c>)
 8002952:	429c      	cmp	r4, r3
 8002954:	d1dc      	bne.n	8002910 <_fflush_r+0x28>
 8002956:	68ec      	ldr	r4, [r5, #12]
 8002958:	e7da      	b.n	8002910 <_fflush_r+0x28>
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	08002fec 	.word	0x08002fec
 8002960:	0800300c 	.word	0x0800300c
 8002964:	08002fcc 	.word	0x08002fcc

08002968 <std>:
 8002968:	2300      	movs	r3, #0
 800296a:	b510      	push	{r4, lr}
 800296c:	0004      	movs	r4, r0
 800296e:	6003      	str	r3, [r0, #0]
 8002970:	6043      	str	r3, [r0, #4]
 8002972:	6083      	str	r3, [r0, #8]
 8002974:	8181      	strh	r1, [r0, #12]
 8002976:	6643      	str	r3, [r0, #100]	; 0x64
 8002978:	0019      	movs	r1, r3
 800297a:	81c2      	strh	r2, [r0, #14]
 800297c:	6103      	str	r3, [r0, #16]
 800297e:	6143      	str	r3, [r0, #20]
 8002980:	6183      	str	r3, [r0, #24]
 8002982:	2208      	movs	r2, #8
 8002984:	305c      	adds	r0, #92	; 0x5c
 8002986:	f7ff fa30 	bl	8001dea <memset>
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <std+0x38>)
 800298c:	6263      	str	r3, [r4, #36]	; 0x24
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <std+0x3c>)
 8002990:	6224      	str	r4, [r4, #32]
 8002992:	62a3      	str	r3, [r4, #40]	; 0x28
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <std+0x40>)
 8002996:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002998:	4b04      	ldr	r3, [pc, #16]	; (80029ac <std+0x44>)
 800299a:	6323      	str	r3, [r4, #48]	; 0x30
 800299c:	bd10      	pop	{r4, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	08002d19 	.word	0x08002d19
 80029a4:	08002d41 	.word	0x08002d41
 80029a8:	08002d79 	.word	0x08002d79
 80029ac:	08002da5 	.word	0x08002da5

080029b0 <_cleanup_r>:
 80029b0:	b510      	push	{r4, lr}
 80029b2:	4902      	ldr	r1, [pc, #8]	; (80029bc <_cleanup_r+0xc>)
 80029b4:	f000 f8ba 	bl	8002b2c <_fwalk_reent>
 80029b8:	bd10      	pop	{r4, pc}
 80029ba:	46c0      	nop			; (mov r8, r8)
 80029bc:	080028e9 	.word	0x080028e9

080029c0 <__sfmoreglue>:
 80029c0:	b570      	push	{r4, r5, r6, lr}
 80029c2:	2568      	movs	r5, #104	; 0x68
 80029c4:	1e4a      	subs	r2, r1, #1
 80029c6:	4355      	muls	r5, r2
 80029c8:	000e      	movs	r6, r1
 80029ca:	0029      	movs	r1, r5
 80029cc:	3174      	adds	r1, #116	; 0x74
 80029ce:	f7ff fad5 	bl	8001f7c <_malloc_r>
 80029d2:	1e04      	subs	r4, r0, #0
 80029d4:	d008      	beq.n	80029e8 <__sfmoreglue+0x28>
 80029d6:	2100      	movs	r1, #0
 80029d8:	002a      	movs	r2, r5
 80029da:	6001      	str	r1, [r0, #0]
 80029dc:	6046      	str	r6, [r0, #4]
 80029de:	300c      	adds	r0, #12
 80029e0:	60a0      	str	r0, [r4, #8]
 80029e2:	3268      	adds	r2, #104	; 0x68
 80029e4:	f7ff fa01 	bl	8001dea <memset>
 80029e8:	0020      	movs	r0, r4
 80029ea:	bd70      	pop	{r4, r5, r6, pc}

080029ec <__sfp_lock_acquire>:
 80029ec:	b510      	push	{r4, lr}
 80029ee:	4802      	ldr	r0, [pc, #8]	; (80029f8 <__sfp_lock_acquire+0xc>)
 80029f0:	f000 f8bd 	bl	8002b6e <__retarget_lock_acquire_recursive>
 80029f4:	bd10      	pop	{r4, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	2000012c 	.word	0x2000012c

080029fc <__sfp_lock_release>:
 80029fc:	b510      	push	{r4, lr}
 80029fe:	4802      	ldr	r0, [pc, #8]	; (8002a08 <__sfp_lock_release+0xc>)
 8002a00:	f000 f8b6 	bl	8002b70 <__retarget_lock_release_recursive>
 8002a04:	bd10      	pop	{r4, pc}
 8002a06:	46c0      	nop			; (mov r8, r8)
 8002a08:	2000012c 	.word	0x2000012c

08002a0c <__sinit_lock_acquire>:
 8002a0c:	b510      	push	{r4, lr}
 8002a0e:	4802      	ldr	r0, [pc, #8]	; (8002a18 <__sinit_lock_acquire+0xc>)
 8002a10:	f000 f8ad 	bl	8002b6e <__retarget_lock_acquire_recursive>
 8002a14:	bd10      	pop	{r4, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	20000127 	.word	0x20000127

08002a1c <__sinit_lock_release>:
 8002a1c:	b510      	push	{r4, lr}
 8002a1e:	4802      	ldr	r0, [pc, #8]	; (8002a28 <__sinit_lock_release+0xc>)
 8002a20:	f000 f8a6 	bl	8002b70 <__retarget_lock_release_recursive>
 8002a24:	bd10      	pop	{r4, pc}
 8002a26:	46c0      	nop			; (mov r8, r8)
 8002a28:	20000127 	.word	0x20000127

08002a2c <__sinit>:
 8002a2c:	b513      	push	{r0, r1, r4, lr}
 8002a2e:	0004      	movs	r4, r0
 8002a30:	f7ff ffec 	bl	8002a0c <__sinit_lock_acquire>
 8002a34:	69a3      	ldr	r3, [r4, #24]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d002      	beq.n	8002a40 <__sinit+0x14>
 8002a3a:	f7ff ffef 	bl	8002a1c <__sinit_lock_release>
 8002a3e:	bd13      	pop	{r0, r1, r4, pc}
 8002a40:	64a3      	str	r3, [r4, #72]	; 0x48
 8002a42:	64e3      	str	r3, [r4, #76]	; 0x4c
 8002a44:	6523      	str	r3, [r4, #80]	; 0x50
 8002a46:	4b13      	ldr	r3, [pc, #76]	; (8002a94 <__sinit+0x68>)
 8002a48:	4a13      	ldr	r2, [pc, #76]	; (8002a98 <__sinit+0x6c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	42a3      	cmp	r3, r4
 8002a52:	d101      	bne.n	8002a58 <__sinit+0x2c>
 8002a54:	2301      	movs	r3, #1
 8002a56:	61a3      	str	r3, [r4, #24]
 8002a58:	0020      	movs	r0, r4
 8002a5a:	f000 f81f 	bl	8002a9c <__sfp>
 8002a5e:	6060      	str	r0, [r4, #4]
 8002a60:	0020      	movs	r0, r4
 8002a62:	f000 f81b 	bl	8002a9c <__sfp>
 8002a66:	60a0      	str	r0, [r4, #8]
 8002a68:	0020      	movs	r0, r4
 8002a6a:	f000 f817 	bl	8002a9c <__sfp>
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2104      	movs	r1, #4
 8002a72:	60e0      	str	r0, [r4, #12]
 8002a74:	6860      	ldr	r0, [r4, #4]
 8002a76:	f7ff ff77 	bl	8002968 <std>
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	2109      	movs	r1, #9
 8002a7e:	68a0      	ldr	r0, [r4, #8]
 8002a80:	f7ff ff72 	bl	8002968 <std>
 8002a84:	2202      	movs	r2, #2
 8002a86:	2112      	movs	r1, #18
 8002a88:	68e0      	ldr	r0, [r4, #12]
 8002a8a:	f7ff ff6d 	bl	8002968 <std>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	61a3      	str	r3, [r4, #24]
 8002a92:	e7d2      	b.n	8002a3a <__sinit+0xe>
 8002a94:	08002ee0 	.word	0x08002ee0
 8002a98:	080029b1 	.word	0x080029b1

08002a9c <__sfp>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	0007      	movs	r7, r0
 8002aa0:	f7ff ffa4 	bl	80029ec <__sfp_lock_acquire>
 8002aa4:	4b1f      	ldr	r3, [pc, #124]	; (8002b24 <__sfp+0x88>)
 8002aa6:	681e      	ldr	r6, [r3, #0]
 8002aa8:	69b3      	ldr	r3, [r6, #24]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d102      	bne.n	8002ab4 <__sfp+0x18>
 8002aae:	0030      	movs	r0, r6
 8002ab0:	f7ff ffbc 	bl	8002a2c <__sinit>
 8002ab4:	3648      	adds	r6, #72	; 0x48
 8002ab6:	68b4      	ldr	r4, [r6, #8]
 8002ab8:	6873      	ldr	r3, [r6, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	d504      	bpl.n	8002ac8 <__sfp+0x2c>
 8002abe:	6833      	ldr	r3, [r6, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d022      	beq.n	8002b0a <__sfp+0x6e>
 8002ac4:	6836      	ldr	r6, [r6, #0]
 8002ac6:	e7f6      	b.n	8002ab6 <__sfp+0x1a>
 8002ac8:	220c      	movs	r2, #12
 8002aca:	5ea5      	ldrsh	r5, [r4, r2]
 8002acc:	2d00      	cmp	r5, #0
 8002ace:	d11a      	bne.n	8002b06 <__sfp+0x6a>
 8002ad0:	0020      	movs	r0, r4
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <__sfp+0x8c>)
 8002ad4:	3058      	adds	r0, #88	; 0x58
 8002ad6:	60e3      	str	r3, [r4, #12]
 8002ad8:	6665      	str	r5, [r4, #100]	; 0x64
 8002ada:	f000 f847 	bl	8002b6c <__retarget_lock_init_recursive>
 8002ade:	f7ff ff8d 	bl	80029fc <__sfp_lock_release>
 8002ae2:	0020      	movs	r0, r4
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	0029      	movs	r1, r5
 8002ae8:	6025      	str	r5, [r4, #0]
 8002aea:	60a5      	str	r5, [r4, #8]
 8002aec:	6065      	str	r5, [r4, #4]
 8002aee:	6125      	str	r5, [r4, #16]
 8002af0:	6165      	str	r5, [r4, #20]
 8002af2:	61a5      	str	r5, [r4, #24]
 8002af4:	305c      	adds	r0, #92	; 0x5c
 8002af6:	f7ff f978 	bl	8001dea <memset>
 8002afa:	6365      	str	r5, [r4, #52]	; 0x34
 8002afc:	63a5      	str	r5, [r4, #56]	; 0x38
 8002afe:	64a5      	str	r5, [r4, #72]	; 0x48
 8002b00:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002b02:	0020      	movs	r0, r4
 8002b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b06:	3468      	adds	r4, #104	; 0x68
 8002b08:	e7d7      	b.n	8002aba <__sfp+0x1e>
 8002b0a:	2104      	movs	r1, #4
 8002b0c:	0038      	movs	r0, r7
 8002b0e:	f7ff ff57 	bl	80029c0 <__sfmoreglue>
 8002b12:	1e04      	subs	r4, r0, #0
 8002b14:	6030      	str	r0, [r6, #0]
 8002b16:	d1d5      	bne.n	8002ac4 <__sfp+0x28>
 8002b18:	f7ff ff70 	bl	80029fc <__sfp_lock_release>
 8002b1c:	230c      	movs	r3, #12
 8002b1e:	603b      	str	r3, [r7, #0]
 8002b20:	e7ef      	b.n	8002b02 <__sfp+0x66>
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	08002ee0 	.word	0x08002ee0
 8002b28:	ffff0001 	.word	0xffff0001

08002b2c <_fwalk_reent>:
 8002b2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b2e:	0004      	movs	r4, r0
 8002b30:	0006      	movs	r6, r0
 8002b32:	2700      	movs	r7, #0
 8002b34:	9101      	str	r1, [sp, #4]
 8002b36:	3448      	adds	r4, #72	; 0x48
 8002b38:	6863      	ldr	r3, [r4, #4]
 8002b3a:	68a5      	ldr	r5, [r4, #8]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	9b00      	ldr	r3, [sp, #0]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	d504      	bpl.n	8002b50 <_fwalk_reent+0x24>
 8002b46:	6824      	ldr	r4, [r4, #0]
 8002b48:	2c00      	cmp	r4, #0
 8002b4a:	d1f5      	bne.n	8002b38 <_fwalk_reent+0xc>
 8002b4c:	0038      	movs	r0, r7
 8002b4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002b50:	89ab      	ldrh	r3, [r5, #12]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d908      	bls.n	8002b68 <_fwalk_reent+0x3c>
 8002b56:	220e      	movs	r2, #14
 8002b58:	5eab      	ldrsh	r3, [r5, r2]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	d004      	beq.n	8002b68 <_fwalk_reent+0x3c>
 8002b5e:	0029      	movs	r1, r5
 8002b60:	0030      	movs	r0, r6
 8002b62:	9b01      	ldr	r3, [sp, #4]
 8002b64:	4798      	blx	r3
 8002b66:	4307      	orrs	r7, r0
 8002b68:	3568      	adds	r5, #104	; 0x68
 8002b6a:	e7e8      	b.n	8002b3e <_fwalk_reent+0x12>

08002b6c <__retarget_lock_init_recursive>:
 8002b6c:	4770      	bx	lr

08002b6e <__retarget_lock_acquire_recursive>:
 8002b6e:	4770      	bx	lr

08002b70 <__retarget_lock_release_recursive>:
 8002b70:	4770      	bx	lr
	...

08002b74 <__swhatbuf_r>:
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	000e      	movs	r6, r1
 8002b78:	001d      	movs	r5, r3
 8002b7a:	230e      	movs	r3, #14
 8002b7c:	5ec9      	ldrsh	r1, [r1, r3]
 8002b7e:	0014      	movs	r4, r2
 8002b80:	b096      	sub	sp, #88	; 0x58
 8002b82:	2900      	cmp	r1, #0
 8002b84:	da07      	bge.n	8002b96 <__swhatbuf_r+0x22>
 8002b86:	2300      	movs	r3, #0
 8002b88:	602b      	str	r3, [r5, #0]
 8002b8a:	89b3      	ldrh	r3, [r6, #12]
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	d411      	bmi.n	8002bb4 <__swhatbuf_r+0x40>
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	e00f      	b.n	8002bb6 <__swhatbuf_r+0x42>
 8002b96:	466a      	mov	r2, sp
 8002b98:	f000 f930 	bl	8002dfc <_fstat_r>
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	dbf2      	blt.n	8002b86 <__swhatbuf_r+0x12>
 8002ba0:	23f0      	movs	r3, #240	; 0xf0
 8002ba2:	9901      	ldr	r1, [sp, #4]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	4019      	ands	r1, r3
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <__swhatbuf_r+0x4c>)
 8002baa:	18c9      	adds	r1, r1, r3
 8002bac:	424b      	negs	r3, r1
 8002bae:	4159      	adcs	r1, r3
 8002bb0:	6029      	str	r1, [r5, #0]
 8002bb2:	e7ed      	b.n	8002b90 <__swhatbuf_r+0x1c>
 8002bb4:	2340      	movs	r3, #64	; 0x40
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	6023      	str	r3, [r4, #0]
 8002bba:	b016      	add	sp, #88	; 0x58
 8002bbc:	bd70      	pop	{r4, r5, r6, pc}
 8002bbe:	46c0      	nop			; (mov r8, r8)
 8002bc0:	ffffe000 	.word	0xffffe000

08002bc4 <__smakebuf_r>:
 8002bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bc6:	2602      	movs	r6, #2
 8002bc8:	898b      	ldrh	r3, [r1, #12]
 8002bca:	0005      	movs	r5, r0
 8002bcc:	000c      	movs	r4, r1
 8002bce:	4233      	tst	r3, r6
 8002bd0:	d006      	beq.n	8002be0 <__smakebuf_r+0x1c>
 8002bd2:	0023      	movs	r3, r4
 8002bd4:	3347      	adds	r3, #71	; 0x47
 8002bd6:	6023      	str	r3, [r4, #0]
 8002bd8:	6123      	str	r3, [r4, #16]
 8002bda:	2301      	movs	r3, #1
 8002bdc:	6163      	str	r3, [r4, #20]
 8002bde:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8002be0:	466a      	mov	r2, sp
 8002be2:	ab01      	add	r3, sp, #4
 8002be4:	f7ff ffc6 	bl	8002b74 <__swhatbuf_r>
 8002be8:	9900      	ldr	r1, [sp, #0]
 8002bea:	0007      	movs	r7, r0
 8002bec:	0028      	movs	r0, r5
 8002bee:	f7ff f9c5 	bl	8001f7c <_malloc_r>
 8002bf2:	2800      	cmp	r0, #0
 8002bf4:	d108      	bne.n	8002c08 <__smakebuf_r+0x44>
 8002bf6:	220c      	movs	r2, #12
 8002bf8:	5ea3      	ldrsh	r3, [r4, r2]
 8002bfa:	059a      	lsls	r2, r3, #22
 8002bfc:	d4ef      	bmi.n	8002bde <__smakebuf_r+0x1a>
 8002bfe:	2203      	movs	r2, #3
 8002c00:	4393      	bics	r3, r2
 8002c02:	431e      	orrs	r6, r3
 8002c04:	81a6      	strh	r6, [r4, #12]
 8002c06:	e7e4      	b.n	8002bd2 <__smakebuf_r+0xe>
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <__smakebuf_r+0x84>)
 8002c0a:	62ab      	str	r3, [r5, #40]	; 0x28
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	89a2      	ldrh	r2, [r4, #12]
 8002c10:	6020      	str	r0, [r4, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	81a3      	strh	r3, [r4, #12]
 8002c16:	9b00      	ldr	r3, [sp, #0]
 8002c18:	6120      	str	r0, [r4, #16]
 8002c1a:	6163      	str	r3, [r4, #20]
 8002c1c:	9b01      	ldr	r3, [sp, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00d      	beq.n	8002c3e <__smakebuf_r+0x7a>
 8002c22:	0028      	movs	r0, r5
 8002c24:	230e      	movs	r3, #14
 8002c26:	5ee1      	ldrsh	r1, [r4, r3]
 8002c28:	f000 f8fa 	bl	8002e20 <_isatty_r>
 8002c2c:	2800      	cmp	r0, #0
 8002c2e:	d006      	beq.n	8002c3e <__smakebuf_r+0x7a>
 8002c30:	2203      	movs	r2, #3
 8002c32:	89a3      	ldrh	r3, [r4, #12]
 8002c34:	4393      	bics	r3, r2
 8002c36:	001a      	movs	r2, r3
 8002c38:	2301      	movs	r3, #1
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	81a3      	strh	r3, [r4, #12]
 8002c3e:	89a0      	ldrh	r0, [r4, #12]
 8002c40:	4307      	orrs	r7, r0
 8002c42:	81a7      	strh	r7, [r4, #12]
 8002c44:	e7cb      	b.n	8002bde <__smakebuf_r+0x1a>
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	080029b1 	.word	0x080029b1

08002c4c <memchr>:
 8002c4c:	b2c9      	uxtb	r1, r1
 8002c4e:	1882      	adds	r2, r0, r2
 8002c50:	4290      	cmp	r0, r2
 8002c52:	d101      	bne.n	8002c58 <memchr+0xc>
 8002c54:	2000      	movs	r0, #0
 8002c56:	4770      	bx	lr
 8002c58:	7803      	ldrb	r3, [r0, #0]
 8002c5a:	428b      	cmp	r3, r1
 8002c5c:	d0fb      	beq.n	8002c56 <memchr+0xa>
 8002c5e:	3001      	adds	r0, #1
 8002c60:	e7f6      	b.n	8002c50 <memchr+0x4>
	...

08002c64 <__malloc_lock>:
 8002c64:	b510      	push	{r4, lr}
 8002c66:	4802      	ldr	r0, [pc, #8]	; (8002c70 <__malloc_lock+0xc>)
 8002c68:	f7ff ff81 	bl	8002b6e <__retarget_lock_acquire_recursive>
 8002c6c:	bd10      	pop	{r4, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	20000128 	.word	0x20000128

08002c74 <__malloc_unlock>:
 8002c74:	b510      	push	{r4, lr}
 8002c76:	4802      	ldr	r0, [pc, #8]	; (8002c80 <__malloc_unlock+0xc>)
 8002c78:	f7ff ff7a 	bl	8002b70 <__retarget_lock_release_recursive>
 8002c7c:	bd10      	pop	{r4, pc}
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	20000128 	.word	0x20000128

08002c84 <_raise_r>:
 8002c84:	b570      	push	{r4, r5, r6, lr}
 8002c86:	0004      	movs	r4, r0
 8002c88:	000d      	movs	r5, r1
 8002c8a:	291f      	cmp	r1, #31
 8002c8c:	d904      	bls.n	8002c98 <_raise_r+0x14>
 8002c8e:	2316      	movs	r3, #22
 8002c90:	6003      	str	r3, [r0, #0]
 8002c92:	2001      	movs	r0, #1
 8002c94:	4240      	negs	r0, r0
 8002c96:	bd70      	pop	{r4, r5, r6, pc}
 8002c98:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d004      	beq.n	8002ca8 <_raise_r+0x24>
 8002c9e:	008a      	lsls	r2, r1, #2
 8002ca0:	189b      	adds	r3, r3, r2
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	2a00      	cmp	r2, #0
 8002ca6:	d108      	bne.n	8002cba <_raise_r+0x36>
 8002ca8:	0020      	movs	r0, r4
 8002caa:	f000 f831 	bl	8002d10 <_getpid_r>
 8002cae:	002a      	movs	r2, r5
 8002cb0:	0001      	movs	r1, r0
 8002cb2:	0020      	movs	r0, r4
 8002cb4:	f000 f81a 	bl	8002cec <_kill_r>
 8002cb8:	e7ed      	b.n	8002c96 <_raise_r+0x12>
 8002cba:	2000      	movs	r0, #0
 8002cbc:	2a01      	cmp	r2, #1
 8002cbe:	d0ea      	beq.n	8002c96 <_raise_r+0x12>
 8002cc0:	1c51      	adds	r1, r2, #1
 8002cc2:	d103      	bne.n	8002ccc <_raise_r+0x48>
 8002cc4:	2316      	movs	r3, #22
 8002cc6:	3001      	adds	r0, #1
 8002cc8:	6023      	str	r3, [r4, #0]
 8002cca:	e7e4      	b.n	8002c96 <_raise_r+0x12>
 8002ccc:	2400      	movs	r4, #0
 8002cce:	0028      	movs	r0, r5
 8002cd0:	601c      	str	r4, [r3, #0]
 8002cd2:	4790      	blx	r2
 8002cd4:	0020      	movs	r0, r4
 8002cd6:	e7de      	b.n	8002c96 <_raise_r+0x12>

08002cd8 <raise>:
 8002cd8:	b510      	push	{r4, lr}
 8002cda:	4b03      	ldr	r3, [pc, #12]	; (8002ce8 <raise+0x10>)
 8002cdc:	0001      	movs	r1, r0
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	f7ff ffd0 	bl	8002c84 <_raise_r>
 8002ce4:	bd10      	pop	{r4, pc}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	20000004 	.word	0x20000004

08002cec <_kill_r>:
 8002cec:	2300      	movs	r3, #0
 8002cee:	b570      	push	{r4, r5, r6, lr}
 8002cf0:	4d06      	ldr	r5, [pc, #24]	; (8002d0c <_kill_r+0x20>)
 8002cf2:	0004      	movs	r4, r0
 8002cf4:	0008      	movs	r0, r1
 8002cf6:	0011      	movs	r1, r2
 8002cf8:	602b      	str	r3, [r5, #0]
 8002cfa:	f7fe ff5b 	bl	8001bb4 <_kill>
 8002cfe:	1c43      	adds	r3, r0, #1
 8002d00:	d103      	bne.n	8002d0a <_kill_r+0x1e>
 8002d02:	682b      	ldr	r3, [r5, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d000      	beq.n	8002d0a <_kill_r+0x1e>
 8002d08:	6023      	str	r3, [r4, #0]
 8002d0a:	bd70      	pop	{r4, r5, r6, pc}
 8002d0c:	20000130 	.word	0x20000130

08002d10 <_getpid_r>:
 8002d10:	b510      	push	{r4, lr}
 8002d12:	f7fe ff49 	bl	8001ba8 <_getpid>
 8002d16:	bd10      	pop	{r4, pc}

08002d18 <__sread>:
 8002d18:	b570      	push	{r4, r5, r6, lr}
 8002d1a:	000c      	movs	r4, r1
 8002d1c:	250e      	movs	r5, #14
 8002d1e:	5f49      	ldrsh	r1, [r1, r5]
 8002d20:	f000 f8a4 	bl	8002e6c <_read_r>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	db03      	blt.n	8002d30 <__sread+0x18>
 8002d28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d2a:	181b      	adds	r3, r3, r0
 8002d2c:	6563      	str	r3, [r4, #84]	; 0x54
 8002d2e:	bd70      	pop	{r4, r5, r6, pc}
 8002d30:	89a3      	ldrh	r3, [r4, #12]
 8002d32:	4a02      	ldr	r2, [pc, #8]	; (8002d3c <__sread+0x24>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	81a3      	strh	r3, [r4, #12]
 8002d38:	e7f9      	b.n	8002d2e <__sread+0x16>
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	ffffefff 	.word	0xffffefff

08002d40 <__swrite>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	001f      	movs	r7, r3
 8002d44:	898b      	ldrh	r3, [r1, #12]
 8002d46:	0005      	movs	r5, r0
 8002d48:	000c      	movs	r4, r1
 8002d4a:	0016      	movs	r6, r2
 8002d4c:	05db      	lsls	r3, r3, #23
 8002d4e:	d505      	bpl.n	8002d5c <__swrite+0x1c>
 8002d50:	230e      	movs	r3, #14
 8002d52:	5ec9      	ldrsh	r1, [r1, r3]
 8002d54:	2200      	movs	r2, #0
 8002d56:	2302      	movs	r3, #2
 8002d58:	f000 f874 	bl	8002e44 <_lseek_r>
 8002d5c:	89a3      	ldrh	r3, [r4, #12]
 8002d5e:	4a05      	ldr	r2, [pc, #20]	; (8002d74 <__swrite+0x34>)
 8002d60:	0028      	movs	r0, r5
 8002d62:	4013      	ands	r3, r2
 8002d64:	81a3      	strh	r3, [r4, #12]
 8002d66:	0032      	movs	r2, r6
 8002d68:	230e      	movs	r3, #14
 8002d6a:	5ee1      	ldrsh	r1, [r4, r3]
 8002d6c:	003b      	movs	r3, r7
 8002d6e:	f000 f81f 	bl	8002db0 <_write_r>
 8002d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d74:	ffffefff 	.word	0xffffefff

08002d78 <__sseek>:
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	000c      	movs	r4, r1
 8002d7c:	250e      	movs	r5, #14
 8002d7e:	5f49      	ldrsh	r1, [r1, r5]
 8002d80:	f000 f860 	bl	8002e44 <_lseek_r>
 8002d84:	89a3      	ldrh	r3, [r4, #12]
 8002d86:	1c42      	adds	r2, r0, #1
 8002d88:	d103      	bne.n	8002d92 <__sseek+0x1a>
 8002d8a:	4a05      	ldr	r2, [pc, #20]	; (8002da0 <__sseek+0x28>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	81a3      	strh	r3, [r4, #12]
 8002d90:	bd70      	pop	{r4, r5, r6, pc}
 8002d92:	2280      	movs	r2, #128	; 0x80
 8002d94:	0152      	lsls	r2, r2, #5
 8002d96:	4313      	orrs	r3, r2
 8002d98:	81a3      	strh	r3, [r4, #12]
 8002d9a:	6560      	str	r0, [r4, #84]	; 0x54
 8002d9c:	e7f8      	b.n	8002d90 <__sseek+0x18>
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	ffffefff 	.word	0xffffefff

08002da4 <__sclose>:
 8002da4:	b510      	push	{r4, lr}
 8002da6:	230e      	movs	r3, #14
 8002da8:	5ec9      	ldrsh	r1, [r1, r3]
 8002daa:	f000 f815 	bl	8002dd8 <_close_r>
 8002dae:	bd10      	pop	{r4, pc}

08002db0 <_write_r>:
 8002db0:	b570      	push	{r4, r5, r6, lr}
 8002db2:	0004      	movs	r4, r0
 8002db4:	0008      	movs	r0, r1
 8002db6:	0011      	movs	r1, r2
 8002db8:	001a      	movs	r2, r3
 8002dba:	2300      	movs	r3, #0
 8002dbc:	4d05      	ldr	r5, [pc, #20]	; (8002dd4 <_write_r+0x24>)
 8002dbe:	602b      	str	r3, [r5, #0]
 8002dc0:	f7fe ff31 	bl	8001c26 <_write>
 8002dc4:	1c43      	adds	r3, r0, #1
 8002dc6:	d103      	bne.n	8002dd0 <_write_r+0x20>
 8002dc8:	682b      	ldr	r3, [r5, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d000      	beq.n	8002dd0 <_write_r+0x20>
 8002dce:	6023      	str	r3, [r4, #0]
 8002dd0:	bd70      	pop	{r4, r5, r6, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	20000130 	.word	0x20000130

08002dd8 <_close_r>:
 8002dd8:	2300      	movs	r3, #0
 8002dda:	b570      	push	{r4, r5, r6, lr}
 8002ddc:	4d06      	ldr	r5, [pc, #24]	; (8002df8 <_close_r+0x20>)
 8002dde:	0004      	movs	r4, r0
 8002de0:	0008      	movs	r0, r1
 8002de2:	602b      	str	r3, [r5, #0]
 8002de4:	f7fe ff3b 	bl	8001c5e <_close>
 8002de8:	1c43      	adds	r3, r0, #1
 8002dea:	d103      	bne.n	8002df4 <_close_r+0x1c>
 8002dec:	682b      	ldr	r3, [r5, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d000      	beq.n	8002df4 <_close_r+0x1c>
 8002df2:	6023      	str	r3, [r4, #0]
 8002df4:	bd70      	pop	{r4, r5, r6, pc}
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	20000130 	.word	0x20000130

08002dfc <_fstat_r>:
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	b570      	push	{r4, r5, r6, lr}
 8002e00:	4d06      	ldr	r5, [pc, #24]	; (8002e1c <_fstat_r+0x20>)
 8002e02:	0004      	movs	r4, r0
 8002e04:	0008      	movs	r0, r1
 8002e06:	0011      	movs	r1, r2
 8002e08:	602b      	str	r3, [r5, #0]
 8002e0a:	f7fe ff32 	bl	8001c72 <_fstat>
 8002e0e:	1c43      	adds	r3, r0, #1
 8002e10:	d103      	bne.n	8002e1a <_fstat_r+0x1e>
 8002e12:	682b      	ldr	r3, [r5, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d000      	beq.n	8002e1a <_fstat_r+0x1e>
 8002e18:	6023      	str	r3, [r4, #0]
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
 8002e1c:	20000130 	.word	0x20000130

08002e20 <_isatty_r>:
 8002e20:	2300      	movs	r3, #0
 8002e22:	b570      	push	{r4, r5, r6, lr}
 8002e24:	4d06      	ldr	r5, [pc, #24]	; (8002e40 <_isatty_r+0x20>)
 8002e26:	0004      	movs	r4, r0
 8002e28:	0008      	movs	r0, r1
 8002e2a:	602b      	str	r3, [r5, #0]
 8002e2c:	f7fe ff2f 	bl	8001c8e <_isatty>
 8002e30:	1c43      	adds	r3, r0, #1
 8002e32:	d103      	bne.n	8002e3c <_isatty_r+0x1c>
 8002e34:	682b      	ldr	r3, [r5, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d000      	beq.n	8002e3c <_isatty_r+0x1c>
 8002e3a:	6023      	str	r3, [r4, #0]
 8002e3c:	bd70      	pop	{r4, r5, r6, pc}
 8002e3e:	46c0      	nop			; (mov r8, r8)
 8002e40:	20000130 	.word	0x20000130

08002e44 <_lseek_r>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	0004      	movs	r4, r0
 8002e48:	0008      	movs	r0, r1
 8002e4a:	0011      	movs	r1, r2
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	2300      	movs	r3, #0
 8002e50:	4d05      	ldr	r5, [pc, #20]	; (8002e68 <_lseek_r+0x24>)
 8002e52:	602b      	str	r3, [r5, #0]
 8002e54:	f7fe ff24 	bl	8001ca0 <_lseek>
 8002e58:	1c43      	adds	r3, r0, #1
 8002e5a:	d103      	bne.n	8002e64 <_lseek_r+0x20>
 8002e5c:	682b      	ldr	r3, [r5, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d000      	beq.n	8002e64 <_lseek_r+0x20>
 8002e62:	6023      	str	r3, [r4, #0]
 8002e64:	bd70      	pop	{r4, r5, r6, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	20000130 	.word	0x20000130

08002e6c <_read_r>:
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	0004      	movs	r4, r0
 8002e70:	0008      	movs	r0, r1
 8002e72:	0011      	movs	r1, r2
 8002e74:	001a      	movs	r2, r3
 8002e76:	2300      	movs	r3, #0
 8002e78:	4d05      	ldr	r5, [pc, #20]	; (8002e90 <_read_r+0x24>)
 8002e7a:	602b      	str	r3, [r5, #0]
 8002e7c:	f7fe feb6 	bl	8001bec <_read>
 8002e80:	1c43      	adds	r3, r0, #1
 8002e82:	d103      	bne.n	8002e8c <_read_r+0x20>
 8002e84:	682b      	ldr	r3, [r5, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d000      	beq.n	8002e8c <_read_r+0x20>
 8002e8a:	6023      	str	r3, [r4, #0]
 8002e8c:	bd70      	pop	{r4, r5, r6, pc}
 8002e8e:	46c0      	nop			; (mov r8, r8)
 8002e90:	20000130 	.word	0x20000130

08002e94 <_init>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9a:	bc08      	pop	{r3}
 8002e9c:	469e      	mov	lr, r3
 8002e9e:	4770      	bx	lr

08002ea0 <_fini>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	46c0      	nop			; (mov r8, r8)
 8002ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea6:	bc08      	pop	{r3}
 8002ea8:	469e      	mov	lr, r3
 8002eaa:	4770      	bx	lr
