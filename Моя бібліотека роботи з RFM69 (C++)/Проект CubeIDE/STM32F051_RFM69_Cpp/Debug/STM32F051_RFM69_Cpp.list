
STM32F051_RFM69_Cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d3c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000abc  08001dfc  08001dfc  00011dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028b8  080028b8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080028b8  080028b8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028b8  080028b8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028c0  080028c0  000128c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080028c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000068  0800292c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  0800292c  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004af9  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000091b  00000000  00000000  00024b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003c8  00000000  00000000  000254a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000390  00000000  00000000  00025870  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000d7f8  00000000  00000000  00025c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002028  00000000  00000000  000333f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00044079  00000000  00000000  00035420  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00079499  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fe8  00000000  00000000  00079514  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001de4 	.word	0x08001de4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08001de4 	.word	0x08001de4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_lmul>:
 80003f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003f6:	46ce      	mov	lr, r9
 80003f8:	4647      	mov	r7, r8
 80003fa:	0415      	lsls	r5, r2, #16
 80003fc:	0c2d      	lsrs	r5, r5, #16
 80003fe:	002e      	movs	r6, r5
 8000400:	b580      	push	{r7, lr}
 8000402:	0407      	lsls	r7, r0, #16
 8000404:	0c14      	lsrs	r4, r2, #16
 8000406:	0c3f      	lsrs	r7, r7, #16
 8000408:	4699      	mov	r9, r3
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	437e      	muls	r6, r7
 800040e:	435d      	muls	r5, r3
 8000410:	4367      	muls	r7, r4
 8000412:	4363      	muls	r3, r4
 8000414:	197f      	adds	r7, r7, r5
 8000416:	0c34      	lsrs	r4, r6, #16
 8000418:	19e4      	adds	r4, r4, r7
 800041a:	469c      	mov	ip, r3
 800041c:	42a5      	cmp	r5, r4
 800041e:	d903      	bls.n	8000428 <__aeabi_lmul+0x34>
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	025b      	lsls	r3, r3, #9
 8000424:	4698      	mov	r8, r3
 8000426:	44c4      	add	ip, r8
 8000428:	464b      	mov	r3, r9
 800042a:	4343      	muls	r3, r0
 800042c:	4351      	muls	r1, r2
 800042e:	0c25      	lsrs	r5, r4, #16
 8000430:	0436      	lsls	r6, r6, #16
 8000432:	4465      	add	r5, ip
 8000434:	0c36      	lsrs	r6, r6, #16
 8000436:	0424      	lsls	r4, r4, #16
 8000438:	19a4      	adds	r4, r4, r6
 800043a:	195b      	adds	r3, r3, r5
 800043c:	1859      	adds	r1, r3, r1
 800043e:	0020      	movs	r0, r4
 8000440:	bc0c      	pop	{r2, r3}
 8000442:	4690      	mov	r8, r2
 8000444:	4699      	mov	r9, r3
 8000446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	0002      	movs	r2, r0
 8000450:	6039      	str	r1, [r7, #0]
 8000452:	1dfb      	adds	r3, r7, #7
 8000454:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	b25b      	sxtb	r3, r3
 800045c:	2b00      	cmp	r3, #0
 800045e:	db2a      	blt.n	80004b6 <__NVIC_SetPriority+0x6e>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000460:	4a32      	ldr	r2, [pc, #200]	; (800052c <__NVIC_SetPriority+0xe4>)
 8000462:	1dfb      	adds	r3, r7, #7
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	b25b      	sxtb	r3, r3
 8000468:	089b      	lsrs	r3, r3, #2
 800046a:	33c0      	adds	r3, #192	; 0xc0
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	589b      	ldr	r3, [r3, r2]
 8000470:	1dfa      	adds	r2, r7, #7
 8000472:	7812      	ldrb	r2, [r2, #0]
 8000474:	b252      	sxtb	r2, r2
 8000476:	0011      	movs	r1, r2
 8000478:	2203      	movs	r2, #3
 800047a:	400a      	ands	r2, r1
 800047c:	00d2      	lsls	r2, r2, #3
 800047e:	21ff      	movs	r1, #255	; 0xff
 8000480:	4091      	lsls	r1, r2
 8000482:	000a      	movs	r2, r1
 8000484:	43d2      	mvns	r2, r2
 8000486:	401a      	ands	r2, r3
 8000488:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	019b      	lsls	r3, r3, #6
 800048e:	22ff      	movs	r2, #255	; 0xff
 8000490:	401a      	ands	r2, r3
 8000492:	1dfb      	adds	r3, r7, #7
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	b25b      	sxtb	r3, r3
 8000498:	0018      	movs	r0, r3
 800049a:	2303      	movs	r3, #3
 800049c:	4003      	ands	r3, r0
 800049e:	00db      	lsls	r3, r3, #3
 80004a0:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004a2:	4822      	ldr	r0, [pc, #136]	; (800052c <__NVIC_SetPriority+0xe4>)
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	b25b      	sxtb	r3, r3
 80004aa:	089b      	lsrs	r3, r3, #2
 80004ac:	430a      	orrs	r2, r1
 80004ae:	33c0      	adds	r3, #192	; 0xc0
 80004b0:	009b      	lsls	r3, r3, #2
 80004b2:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80004b4:	e035      	b.n	8000522 <__NVIC_SetPriority+0xda>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004b6:	4a1e      	ldr	r2, [pc, #120]	; (8000530 <__NVIC_SetPriority+0xe8>)
 80004b8:	1dfb      	adds	r3, r7, #7
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	b25b      	sxtb	r3, r3
 80004be:	0019      	movs	r1, r3
 80004c0:	230f      	movs	r3, #15
 80004c2:	400b      	ands	r3, r1
 80004c4:	3b08      	subs	r3, #8
 80004c6:	089b      	lsrs	r3, r3, #2
 80004c8:	3306      	adds	r3, #6
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	18d3      	adds	r3, r2, r3
 80004ce:	3304      	adds	r3, #4
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	1dfa      	adds	r2, r7, #7
 80004d4:	7812      	ldrb	r2, [r2, #0]
 80004d6:	b252      	sxtb	r2, r2
 80004d8:	0011      	movs	r1, r2
 80004da:	2203      	movs	r2, #3
 80004dc:	400a      	ands	r2, r1
 80004de:	00d2      	lsls	r2, r2, #3
 80004e0:	21ff      	movs	r1, #255	; 0xff
 80004e2:	4091      	lsls	r1, r2
 80004e4:	000a      	movs	r2, r1
 80004e6:	43d2      	mvns	r2, r2
 80004e8:	401a      	ands	r2, r3
 80004ea:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	019b      	lsls	r3, r3, #6
 80004f0:	22ff      	movs	r2, #255	; 0xff
 80004f2:	401a      	ands	r2, r3
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	b25b      	sxtb	r3, r3
 80004fa:	0018      	movs	r0, r3
 80004fc:	2303      	movs	r3, #3
 80004fe:	4003      	ands	r3, r0
 8000500:	00db      	lsls	r3, r3, #3
 8000502:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000504:	480a      	ldr	r0, [pc, #40]	; (8000530 <__NVIC_SetPriority+0xe8>)
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	b25b      	sxtb	r3, r3
 800050c:	001c      	movs	r4, r3
 800050e:	230f      	movs	r3, #15
 8000510:	4023      	ands	r3, r4
 8000512:	3b08      	subs	r3, #8
 8000514:	089b      	lsrs	r3, r3, #2
 8000516:	430a      	orrs	r2, r1
 8000518:	3306      	adds	r3, #6
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	18c3      	adds	r3, r0, r3
 800051e:	3304      	adds	r3, #4
 8000520:	601a      	str	r2, [r3, #0]
}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b003      	add	sp, #12
 8000528:	bd90      	pop	{r4, r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	e000e100 	.word	0xe000e100
 8000530:	e000ed00 	.word	0xe000ed00

08000534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	3b01      	subs	r3, #1
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <SysTick_Config+0x40>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d901      	bls.n	800054a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000546:	2301      	movs	r3, #1
 8000548:	e010      	b.n	800056c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800054a:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <SysTick_Config+0x44>)
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	3a01      	subs	r2, #1
 8000550:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000552:	2301      	movs	r3, #1
 8000554:	425b      	negs	r3, r3
 8000556:	2103      	movs	r1, #3
 8000558:	0018      	movs	r0, r3
 800055a:	f7ff ff75 	bl	8000448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800055e:	4b06      	ldr	r3, [pc, #24]	; (8000578 <SysTick_Config+0x44>)
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000564:	4b04      	ldr	r3, [pc, #16]	; (8000578 <SysTick_Config+0x44>)
 8000566:	2207      	movs	r2, #7
 8000568:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800056a:	2300      	movs	r3, #0
}
 800056c:	0018      	movs	r0, r3
 800056e:	46bd      	mov	sp, r7
 8000570:	b002      	add	sp, #8
 8000572:	bd80      	pop	{r7, pc}
 8000574:	00ffffff 	.word	0x00ffffff
 8000578:	e000e010 	.word	0xe000e010

0800057c <_ZN4GpioC1EP12GPIO_TypeDeft>:
 */

#include "stm32f0xx.h"
#include "Gpio.h"

Gpio::Gpio(GPIO_TypeDef *PORT, uint16_t gpio_pin) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	60b9      	str	r1, [r7, #8]
 8000586:	1dbb      	adds	r3, r7, #6
 8000588:	801a      	strh	r2, [r3, #0]
	// Ініціалізація піна
	item_port = PORT;
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	601a      	str	r2, [r3, #0]
	item_pin = gpio_pin;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	1dba      	adds	r2, r7, #6
 8000594:	8812      	ldrh	r2, [r2, #0]
 8000596:	809a      	strh	r2, [r3, #4]
	this->GpioEnableClk(); // Ввімкнути тактування вибраного порта
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	0018      	movs	r0, r3
 800059c:	f000 f806 	bl	80005ac <_ZN4Gpio13GpioEnableClkEv>

}
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	0018      	movs	r0, r3
 80005a4:	46bd      	mov	sp, r7
 80005a6:	b004      	add	sp, #16
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <_ZN4Gpio13GpioEnableClkEv>:
void Gpio::GpioEnableClk() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]

	GPIO_TypeDef *PORT = this->item_port;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	60fb      	str	r3, [r7, #12]
// Перед спробою ввімкнення тактування проходить перевірка, чи не було воно ввімкнене раніше.
	if (PORT == GPIOA) {
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	2390      	movs	r3, #144	; 0x90
 80005be:	05db      	lsls	r3, r3, #23
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d111      	bne.n	80005e8 <_ZN4Gpio13GpioEnableClkEv+0x3c>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOAEN)) {
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	2380      	movs	r3, #128	; 0x80
 80005ca:	029b      	lsls	r3, r3, #10
 80005cc:	4013      	ands	r3, r2
 80005ce:	425a      	negs	r2, r3
 80005d0:	4153      	adcs	r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d048      	beq.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80005d8:	4b26      	ldr	r3, [pc, #152]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	4b25      	ldr	r3, [pc, #148]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80005de:	2180      	movs	r1, #128	; 0x80
 80005e0:	0289      	lsls	r1, r1, #10
 80005e2:	430a      	orrs	r2, r1
 80005e4:	615a      	str	r2, [r3, #20]
	} else if (PORT == GPIOD) {
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
		}
	}
}
 80005e6:	e040      	b.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOB) {
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a23      	ldr	r2, [pc, #140]	; (8000678 <_ZN4Gpio13GpioEnableClkEv+0xcc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d111      	bne.n	8000614 <_ZN4Gpio13GpioEnableClkEv+0x68>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOBEN)) {
 80005f0:	4b20      	ldr	r3, [pc, #128]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 80005f2:	695a      	ldr	r2, [r3, #20]
 80005f4:	2380      	movs	r3, #128	; 0x80
 80005f6:	02db      	lsls	r3, r3, #11
 80005f8:	4013      	ands	r3, r2
 80005fa:	425a      	negs	r2, r3
 80005fc:	4153      	adcs	r3, r2
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	2b00      	cmp	r3, #0
 8000602:	d032      	beq.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOBEN;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8000606:	695a      	ldr	r2, [r3, #20]
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	02c9      	lsls	r1, r1, #11
 800060e:	430a      	orrs	r2, r1
 8000610:	615a      	str	r2, [r3, #20]
}
 8000612:	e02a      	b.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOC) {
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4a19      	ldr	r2, [pc, #100]	; (800067c <_ZN4Gpio13GpioEnableClkEv+0xd0>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d111      	bne.n	8000640 <_ZN4Gpio13GpioEnableClkEv+0x94>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIOCEN)) {
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800061e:	695a      	ldr	r2, [r3, #20]
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	031b      	lsls	r3, r3, #12
 8000624:	4013      	ands	r3, r2
 8000626:	425a      	negs	r2, r3
 8000628:	4153      	adcs	r3, r2
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d01c      	beq.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8000632:	695a      	ldr	r2, [r3, #20]
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	0309      	lsls	r1, r1, #12
 800063a:	430a      	orrs	r2, r1
 800063c:	615a      	str	r2, [r3, #20]
}
 800063e:	e014      	b.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
	} else if (PORT == GPIOD) {
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4a0f      	ldr	r2, [pc, #60]	; (8000680 <_ZN4Gpio13GpioEnableClkEv+0xd4>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d110      	bne.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
		if (!(RCC->AHBENR & RCC_AHBENR_GPIODEN)) {
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800064a:	695a      	ldr	r2, [r3, #20]
 800064c:	2380      	movs	r3, #128	; 0x80
 800064e:	035b      	lsls	r3, r3, #13
 8000650:	4013      	ands	r3, r2
 8000652:	425a      	negs	r2, r3
 8000654:	4153      	adcs	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d006      	beq.n	800066a <_ZN4Gpio13GpioEnableClkEv+0xbe>
			RCC->AHBENR |= RCC_AHBENR_GPIODEN;
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <_ZN4Gpio13GpioEnableClkEv+0xc8>)
 8000662:	2180      	movs	r1, #128	; 0x80
 8000664:	0349      	lsls	r1, r1, #13
 8000666:	430a      	orrs	r2, r1
 8000668:	615a      	str	r2, [r3, #20]
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b004      	add	sp, #16
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	40021000 	.word	0x40021000
 8000678:	48000400 	.word	0x48000400
 800067c:	48000800 	.word	0x48000800
 8000680:	48000c00 	.word	0x48000c00

08000684 <_ZN4Gpio17GpioSetOutputTypeE2OT>:

void Gpio::GpioSetOutputType(OUTPUT_TYPE_t GpioOutputType) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	000a      	movs	r2, r1
 800068e:	1cfb      	adds	r3, r7, #3
 8000690:	701a      	strb	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << GpioOutputType;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	685a      	ldr	r2, [r3, #4]
 8000698:	1cfb      	adds	r3, r7, #3
 800069a:	7819      	ldrb	r1, [r3, #0]
 800069c:	1cfb      	adds	r3, r7, #3
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	4099      	lsls	r1, r3
 80006a2:	000b      	movs	r3, r1
 80006a4:	0019      	movs	r1, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	430a      	orrs	r2, r1
 80006ac:	605a      	str	r2, [r3, #4]
}
 80006ae:	46c0      	nop			; (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>:
void Gpio::GpioSetOutputSpeed(OUT_SPEED_t GpioOutputSpeed) {
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b082      	sub	sp, #8
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	6078      	str	r0, [r7, #4]
 80006be:	000a      	movs	r2, r1
 80006c0:	1cfb      	adds	r3, r7, #3
 80006c2:	701a      	strb	r2, [r3, #0]

	this->item_port->OSPEEDR |= (GpioOutputSpeed << (this->item_pin * 2));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	1cfb      	adds	r3, r7, #3
 80006cc:	7819      	ldrb	r1, [r3, #0]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	889b      	ldrh	r3, [r3, #4]
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4099      	lsls	r1, r3
 80006d6:	000b      	movs	r3, r1
 80006d8:	0019      	movs	r1, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	430a      	orrs	r2, r1
 80006e0:	609a      	str	r2, [r3, #8]
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}

080006ea <_ZN4Gpio7SetAsAFE7GPIO_AF>:
	this->item_port->BSRR |= ((1 << this->item_pin) << 16U);
}
void Gpio::Toggle(void) {
	this->item_port->ODR ^= (1 << this->item_pin);
}
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction) {
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
 80006f2:	000a      	movs	r2, r1
 80006f4:	1cfb      	adds	r3, r7, #3
 80006f6:	701a      	strb	r2, [r3, #0]

	if (this->item_pin <= 7) // For gpio0..gpio7
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	889b      	ldrh	r3, [r3, #4]
 80006fc:	2b07      	cmp	r3, #7
 80006fe:	d81d      	bhi.n	800073c <_ZN4Gpio7SetAsAFE7GPIO_AF+0x52>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	889b      	ldrh	r3, [r3, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	2102      	movs	r1, #2
 800070e:	4099      	lsls	r1, r3
 8000710:	000b      	movs	r3, r1
 8000712:	0019      	movs	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	430a      	orrs	r2, r1
 800071a:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6a1a      	ldr	r2, [r3, #32]
 8000722:	1cfb      	adds	r3, r7, #3
 8000724:	7819      	ldrb	r1, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	889b      	ldrh	r3, [r3, #4]
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4099      	lsls	r1, r3
 800072e:	000b      	movs	r3, r1
 8000730:	0019      	movs	r1, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	430a      	orrs	r2, r1
 8000738:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 800073a:	e027      	b.n	800078c <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	889b      	ldrh	r3, [r3, #4]
 8000740:	2b07      	cmp	r3, #7
 8000742:	d922      	bls.n	800078a <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	889b      	ldrh	r3, [r3, #4]
 8000748:	2b0f      	cmp	r3, #15
 800074a:	d81e      	bhi.n	800078a <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	889b      	ldrh	r3, [r3, #4]
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	2102      	movs	r1, #2
 800075a:	4099      	lsls	r1, r3
 800075c:	000b      	movs	r3, r1
 800075e:	0019      	movs	r1, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	430a      	orrs	r2, r1
 8000766:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
				<< ((this->item_pin - 8) * 4);
 800076e:	1cfb      	adds	r3, r7, #3
 8000770:	7819      	ldrb	r1, [r3, #0]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	889b      	ldrh	r3, [r3, #4]
 8000776:	3b08      	subs	r3, #8
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4099      	lsls	r1, r3
 800077c:	000b      	movs	r3, r1
 800077e:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	430a      	orrs	r2, r1
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000788:	e000      	b.n	800078c <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa2>
		while (1) {
 800078a:	e7fe      	b.n	800078a <_ZN4Gpio7SetAsAFE7GPIO_AF+0xa0>
}
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}

08000792 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>:
void Gpio::SetAsAF(GPIO_AF_t AlernateFunction, OUTPUT_TYPE_t GpioOutputType) {
 8000792:	b580      	push	{r7, lr}
 8000794:	b082      	sub	sp, #8
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
 800079a:	0008      	movs	r0, r1
 800079c:	0011      	movs	r1, r2
 800079e:	1cfb      	adds	r3, r7, #3
 80007a0:	1c02      	adds	r2, r0, #0
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	1cbb      	adds	r3, r7, #2
 80007a6:	1c0a      	adds	r2, r1, #0
 80007a8:	701a      	strb	r2, [r3, #0]
	this->GpioSetOutputType(GpioOutputType); //Set Output Type PP | OD
 80007aa:	1cbb      	adds	r3, r7, #2
 80007ac:	781a      	ldrb	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff ff66 	bl	8000684 <_ZN4Gpio17GpioSetOutputTypeE2OT>
	this->GpioSetOutputSpeed(HIGH_SPEED);    //Default hi speed
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2103      	movs	r1, #3
 80007bc:	0018      	movs	r0, r3
 80007be:	f7ff ff7a 	bl	80006b6 <_ZN4Gpio18GpioSetOutputSpeedE9OUT_SPEED>
	if (this->item_pin <= 7) // For gpio0..gpio7
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	889b      	ldrh	r3, [r3, #4]
 80007c6:	2b07      	cmp	r3, #7
 80007c8:	d81d      	bhi.n	8000806 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0x74>
			{
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	889b      	ldrh	r3, [r3, #4]
 80007d4:	005b      	lsls	r3, r3, #1
 80007d6:	2102      	movs	r1, #2
 80007d8:	4099      	lsls	r1, r3
 80007da:	000b      	movs	r3, r1
 80007dc:	0019      	movs	r1, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	430a      	orrs	r2, r1
 80007e4:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[0] |= AlernateFunction << (this->item_pin * 4);
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	6a1a      	ldr	r2, [r3, #32]
 80007ec:	1cfb      	adds	r3, r7, #3
 80007ee:	7819      	ldrb	r1, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	889b      	ldrh	r3, [r3, #4]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	4099      	lsls	r1, r3
 80007f8:	000b      	movs	r3, r1
 80007fa:	0019      	movs	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	430a      	orrs	r2, r1
 8000802:	621a      	str	r2, [r3, #32]
	{
		while (1) {
			// Infinite error loop :-(
		}
	}
}
 8000804:	e027      	b.n	8000856 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
	} else if (this->item_pin > 7 && this->item_pin <= 15) // For gpio8..gpio15
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	889b      	ldrh	r3, [r3, #4]
 800080a:	2b07      	cmp	r3, #7
 800080c:	d922      	bls.n	8000854 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	889b      	ldrh	r3, [r3, #4]
 8000812:	2b0f      	cmp	r3, #15
 8000814:	d81e      	bhi.n	8000854 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
		this->item_port->MODER |= 0x02 << (this->item_pin * 2);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	889b      	ldrh	r3, [r3, #4]
 8000820:	005b      	lsls	r3, r3, #1
 8000822:	2102      	movs	r1, #2
 8000824:	4099      	lsls	r1, r3
 8000826:	000b      	movs	r3, r1
 8000828:	0019      	movs	r1, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	430a      	orrs	r2, r1
 8000830:	601a      	str	r2, [r3, #0]
		this->item_port->AFR[1] |= AlernateFunction
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
				<< ((this->item_pin - 8) * 4);
 8000838:	1cfb      	adds	r3, r7, #3
 800083a:	7819      	ldrb	r1, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	889b      	ldrh	r3, [r3, #4]
 8000840:	3b08      	subs	r3, #8
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	4099      	lsls	r1, r3
 8000846:	000b      	movs	r3, r1
 8000848:	0019      	movs	r1, r3
		this->item_port->AFR[1] |= AlernateFunction
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	430a      	orrs	r2, r1
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000852:	e000      	b.n	8000856 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc4>
		while (1) {
 8000854:	e7fe      	b.n	8000854 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT+0xc2>
}
 8000856:	46bd      	mov	sp, r7
 8000858:	b002      	add	sp, #8
 800085a:	bd80      	pop	{r7, pc}

0800085c <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>:
void Gpio::SetAsGenerapPurporseOutput(OUTPUT_TYPE_t GpioOutputType) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	000a      	movs	r2, r1
 8000866:	1cfb      	adds	r3, r7, #3
 8000868:	701a      	strb	r2, [r3, #0]
	this->item_port->MODER |= 0x01 << (this->item_pin * 2);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	889b      	ldrh	r3, [r3, #4]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	2101      	movs	r1, #1
 8000878:	4099      	lsls	r1, r3
 800087a:	000b      	movs	r3, r1
 800087c:	0019      	movs	r1, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	430a      	orrs	r2, r1
 8000884:	601a      	str	r2, [r3, #0]
	this->item_port->OTYPER |= GpioOutputType << this->item_pin;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	685a      	ldr	r2, [r3, #4]
 800088c:	1cfb      	adds	r3, r7, #3
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	8889      	ldrh	r1, [r1, #4]
 8000894:	408b      	lsls	r3, r1
 8000896:	0019      	movs	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	430a      	orrs	r2, r1
 800089e:	605a      	str	r2, [r3, #4]
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize>:

// Clock constants. DO NOT CHANGE THESE!
#define RFM69_XO               32000000    ///< Internal clock frequency [Hz]
#define RFM69_FSTEP            61.03515625 ///< Step width of synthesizer [Hz]

RFM69::RFM69(SPI_TypeDef *spi, GPIO_TypeDef *csGPIO, uint16_t csPin,
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	60f8      	str	r0, [r7, #12]
 80008b0:	60b9      	str	r1, [r7, #8]
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	001a      	movs	r2, r3
 80008b6:	1cbb      	adds	r3, r7, #2
 80008b8:	801a      	strh	r2, [r3, #0]
		bool highPowerDevice, SPI_DataSize_t size) :
		SPI(spi, size) {
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	231c      	movs	r3, #28
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	781a      	ldrb	r2, [r3, #0]
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	0019      	movs	r1, r3
 80008c6:	f000 fe41 	bl	800154c <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>
	if (spi != NULL) {
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d003      	beq.n	80008d8 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0x30>
		_spi = spi;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	68ba      	ldr	r2, [r7, #8]
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
 80008d6:	e002      	b.n	80008de <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0x36>
	} else {
		_spi = SPI1;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4a24      	ldr	r2, [pc, #144]	; (800096c <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize+0xc4>)
 80008dc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	_csGPIO = csGPIO;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	687a      	ldr	r2, [r7, #4]
 80008e2:	629a      	str	r2, [r3, #40]	; 0x28
	_csPin = csPin;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	1cba      	adds	r2, r7, #2
 80008e8:	8812      	ldrh	r2, [r2, #0]
 80008ea:	859a      	strh	r2, [r3, #44]	; 0x2c
	_resetGPIO = 0;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2200      	movs	r2, #0
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
	_resetPin = 0;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	2200      	movs	r2, #0
 80008f6:	869a      	strh	r2, [r3, #52]	; 0x34
	_init = false;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	223e      	movs	r2, #62	; 0x3e
 80008fc:	2100      	movs	r1, #0
 80008fe:	5499      	strb	r1, [r3, r2]
	_mode = RFM69_MODE_STANDBY;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	223f      	movs	r2, #63	; 0x3f
 8000904:	2101      	movs	r1, #1
 8000906:	5499      	strb	r1, [r3, r2]
	_highPowerDevice = highPowerDevice;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2218      	movs	r2, #24
 800090c:	18ba      	adds	r2, r7, r2
 800090e:	2140      	movs	r1, #64	; 0x40
 8000910:	7812      	ldrb	r2, [r2, #0]
 8000912:	545a      	strb	r2, [r3, r1]
	_powerLevel = 0;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2241      	movs	r2, #65	; 0x41
 8000918:	2100      	movs	r1, #0
 800091a:	5499      	strb	r1, [r3, r2]
	_rssi = -127;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	227f      	movs	r2, #127	; 0x7f
 8000920:	4252      	negs	r2, r2
 8000922:	645a      	str	r2, [r3, #68]	; 0x44
	_ookEnabled = false;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	224b      	movs	r2, #75	; 0x4b
 8000928:	2100      	movs	r1, #0
 800092a:	5499      	strb	r1, [r3, r2]
	_autoReadRSSI = false;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	224a      	movs	r2, #74	; 0x4a
 8000930:	2100      	movs	r1, #0
 8000932:	5499      	strb	r1, [r3, r2]
	_dataMode = RFM69_DATA_MODE_PACKET;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	224c      	movs	r2, #76	; 0x4c
 8000938:	2100      	movs	r1, #0
 800093a:	5499      	strb	r1, [r3, r2]
	_dataGPIO = 0;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	2200      	movs	r2, #0
 8000940:	639a      	str	r2, [r3, #56]	; 0x38
	_dataPin = 0;
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2200      	movs	r2, #0
 8000946:	879a      	strh	r2, [r3, #60]	; 0x3c
	_highPowerSettings = false;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	224d      	movs	r2, #77	; 0x4d
 800094c:	2100      	movs	r1, #0
 800094e:	5499      	strb	r1, [r3, r2]
	_csmaEnabled = false;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	224e      	movs	r2, #78	; 0x4e
 8000954:	2100      	movs	r1, #0
 8000956:	5499      	strb	r1, [r3, r2]
	_rxBufferLength = 0;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	2290      	movs	r2, #144	; 0x90
 800095c:	2100      	movs	r1, #0
 800095e:	5099      	str	r1, [r3, r2]

}
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	0018      	movs	r0, r3
 8000964:	46bd      	mov	sp, r7
 8000966:	b004      	add	sp, #16
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	40013000 	.word	0x40013000

08000970 <_ZN5RFM697setCSMAEb>:
	return _rssi;
}
void RFM69::setAutoreadRSSI(bool enable) {
	_autoReadRSSI = enable;
}
void RFM69::setCSMA(bool enable) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	000a      	movs	r2, r1
 800097a:	1cfb      	adds	r3, r7, #3
 800097c:	701a      	strb	r2, [r3, #0]
	_csmaEnabled = enable;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	1cfa      	adds	r2, r7, #3
 8000982:	214e      	movs	r1, #78	; 0x4e
 8000984:	7812      	ldrb	r2, [r2, #0]
 8000986:	545a      	strb	r2, [r3, r1]
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}

08000990 <_ZN5RFM695resetEv>:

void RFM69::reset() {
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	if (_resetGPIO == 0)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	2b00      	cmp	r3, #0
 800099e:	d029      	beq.n	80009f4 <_ZN5RFM695resetEv+0x64>
		return;

	_init = false;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	223e      	movs	r2, #62	; 0x3e
 80009a4:	2100      	movs	r1, #0
 80009a6:	5499      	strb	r1, [r3, r2]

	// generate reset impulse
	this->_resetGPIO->BSRR |= (1 << this->_resetPin); // Set
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	699a      	ldr	r2, [r3, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80009b2:	0019      	movs	r1, r3
 80009b4:	2301      	movs	r3, #1
 80009b6:	408b      	lsls	r3, r1
 80009b8:	0019      	movs	r1, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	430a      	orrs	r2, r1
 80009c0:	619a      	str	r2, [r3, #24]
	delay_ms(1);
 80009c2:	2001      	movs	r0, #1
 80009c4:	f001 f85e 	bl	8001a84 <_Z8delay_msj>
	this->_resetGPIO->BSRR |= ((1 << this->_resetPin) << 16U); // Reset
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009cc:	699a      	ldr	r2, [r3, #24]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80009d2:	0019      	movs	r1, r3
 80009d4:	2301      	movs	r3, #1
 80009d6:	408b      	lsls	r3, r1
 80009d8:	041b      	lsls	r3, r3, #16
 80009da:	0019      	movs	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e0:	430a      	orrs	r2, r1
 80009e2:	619a      	str	r2, [r3, #24]

	// wait until module is ready
	delay_ms(10);
 80009e4:	200a      	movs	r0, #10
 80009e6:	f001 f84d 	bl	8001a84 <_Z8delay_msj>

	_mode = RFM69_MODE_STANDBY;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	223f      	movs	r2, #63	; 0x3f
 80009ee:	2101      	movs	r1, #1
 80009f0:	5499      	strb	r1, [r3, r2]
 80009f2:	e000      	b.n	80009f6 <_ZN5RFM695resetEv+0x66>
		return;
 80009f4:	46c0      	nop			; (mov r8, r8)
}
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b002      	add	sp, #8
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_ZN5RFM694initEv>:

bool RFM69::init() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	// set base configuration
	setCustomConfig(rfm69_base_config, sizeof(rfm69_base_config) / 2);
 8000a04:	490c      	ldr	r1, [pc, #48]	; (8000a38 <_ZN5RFM694initEv+0x3c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2215      	movs	r2, #21
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 f984 	bl	8000d18 <_ZN5RFM6915setCustomConfigEPA2_Khj>

	// set PA and OCP settings according to RF module (normal/high power)
	setPASettings();
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	2100      	movs	r1, #0
 8000a14:	0018      	movs	r0, r3
 8000a16:	f000 f8b6 	bl	8000b86 <_ZN5RFM6913setPASettingsEh>

	// clear FIFO and flags
	clearFIFO();
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f000 f99d 	bl	8000d5c <_ZN5RFM699clearFIFOEv>

	_init = true;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	223e      	movs	r2, #62	; 0x3e
 8000a26:	2101      	movs	r1, #1
 8000a28:	5499      	strb	r1, [r3, r2]

	return _init;
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	223e      	movs	r2, #62	; 0x3e
 8000a2e:	5c9b      	ldrb	r3, [r3, r2]
}
 8000a30:	0018      	movs	r0, r3
 8000a32:	46bd      	mov	sp, r7
 8000a34:	b002      	add	sp, #8
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	0800288c 	.word	0x0800288c

08000a3c <_ZN5RFM6912readRegisterEh>:
	// set new bitrate
	writeRegister(0x03, bitrate >> 8);
	writeRegister(0x04, bitrate);
}

uint8_t RFM69::readRegister(uint8_t reg) {
 8000a3c:	b5b0      	push	{r4, r5, r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	000a      	movs	r2, r1
 8000a46:	1cfb      	adds	r3, r7, #3
 8000a48:	701a      	strb	r2, [r3, #0]

	uint8_t regval = 0;
 8000a4a:	240f      	movs	r4, #15
 8000a4c:	193b      	adds	r3, r7, r4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	701a      	strb	r2, [r3, #0]

	this->nCS_Low();
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fee0 	bl	800181a <_ZN3SPI7nCS_LowEv>
	this->transfer(reg & 0x7F);
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	1cfb      	adds	r3, r7, #3
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	227f      	movs	r2, #127	; 0x7f
 8000a62:	4013      	ands	r3, r2
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	0019      	movs	r1, r3
 8000a68:	f000 ff84 	bl	8001974 <_ZN3SPI8transferEh>
	regval = this->transfer(0);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	0025      	movs	r5, r4
 8000a70:	193c      	adds	r4, r7, r4
 8000a72:	2100      	movs	r1, #0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 ff7d 	bl	8001974 <_ZN3SPI8transferEh>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	7023      	strb	r3, [r4, #0]
	this->nCS_High();
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 fee0 	bl	8001846 <_ZN3SPI8nCS_HighEv>

	return regval;
 8000a86:	002c      	movs	r4, r5
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	781b      	ldrb	r3, [r3, #0]

}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b004      	add	sp, #16
 8000a92:	bdb0      	pop	{r4, r5, r7, pc}

08000a94 <_ZN5RFM6913writeRegisterEhh>:

void RFM69::writeRegister(uint8_t reg, uint8_t value) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	0008      	movs	r0, r1
 8000a9e:	0011      	movs	r1, r2
 8000aa0:	1cfb      	adds	r3, r7, #3
 8000aa2:	1c02      	adds	r2, r0, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	1cbb      	adds	r3, r7, #2
 8000aa8:	1c0a      	adds	r2, r1, #0
 8000aaa:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	this->nCS_Low();
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 feb3 	bl	800181a <_ZN3SPI7nCS_LowEv>
	this->transfer(reg | 0x80);
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	1cfb      	adds	r3, r7, #3
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2280      	movs	r2, #128	; 0x80
 8000abc:	4252      	negs	r2, r2
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	0019      	movs	r1, r3
 8000ac4:	f000 ff56 	bl	8001974 <_ZN3SPI8transferEh>
	this->transfer(value);
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	1cbb      	adds	r3, r7, #2
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	0019      	movs	r1, r3
 8000ad0:	0010      	movs	r0, r2
 8000ad2:	f000 ff4f 	bl	8001974 <_ZN3SPI8transferEh>
	this->nCS_High();
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 feb4 	bl	8001846 <_ZN3SPI8nCS_HighEv>

}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	b002      	add	sp, #8
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <_ZN5RFM697setModeE9RFM69Mode>:
void RFM69::chipUnselect() {

	this->nCS_High();
}

RFM69Mode RFM69::setMode(RFM69Mode mode) {
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	000a      	movs	r2, r1
 8000af0:	1cfb      	adds	r3, r7, #3
 8000af2:	701a      	strb	r2, [r3, #0]
	if ((mode == _mode) || (mode > RFM69_MODE_RX))
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	223f      	movs	r2, #63	; 0x3f
 8000af8:	5c9b      	ldrb	r3, [r3, r2]
 8000afa:	1cfa      	adds	r2, r7, #3
 8000afc:	7812      	ldrb	r2, [r2, #0]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d003      	beq.n	8000b0a <_ZN5RFM697setModeE9RFM69Mode+0x24>
 8000b02:	1cfb      	adds	r3, r7, #3
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	d903      	bls.n	8000b12 <_ZN5RFM697setModeE9RFM69Mode+0x2c>
		return _mode;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	223f      	movs	r2, #63	; 0x3f
 8000b0e:	5c9b      	ldrb	r3, [r3, r2]
 8000b10:	e035      	b.n	8000b7e <_ZN5RFM697setModeE9RFM69Mode+0x98>

	// set new mode
	writeRegister(0x01, mode << 2);
 8000b12:	1cfb      	adds	r3, r7, #3
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	b2da      	uxtb	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f7ff ffb8 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>

	// set special registers if this is a high power device (RFM69HW)
	if (true == _highPowerDevice) {
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2240      	movs	r2, #64	; 0x40
 8000b28:	5c9b      	ldrb	r3, [r3, r2]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d01f      	beq.n	8000b6e <_ZN5RFM697setModeE9RFM69Mode+0x88>
		switch (mode) {
 8000b2e:	1cfb      	adds	r3, r7, #3
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b03      	cmp	r3, #3
 8000b34:	d00d      	beq.n	8000b52 <_ZN5RFM697setModeE9RFM69Mode+0x6c>
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d000      	beq.n	8000b3c <_ZN5RFM697setModeE9RFM69Mode+0x56>
			if (true == _highPowerSettings)
				setHighPowerSettings(true);
			break;

		default:
			break;
 8000b3a:	e018      	b.n	8000b6e <_ZN5RFM697setModeE9RFM69Mode+0x88>
			if (true == _highPowerSettings)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	224d      	movs	r2, #77	; 0x4d
 8000b40:	5c9b      	ldrb	r3, [r3, r2]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d010      	beq.n	8000b68 <_ZN5RFM697setModeE9RFM69Mode+0x82>
				setHighPowerSettings(false);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	2100      	movs	r1, #0
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 f8b2 	bl	8000cb4 <_ZN5RFM6920setHighPowerSettingsEb>
			break;
 8000b50:	e00a      	b.n	8000b68 <_ZN5RFM697setModeE9RFM69Mode+0x82>
			if (true == _highPowerSettings)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	224d      	movs	r2, #77	; 0x4d
 8000b56:	5c9b      	ldrb	r3, [r3, r2]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d007      	beq.n	8000b6c <_ZN5RFM697setModeE9RFM69Mode+0x86>
				setHighPowerSettings(true);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2101      	movs	r1, #1
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 f8a7 	bl	8000cb4 <_ZN5RFM6920setHighPowerSettingsEb>
			break;
 8000b66:	e001      	b.n	8000b6c <_ZN5RFM697setModeE9RFM69Mode+0x86>
			break;
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	e000      	b.n	8000b6e <_ZN5RFM697setModeE9RFM69Mode+0x88>
			break;
 8000b6c:	46c0      	nop			; (mov r8, r8)
		}
	}

	_mode = mode;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	1cfa      	adds	r2, r7, #3
 8000b72:	213f      	movs	r1, #63	; 0x3f
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	545a      	strb	r2, [r3, r1]

	return _mode;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	223f      	movs	r2, #63	; 0x3f
 8000b7c:	5c9b      	ldrb	r3, [r3, r2]
}
 8000b7e:	0018      	movs	r0, r3
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <_ZN5RFM6913setPASettingsEh>:

void RFM69::setPASettings(uint8_t forcePA) {
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	000a      	movs	r2, r1
 8000b90:	1cfb      	adds	r3, r7, #3
 8000b92:	701a      	strb	r2, [r3, #0]
	// disable OCP for high power devices, enable otherwise
	writeRegister(0x13, 0x0A | (_highPowerDevice ? 0x00 : 0x10));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2240      	movs	r2, #64	; 0x40
 8000b98:	5c9b      	ldrb	r3, [r3, r2]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <_ZN5RFM6913setPASettingsEh+0x1c>
 8000b9e:	230a      	movs	r3, #10
 8000ba0:	e000      	b.n	8000ba4 <_ZN5RFM6913setPASettingsEh+0x1e>
 8000ba2:	231a      	movs	r3, #26
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	001a      	movs	r2, r3
 8000ba8:	2113      	movs	r1, #19
 8000baa:	f7ff ff73 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>

	if (0 == forcePA) {
 8000bae:	1cfb      	adds	r3, r7, #3
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d12b      	bne.n	8000c0e <_ZN5RFM6913setPASettingsEh+0x88>
		if (true == _highPowerDevice) {
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2240      	movs	r2, #64	; 0x40
 8000bba:	5c9b      	ldrb	r3, [r3, r2]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d012      	beq.n	8000be6 <_ZN5RFM6913setPASettingsEh+0x60>
			// enable PA1 only
			writeRegister(0x11, (readRegister(0x11) & 0x1F) | 0x40);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2111      	movs	r1, #17
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f7ff ff39 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 8000bca:	0003      	movs	r3, r0
 8000bcc:	001a      	movs	r2, r3
 8000bce:	231f      	movs	r3, #31
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2240      	movs	r2, #64	; 0x40
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2111      	movs	r1, #17
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff ff58 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>
		_highPowerSettings = (forcePA & 0x08) ? true : false;
		setHighPowerSettings(_highPowerSettings);

		writeRegister(0x11, (readRegister(0x11) & 0x1F) | pa);
	}
}
 8000be4:	e062      	b.n	8000cac <_ZN5RFM6913setPASettingsEh+0x126>
			writeRegister(0x11, (readRegister(0x11) & 0x1F) | 0x80);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2111      	movs	r1, #17
 8000bea:	0018      	movs	r0, r3
 8000bec:	f7ff ff26 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	001a      	movs	r2, r3
 8000bf4:	231f      	movs	r3, #31
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2280      	movs	r2, #128	; 0x80
 8000bfc:	4252      	negs	r2, r2
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2111      	movs	r1, #17
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff ff44 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>
}
 8000c0c:	e04e      	b.n	8000cac <_ZN5RFM6913setPASettingsEh+0x126>
		uint8_t pa = 0;
 8000c0e:	230f      	movs	r3, #15
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	2200      	movs	r2, #0
 8000c14:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x01)
 8000c16:	1cfb      	adds	r3, r7, #3
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	d007      	beq.n	8000c30 <_ZN5RFM6913setPASettingsEh+0xaa>
			pa |= 0x80;
 8000c20:	220f      	movs	r2, #15
 8000c22:	18bb      	adds	r3, r7, r2
 8000c24:	18ba      	adds	r2, r7, r2
 8000c26:	7812      	ldrb	r2, [r2, #0]
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	4249      	negs	r1, r1
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x02)
 8000c30:	1cfb      	adds	r3, r7, #3
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	2202      	movs	r2, #2
 8000c36:	4013      	ands	r3, r2
 8000c38:	d006      	beq.n	8000c48 <_ZN5RFM6913setPASettingsEh+0xc2>
			pa |= 0x40;
 8000c3a:	220f      	movs	r2, #15
 8000c3c:	18bb      	adds	r3, r7, r2
 8000c3e:	18ba      	adds	r2, r7, r2
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	2140      	movs	r1, #64	; 0x40
 8000c44:	430a      	orrs	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
		if (forcePA & 0x04)
 8000c48:	1cfb      	adds	r3, r7, #3
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	4013      	ands	r3, r2
 8000c50:	d006      	beq.n	8000c60 <_ZN5RFM6913setPASettingsEh+0xda>
			pa |= 0x20;
 8000c52:	220f      	movs	r2, #15
 8000c54:	18bb      	adds	r3, r7, r2
 8000c56:	18ba      	adds	r2, r7, r2
 8000c58:	7812      	ldrb	r2, [r2, #0]
 8000c5a:	2120      	movs	r1, #32
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	701a      	strb	r2, [r3, #0]
		_highPowerSettings = (forcePA & 0x08) ? true : false;
 8000c60:	1cfb      	adds	r3, r7, #3
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	10db      	asrs	r3, r3, #3
 8000c66:	1c1a      	adds	r2, r3, #0
 8000c68:	2301      	movs	r3, #1
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	b2d9      	uxtb	r1, r3
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	224d      	movs	r2, #77	; 0x4d
 8000c72:	5499      	strb	r1, [r3, r2]
		setHighPowerSettings(_highPowerSettings);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	224d      	movs	r2, #77	; 0x4d
 8000c78:	5c9a      	ldrb	r2, [r3, r2]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f818 	bl	8000cb4 <_ZN5RFM6920setHighPowerSettingsEb>
		writeRegister(0x11, (readRegister(0x11) & 0x1F) | pa);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2111      	movs	r1, #17
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff fed7 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 8000c8e:	0003      	movs	r3, r0
 8000c90:	001a      	movs	r2, r3
 8000c92:	231f      	movs	r3, #31
 8000c94:	4013      	ands	r3, r2
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	230f      	movs	r3, #15
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b2da      	uxtb	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2111      	movs	r1, #17
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff fef4 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>
}
 8000cac:	46c0      	nop			; (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b004      	add	sp, #16
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <_ZN5RFM6920setHighPowerSettingsEb>:
	writeRegister(0x11, (readRegister(0x11) & 0xE0) | power);

	_powerLevel = power;
}

void RFM69::setHighPowerSettings(bool enable) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	000a      	movs	r2, r1
 8000cbe:	1cfb      	adds	r3, r7, #3
 8000cc0:	701a      	strb	r2, [r3, #0]
	// enabling only works if this is a high power device
	if (true == enable && false == _highPowerDevice)
 8000cc2:	1cfb      	adds	r3, r7, #3
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d00a      	beq.n	8000ce0 <_ZN5RFM6920setHighPowerSettingsEb+0x2c>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2240      	movs	r2, #64	; 0x40
 8000cce:	5c9b      	ldrb	r3, [r3, r2]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	4053      	eors	r3, r2
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d002      	beq.n	8000ce0 <_ZN5RFM6920setHighPowerSettingsEb+0x2c>
		enable = false;
 8000cda:	1cfb      	adds	r3, r7, #3
 8000cdc:	2200      	movs	r2, #0
 8000cde:	701a      	strb	r2, [r3, #0]

	writeRegister(0x5A, enable ? 0x5D : 0x55);
 8000ce0:	1cfb      	adds	r3, r7, #3
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <_ZN5RFM6920setHighPowerSettingsEb+0x38>
 8000ce8:	235d      	movs	r3, #93	; 0x5d
 8000cea:	e000      	b.n	8000cee <_ZN5RFM6920setHighPowerSettingsEb+0x3a>
 8000cec:	2355      	movs	r3, #85	; 0x55
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	001a      	movs	r2, r3
 8000cf2:	215a      	movs	r1, #90	; 0x5a
 8000cf4:	f7ff fece 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>
	writeRegister(0x5C, enable ? 0x7C : 0x70);
 8000cf8:	1cfb      	adds	r3, r7, #3
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <_ZN5RFM6920setHighPowerSettingsEb+0x50>
 8000d00:	237c      	movs	r3, #124	; 0x7c
 8000d02:	e000      	b.n	8000d06 <_ZN5RFM6920setHighPowerSettingsEb+0x52>
 8000d04:	2370      	movs	r3, #112	; 0x70
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	001a      	movs	r2, r3
 8000d0a:	215c      	movs	r1, #92	; 0x5c
 8000d0c:	f7ff fec2 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b002      	add	sp, #8
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <_ZN5RFM6915setCustomConfigEPA2_Khj>:

void RFM69::setCustomConfig(const uint8_t config[][2], unsigned int length) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60f8      	str	r0, [r7, #12]
 8000d20:	60b9      	str	r1, [r7, #8]
 8000d22:	607a      	str	r2, [r7, #4]
	for (unsigned int i = 0; i < length; i++) {
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697a      	ldr	r2, [r7, #20]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d211      	bcs.n	8000d54 <_ZN5RFM6915setCustomConfigEPA2_Khj+0x3c>
		writeRegister(config[i][0], config[i][1]);
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	18d3      	adds	r3, r2, r3
 8000d38:	7819      	ldrb	r1, [r3, #0]
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	68ba      	ldr	r2, [r7, #8]
 8000d40:	18d3      	adds	r3, r2, r3
 8000d42:	785a      	ldrb	r2, [r3, #1]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	0018      	movs	r0, r3
 8000d48:	f7ff fea4 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>
	for (unsigned int i = 0; i < length; i++) {
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	617b      	str	r3, [r7, #20]
 8000d52:	e7e9      	b.n	8000d28 <_ZN5RFM6915setCustomConfigEPA2_Khj+0x10>
	}
}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b006      	add	sp, #24
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_ZN5RFM699clearFIFOEv>:

void RFM69::clearFIFO() {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	// clear flags and FIFO
	writeRegister(0x28, 0x10);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2210      	movs	r2, #16
 8000d68:	2128      	movs	r1, #40	; 0x28
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fe92 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>
}
 8000d70:	46c0      	nop			; (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_ZN5RFM6916waitForModeReadyEv>:

void RFM69::waitForModeReady() {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	uint32_t timeEntry = mstimer_get();
 8000d80:	f000 feac 	bl	8001adc <_Z11mstimer_getv>
 8000d84:	0003      	movs	r3, r0
 8000d86:	60fb      	str	r3, [r7, #12]
	while (((readRegister(0x27) & 0x80) == 0)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2127      	movs	r1, #39	; 0x27
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f7ff fe55 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 8000d92:	0003      	movs	r3, r0
 8000d94:	b25b      	sxtb	r3, r3
			&& ((mstimer_get() - timeEntry) < TIMEOUT_MODE_READY))
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	db08      	blt.n	8000dac <_ZN5RFM6916waitForModeReadyEv+0x34>
 8000d9a:	f000 fe9f 	bl	8001adc <_Z11mstimer_getv>
 8000d9e:	0002      	movs	r2, r0
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	2b63      	cmp	r3, #99	; 0x63
 8000da6:	d801      	bhi.n	8000dac <_ZN5RFM6916waitForModeReadyEv+0x34>
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <_ZN5RFM6916waitForModeReadyEv+0x36>
 8000dac:	2300      	movs	r3, #0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d000      	beq.n	8000db4 <_ZN5RFM6916waitForModeReadyEv+0x3c>
	while (((readRegister(0x27) & 0x80) == 0)
 8000db2:	e7e9      	b.n	8000d88 <_ZN5RFM6916waitForModeReadyEv+0x10>
		;
}
 8000db4:	46c0      	nop			; (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b004      	add	sp, #16
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <_ZN5RFM695sleepEv>:

void RFM69::sleep() {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
	setMode(RFM69_MODE_SLEEP);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff fe8c 	bl	8000ae6 <_ZN5RFM697setModeE9RFM69Mode>
}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <_ZN5RFM697receiveEPcj>:

int RFM69::receive(char *data, unsigned int dataLength) {
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b086      	sub	sp, #24
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	60f8      	str	r0, [r7, #12]
 8000dde:	60b9      	str	r1, [r7, #8]
 8000de0:	607a      	str	r2, [r7, #4]
	// check if there is a packet in the internal buffer and copy it
	if (_rxBufferLength > 0) {
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	2290      	movs	r2, #144	; 0x90
 8000de6:	589b      	ldr	r3, [r3, r2]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d011      	beq.n	8000e10 <_ZN5RFM697receiveEPcj+0x3a>
		// copy only until dataLength, even if packet in local buffer is actually larger
		memcpy(data, _rxBuffer, dataLength);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	334f      	adds	r3, #79	; 0x4f
 8000df0:	0019      	movs	r1, r3
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 ff34 	bl	8001c64 <memcpy>

		unsigned int bytesRead = _rxBufferLength;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2290      	movs	r2, #144	; 0x90
 8000e00:	589b      	ldr	r3, [r3, r2]
 8000e02:	617b      	str	r3, [r7, #20]

		// empty local buffer
		_rxBufferLength = 0;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	2290      	movs	r2, #144	; 0x90
 8000e08:	2100      	movs	r1, #0
 8000e0a:	5099      	str	r1, [r3, r2]

		return bytesRead;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	e006      	b.n	8000e1e <_ZN5RFM697receiveEPcj+0x48>
	} else {
		// regular receive
		return _receive(data, dataLength);
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	68b9      	ldr	r1, [r7, #8]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	0018      	movs	r0, r3
 8000e18:	f000 f805 	bl	8000e26 <_ZN5RFM698_receiveEPcj>
 8000e1c:	0003      	movs	r3, r0
	}
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b006      	add	sp, #24
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_ZN5RFM698_receiveEPcj>:

int RFM69::_receive(char *data, unsigned int dataLength) {
 8000e26:	b590      	push	{r4, r7, lr}
 8000e28:	b087      	sub	sp, #28
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	60f8      	str	r0, [r7, #12]
 8000e2e:	60b9      	str	r1, [r7, #8]
 8000e30:	607a      	str	r2, [r7, #4]
	// go to RX mode if not already in this mode
	if (RFM69_MODE_RX != _mode) {
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	223f      	movs	r2, #63	; 0x3f
 8000e36:	5c9b      	ldrb	r3, [r3, r2]
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d008      	beq.n	8000e4e <_ZN5RFM698_receiveEPcj+0x28>
		setMode(RFM69_MODE_RX);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2104      	movs	r1, #4
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff fe50 	bl	8000ae6 <_ZN5RFM697setModeE9RFM69Mode>
		waitForModeReady();
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f7ff ff95 	bl	8000d78 <_ZN5RFM6916waitForModeReadyEv>
	}

	// check for flag PayloadReady
	if (readRegister(0x28) & 0x04) {
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2128      	movs	r1, #40	; 0x28
 8000e52:	0018      	movs	r0, r3
 8000e54:	f7ff fdf2 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	001a      	movs	r2, r3
 8000e5c:	2304      	movs	r3, #4
 8000e5e:	4013      	ands	r3, r2
 8000e60:	1e5a      	subs	r2, r3, #1
 8000e62:	4193      	sbcs	r3, r2
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d03a      	beq.n	8000ee0 <_ZN5RFM698_receiveEPcj+0xba>
		// go to standby before reading data
		setMode(RFM69_MODE_STANDBY);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f7ff fe39 	bl	8000ae6 <_ZN5RFM697setModeE9RFM69Mode>

		// get FIFO content
		unsigned int bytesRead = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]

		// read until FIFO is empty or buffer length exceeded
		while ((readRegister(0x28) & 0x40) && (bytesRead < dataLength)) {
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2128      	movs	r1, #40	; 0x28
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f7ff fddd 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 8000e82:	0003      	movs	r3, r0
 8000e84:	001a      	movs	r2, r3
 8000e86:	2340      	movs	r3, #64	; 0x40
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d005      	beq.n	8000e98 <_ZN5RFM698_receiveEPcj+0x72>
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d201      	bcs.n	8000e98 <_ZN5RFM698_receiveEPcj+0x72>
 8000e94:	2301      	movs	r3, #1
 8000e96:	e000      	b.n	8000e9a <_ZN5RFM698_receiveEPcj+0x74>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d00d      	beq.n	8000eba <_ZN5RFM698_receiveEPcj+0x94>
			// read next byte
			data[bytesRead] = readRegister(0x00);
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	18d4      	adds	r4, r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff fdc7 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	7023      	strb	r3, [r4, #0]
			bytesRead++;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
		while ((readRegister(0x28) & 0x40) && (bytesRead < dataLength)) {
 8000eb8:	e7de      	b.n	8000e78 <_ZN5RFM698_receiveEPcj+0x52>
		}

		// automatically read RSSI if requested
		if (true == _autoReadRSSI) {
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	224a      	movs	r2, #74	; 0x4a
 8000ebe:	5c9b      	ldrb	r3, [r3, r2]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d003      	beq.n	8000ecc <_ZN5RFM698_receiveEPcj+0xa6>
			readRSSI();
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 f832 	bl	8000f30 <_ZN5RFM698readRSSIEv>
		}

		// go back to RX mode
		setMode(RFM69_MODE_RX);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2104      	movs	r1, #4
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f7ff fe08 	bl	8000ae6 <_ZN5RFM697setModeE9RFM69Mode>
		// todo: wait needed?
		 delay_ms(100);
 8000ed6:	2064      	movs	r0, #100	; 0x64
 8000ed8:	f000 fdd4 	bl	8001a84 <_Z8delay_msj>
		return bytesRead;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	e000      	b.n	8000ee2 <_ZN5RFM698_receiveEPcj+0xbc>
	}

	else

		return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b007      	add	sp, #28
 8000ee8:	bd90      	pop	{r4, r7, pc}

08000eea <_ZN5RFM6917waitForPacketSentEv>:
	writeRegister(0x3D, (readRegister(0x3D) & 0xFE) | (enable ? 1 : 0));

	return enable;
}

void RFM69::waitForPacketSent() {
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b084      	sub	sp, #16
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
	uint32_t timeEntry = mstimer_get();
 8000ef2:	f000 fdf3 	bl	8001adc <_Z11mstimer_getv>
 8000ef6:	0003      	movs	r3, r0
 8000ef8:	60fb      	str	r3, [r7, #12]
	while (((readRegister(0x28) & 0x08) == 0)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2128      	movs	r1, #40	; 0x28
 8000efe:	0018      	movs	r0, r3
 8000f00:	f7ff fd9c 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 8000f04:	0003      	movs	r3, r0
 8000f06:	001a      	movs	r2, r3
 8000f08:	2308      	movs	r3, #8
 8000f0a:	4013      	ands	r3, r2
			&& ((mstimer_get() - timeEntry) < TIMEOUT_PACKET_SENT))
 8000f0c:	d108      	bne.n	8000f20 <_ZN5RFM6917waitForPacketSentEv+0x36>
 8000f0e:	f000 fde5 	bl	8001adc <_Z11mstimer_getv>
 8000f12:	0002      	movs	r2, r0
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	2b63      	cmp	r3, #99	; 0x63
 8000f1a:	d801      	bhi.n	8000f20 <_ZN5RFM6917waitForPacketSentEv+0x36>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <_ZN5RFM6917waitForPacketSentEv+0x38>
 8000f20:	2300      	movs	r3, #0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d000      	beq.n	8000f28 <_ZN5RFM6917waitForPacketSentEv+0x3e>
	while (((readRegister(0x28) & 0x08) == 0)
 8000f26:	e7e8      	b.n	8000efa <_ZN5RFM6917waitForPacketSentEv+0x10>
		;
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b004      	add	sp, #16
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <_ZN5RFM698readRSSIEv>:
	else {
	}

}

int RFM69::readRSSI() {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
	_rssi = -readRegister(0x24) / 2;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2124      	movs	r1, #36	; 0x24
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff fd7d 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 8000f42:	0003      	movs	r3, r0
 8000f44:	425b      	negs	r3, r3
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	da00      	bge.n	8000f4c <_ZN5RFM698readRSSIEv+0x1c>
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	105b      	asrs	r3, r3, #1
 8000f4e:	001a      	movs	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	645a      	str	r2, [r3, #68]	; 0x44

	return _rssi;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8000f58:	0018      	movs	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b002      	add	sp, #8
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <_ZN5RFM6911setPowerDBmEa>:
	}

	_dataMode = dataMode;
}

int RFM69::setPowerDBm(int8_t dBm) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	000a      	movs	r2, r1
 8000f6a:	1cfb      	adds	r3, r7, #3
 8000f6c:	701a      	strb	r2, [r3, #0]
	/* Output power of module is from -18 dBm to +13 dBm
	 * in "low" power devices, -2 dBm to +20 dBm in high power devices */
	if (dBm < -18 || dBm > 20)
 8000f6e:	1cfb      	adds	r3, r7, #3
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	3312      	adds	r3, #18
 8000f76:	db04      	blt.n	8000f82 <_ZN5RFM6911setPowerDBmEa+0x22>
 8000f78:	1cfb      	adds	r3, r7, #3
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b25b      	sxtb	r3, r3
 8000f7e:	2b14      	cmp	r3, #20
 8000f80:	dd02      	ble.n	8000f88 <_ZN5RFM6911setPowerDBmEa+0x28>
		return -1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	425b      	negs	r3, r3
 8000f86:	e0a5      	b.n	80010d4 <_ZN5RFM6911setPowerDBmEa+0x174>

	if (false == _highPowerDevice && dBm > 13)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2240      	movs	r2, #64	; 0x40
 8000f8c:	5c9b      	ldrb	r3, [r3, r2]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	4053      	eors	r3, r2
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d007      	beq.n	8000fa8 <_ZN5RFM6911setPowerDBmEa+0x48>
 8000f98:	1cfb      	adds	r3, r7, #3
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	2b0d      	cmp	r3, #13
 8000fa0:	dd02      	ble.n	8000fa8 <_ZN5RFM6911setPowerDBmEa+0x48>
		return -1;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	425b      	negs	r3, r3
 8000fa6:	e095      	b.n	80010d4 <_ZN5RFM6911setPowerDBmEa+0x174>

	if (true == _highPowerDevice && dBm < -2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2240      	movs	r2, #64	; 0x40
 8000fac:	5c9b      	ldrb	r3, [r3, r2]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <_ZN5RFM6911setPowerDBmEa+0x62>
 8000fb2:	1cfb      	adds	r3, r7, #3
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b25b      	sxtb	r3, r3
 8000fb8:	3302      	adds	r3, #2
 8000fba:	da02      	bge.n	8000fc2 <_ZN5RFM6911setPowerDBmEa+0x62>
		return -1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	e088      	b.n	80010d4 <_ZN5RFM6911setPowerDBmEa+0x174>

	uint8_t powerLevel = 0;
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]

	if (false == _highPowerDevice) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2240      	movs	r2, #64	; 0x40
 8000fce:	5c9b      	ldrb	r3, [r3, r2]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4053      	eors	r3, r2
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d011      	beq.n	8000ffe <_ZN5RFM6911setPowerDBmEa+0x9e>
		// only PA0 can be used
		powerLevel = dBm + 18;
 8000fda:	1cfb      	adds	r3, r7, #3
 8000fdc:	781a      	ldrb	r2, [r3, #0]
 8000fde:	210f      	movs	r1, #15
 8000fe0:	187b      	adds	r3, r7, r1
 8000fe2:	3212      	adds	r2, #18
 8000fe4:	701a      	strb	r2, [r3, #0]

		// enable PA0 only
		writeRegister(0x11, 0x80 | powerLevel);
 8000fe6:	187b      	adds	r3, r7, r1
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2280      	movs	r2, #128	; 0x80
 8000fec:	4252      	negs	r2, r2
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	b2da      	uxtb	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2111      	movs	r1, #17
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff fd4c 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>
 8000ffc:	e069      	b.n	80010d2 <_ZN5RFM6911setPowerDBmEa+0x172>
	} else {
		if (dBm >= -2 && dBm <= 13) {
 8000ffe:	1cfb      	adds	r3, r7, #3
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b25b      	sxtb	r3, r3
 8001004:	3302      	adds	r3, #2
 8001006:	db21      	blt.n	800104c <_ZN5RFM6911setPowerDBmEa+0xec>
 8001008:	1cfb      	adds	r3, r7, #3
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	b25b      	sxtb	r3, r3
 800100e:	2b0d      	cmp	r3, #13
 8001010:	dc1c      	bgt.n	800104c <_ZN5RFM6911setPowerDBmEa+0xec>
			// use PA1 on pin PA_BOOST
			powerLevel = dBm + 18;
 8001012:	1cfb      	adds	r3, r7, #3
 8001014:	781a      	ldrb	r2, [r3, #0]
 8001016:	210f      	movs	r1, #15
 8001018:	187b      	adds	r3, r7, r1
 800101a:	3212      	adds	r2, #18
 800101c:	701a      	strb	r2, [r3, #0]

			// enable PA1 only
			writeRegister(0x11, 0x40 | powerLevel);
 800101e:	187b      	adds	r3, r7, r1
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2240      	movs	r2, #64	; 0x40
 8001024:	4313      	orrs	r3, r2
 8001026:	b2da      	uxtb	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2111      	movs	r1, #17
 800102c:	0018      	movs	r0, r3
 800102e:	f7ff fd31 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>

			// disable high power settings
			_highPowerSettings = false;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	224d      	movs	r2, #77	; 0x4d
 8001036:	2100      	movs	r1, #0
 8001038:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	224d      	movs	r2, #77	; 0x4d
 800103e:	5c9a      	ldrb	r2, [r3, r2]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	0011      	movs	r1, r2
 8001044:	0018      	movs	r0, r3
 8001046:	f7ff fe35 	bl	8000cb4 <_ZN5RFM6920setHighPowerSettingsEb>
 800104a:	e042      	b.n	80010d2 <_ZN5RFM6911setPowerDBmEa+0x172>
		} else if (dBm > 13 && dBm <= 17) {
 800104c:	1cfb      	adds	r3, r7, #3
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	2b0d      	cmp	r3, #13
 8001054:	dd21      	ble.n	800109a <_ZN5RFM6911setPowerDBmEa+0x13a>
 8001056:	1cfb      	adds	r3, r7, #3
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	b25b      	sxtb	r3, r3
 800105c:	2b11      	cmp	r3, #17
 800105e:	dc1c      	bgt.n	800109a <_ZN5RFM6911setPowerDBmEa+0x13a>
			// use PA1 and PA2 combined on pin PA_BOOST
			powerLevel = dBm + 14;
 8001060:	1cfb      	adds	r3, r7, #3
 8001062:	781a      	ldrb	r2, [r3, #0]
 8001064:	210f      	movs	r1, #15
 8001066:	187b      	adds	r3, r7, r1
 8001068:	320e      	adds	r2, #14
 800106a:	701a      	strb	r2, [r3, #0]

			// enable PA1+PA2
			writeRegister(0x11, 0x60 | powerLevel);
 800106c:	187b      	adds	r3, r7, r1
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2260      	movs	r2, #96	; 0x60
 8001072:	4313      	orrs	r3, r2
 8001074:	b2da      	uxtb	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2111      	movs	r1, #17
 800107a:	0018      	movs	r0, r3
 800107c:	f7ff fd0a 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>

			// disable high power settings
			_highPowerSettings = false;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	224d      	movs	r2, #77	; 0x4d
 8001084:	2100      	movs	r1, #0
 8001086:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	224d      	movs	r2, #77	; 0x4d
 800108c:	5c9a      	ldrb	r2, [r3, r2]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	0011      	movs	r1, r2
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff fe0e 	bl	8000cb4 <_ZN5RFM6920setHighPowerSettingsEb>
 8001098:	e01b      	b.n	80010d2 <_ZN5RFM6911setPowerDBmEa+0x172>
		} else {
			// output power from 18 dBm to 20 dBm, use PA1+PA2 with high power settings
			powerLevel = dBm + 11;
 800109a:	1cfb      	adds	r3, r7, #3
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	210f      	movs	r1, #15
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	320b      	adds	r2, #11
 80010a4:	701a      	strb	r2, [r3, #0]

			// enable PA1+PA2
			writeRegister(0x11, 0x60 | powerLevel);
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2260      	movs	r2, #96	; 0x60
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2111      	movs	r1, #17
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff fced 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>

			// enable high power settings
			_highPowerSettings = true;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	224d      	movs	r2, #77	; 0x4d
 80010be:	2101      	movs	r1, #1
 80010c0:	5499      	strb	r1, [r3, r2]
			setHighPowerSettings(_highPowerSettings);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	224d      	movs	r2, #77	; 0x4d
 80010c6:	5c9a      	ldrb	r2, [r3, r2]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff fdf1 	bl	8000cb4 <_ZN5RFM6920setHighPowerSettingsEb>
		}
	}

	return 0;
 80010d2:	2300      	movs	r3, #0
}
 80010d4:	0018      	movs	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	b004      	add	sp, #16
 80010da:	bd80      	pop	{r7, pc}

080010dc <_ZN5RFM6911channelFreeEv>:

bool RFM69::channelFree() {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	if (readRSSI() < CSMA_RSSI_THRESHOLD) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff ff22 	bl	8000f30 <_ZN5RFM698readRSSIEv>
 80010ec:	0003      	movs	r3, r0
 80010ee:	2201      	movs	r2, #1
 80010f0:	3355      	adds	r3, #85	; 0x55
 80010f2:	db01      	blt.n	80010f8 <_ZN5RFM6911channelFreeEv+0x1c>
 80010f4:	2300      	movs	r3, #0
 80010f6:	1c1a      	adds	r2, r3, #0
 80010f8:	b2d3      	uxtb	r3, r2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <_ZN5RFM6911channelFreeEv+0x26>
		return true;
 80010fe:	2301      	movs	r3, #1
 8001100:	e000      	b.n	8001104 <_ZN5RFM6911channelFreeEv+0x28>
	} else {
		return false;
 8001102:	2300      	movs	r3, #0
	}
}
 8001104:	0018      	movs	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	b002      	add	sp, #8
 800110a:	bd80      	pop	{r7, pc}

0800110c <_ZN5RFM694sendEPKvj>:

int RFM69::send(const void *data, unsigned int dataLength) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
// switch to standby and wait for mode ready, if not in sleep mode
	if (RFM69_MODE_SLEEP != _mode) {
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	223f      	movs	r2, #63	; 0x3f
 800111c:	5c9b      	ldrb	r3, [r3, r2]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d008      	beq.n	8001134 <_ZN5RFM694sendEPKvj+0x28>
		setMode(RFM69_MODE_STANDBY);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2101      	movs	r1, #1
 8001126:	0018      	movs	r0, r3
 8001128:	f7ff fcdd 	bl	8000ae6 <_ZN5RFM697setModeE9RFM69Mode>
		waitForModeReady();
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	0018      	movs	r0, r3
 8001130:	f7ff fe22 	bl	8000d78 <_ZN5RFM6916waitForModeReadyEv>
	}

	// clear FIFO to remove old data and clear flags
	clearFIFO();
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	0018      	movs	r0, r3
 8001138:	f7ff fe10 	bl	8000d5c <_ZN5RFM699clearFIFOEv>

	// limit max payload
	if (dataLength > RFM69_MAX_PAYLOAD)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b40      	cmp	r3, #64	; 0x40
 8001140:	d901      	bls.n	8001146 <_ZN5RFM694sendEPKvj+0x3a>
		dataLength = RFM69_MAX_PAYLOAD;
 8001142:	2340      	movs	r3, #64	; 0x40
 8001144:	607b      	str	r3, [r7, #4]

	// payload must be available
	if (0 == dataLength)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d101      	bne.n	8001150 <_ZN5RFM694sendEPKvj+0x44>
		return 0;
 800114c:	2300      	movs	r3, #0
 800114e:	e0d4      	b.n	80012fa <_ZN5RFM694sendEPKvj+0x1ee>

	/* Wait for a free channel, if CSMA/CA algorithm is enabled.
	 * This takes around 1,4 ms to finish if channel is free */
	if (true == _csmaEnabled) {
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	224e      	movs	r2, #78	; 0x4e
 8001154:	5c9b      	ldrb	r3, [r3, r2]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d100      	bne.n	800115c <_ZN5RFM694sendEPKvj+0x50>
 800115a:	e099      	b.n	8001290 <_ZN5RFM694sendEPKvj+0x184>
		// Restart RX
		writeRegister(0x3D, (readRegister(0x3D) & 0xFB) | 0x20);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	213d      	movs	r1, #61	; 0x3d
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff fc6b 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 8001166:	0003      	movs	r3, r0
 8001168:	001a      	movs	r2, r3
 800116a:	2324      	movs	r3, #36	; 0x24
 800116c:	439a      	bics	r2, r3
 800116e:	0013      	movs	r3, r2
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2220      	movs	r2, #32
 8001174:	4313      	orrs	r3, r2
 8001176:	b2da      	uxtb	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	213d      	movs	r1, #61	; 0x3d
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff fc89 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>

		// switch to RX mode
		setMode(RFM69_MODE_RX);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	2104      	movs	r1, #4
 8001186:	0018      	movs	r0, r3
 8001188:	f7ff fcad 	bl	8000ae6 <_ZN5RFM697setModeE9RFM69Mode>

		// wait until RSSI sampling is done; otherwise, 0xFF (-127 dBm) is read

		// RSSI sampling phase takes ~960 µs after switch from standby to RX
		uint32_t timeEntry = mstimer_get();
 800118c:	f000 fca6 	bl	8001adc <_Z11mstimer_getv>
 8001190:	0003      	movs	r3, r0
 8001192:	61bb      	str	r3, [r7, #24]
		while (((readRegister(0x23) & 0x02) == 0)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2123      	movs	r1, #35	; 0x23
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff fc4f 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 800119e:	0003      	movs	r3, r0
 80011a0:	001a      	movs	r2, r3
 80011a2:	2302      	movs	r3, #2
 80011a4:	4013      	ands	r3, r2
				&& ((mstimer_get() - timeEntry) < 10))
 80011a6:	d108      	bne.n	80011ba <_ZN5RFM694sendEPKvj+0xae>
 80011a8:	f000 fc98 	bl	8001adc <_Z11mstimer_getv>
 80011ac:	0002      	movs	r2, r0
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b09      	cmp	r3, #9
 80011b4:	d801      	bhi.n	80011ba <_ZN5RFM694sendEPKvj+0xae>
 80011b6:	2301      	movs	r3, #1
 80011b8:	e000      	b.n	80011bc <_ZN5RFM694sendEPKvj+0xb0>
 80011ba:	2300      	movs	r3, #0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d000      	beq.n	80011c2 <_ZN5RFM694sendEPKvj+0xb6>
		while (((readRegister(0x23) & 0x02) == 0)
 80011c0:	e7e8      	b.n	8001194 <_ZN5RFM694sendEPKvj+0x88>
			;

		while ((false == channelFree())
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff89 	bl	80010dc <_ZN5RFM6911channelFreeEv>
 80011ca:	1e03      	subs	r3, r0, #0
				&& ((mstimer_get() - timeEntry) < TIMEOUT_CSMA_READY)) {
 80011cc:	d10a      	bne.n	80011e4 <_ZN5RFM694sendEPKvj+0xd8>
 80011ce:	f000 fc85 	bl	8001adc <_Z11mstimer_getv>
 80011d2:	0002      	movs	r2, r0
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	1ad2      	subs	r2, r2, r3
 80011d8:	23f4      	movs	r3, #244	; 0xf4
 80011da:	33ff      	adds	r3, #255	; 0xff
 80011dc:	429a      	cmp	r2, r3
 80011de:	d801      	bhi.n	80011e4 <_ZN5RFM694sendEPKvj+0xd8>
 80011e0:	2301      	movs	r3, #1
 80011e2:	e000      	b.n	80011e6 <_ZN5RFM694sendEPKvj+0xda>
 80011e4:	2300      	movs	r3, #0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d04d      	beq.n	8001286 <_ZN5RFM694sendEPKvj+0x17a>
			// wait for a random time before checking again
			delay_ms(rand() % 10);
 80011ea:	f000 fd4d 	bl	8001c88 <rand>
 80011ee:	0003      	movs	r3, r0
 80011f0:	210a      	movs	r1, #10
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff f8f8 	bl	80003e8 <__aeabi_idivmod>
 80011f8:	000b      	movs	r3, r1
 80011fa:	0018      	movs	r0, r3
 80011fc:	f000 fc42 	bl	8001a84 <_Z8delay_msj>

			/* try to receive packets while waiting for a free channel
			 * and put them into a temporary buffer */
			int bytesRead;
			if ((bytesRead = _receive(_rxBuffer, RFM69_MAX_PAYLOAD)) > 0) {
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	334f      	adds	r3, #79	; 0x4f
 8001204:	0019      	movs	r1, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2240      	movs	r2, #64	; 0x40
 800120a:	0018      	movs	r0, r3
 800120c:	f7ff fe0b 	bl	8000e26 <_ZN5RFM698_receiveEPcj>
 8001210:	0003      	movs	r3, r0
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	17da      	asrs	r2, r3, #31
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	0fdb      	lsrs	r3, r3, #31
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d0cf      	beq.n	80011c2 <_ZN5RFM694sendEPKvj+0xb6>
				_rxBufferLength = bytesRead;
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2190      	movs	r1, #144	; 0x90
 8001228:	505a      	str	r2, [r3, r1]

				// module is in RX mode again

				// Restart RX and wait until RSSI sampling is done
				writeRegister(0x3D, (readRegister(0x3D) & 0xFB) | 0x20);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	213d      	movs	r1, #61	; 0x3d
 800122e:	0018      	movs	r0, r3
 8001230:	f7ff fc04 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 8001234:	0003      	movs	r3, r0
 8001236:	001a      	movs	r2, r3
 8001238:	2324      	movs	r3, #36	; 0x24
 800123a:	439a      	bics	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2220      	movs	r2, #32
 8001242:	4313      	orrs	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	213d      	movs	r1, #61	; 0x3d
 800124a:	0018      	movs	r0, r3
 800124c:	f7ff fc22 	bl	8000a94 <_ZN5RFM6913writeRegisterEhh>
				uint32_t timeEntry = mstimer_get();
 8001250:	f000 fc44 	bl	8001adc <_Z11mstimer_getv>
 8001254:	0003      	movs	r3, r0
 8001256:	613b      	str	r3, [r7, #16]
				while (((readRegister(0x23) & 0x02) == 0)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2123      	movs	r1, #35	; 0x23
 800125c:	0018      	movs	r0, r3
 800125e:	f7ff fbed 	bl	8000a3c <_ZN5RFM6912readRegisterEh>
 8001262:	0003      	movs	r3, r0
 8001264:	001a      	movs	r2, r3
 8001266:	2302      	movs	r3, #2
 8001268:	4013      	ands	r3, r2
						&& ((mstimer_get() - timeEntry) < 10))
 800126a:	d108      	bne.n	800127e <_ZN5RFM694sendEPKvj+0x172>
 800126c:	f000 fc36 	bl	8001adc <_Z11mstimer_getv>
 8001270:	0002      	movs	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b09      	cmp	r3, #9
 8001278:	d801      	bhi.n	800127e <_ZN5RFM694sendEPKvj+0x172>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <_ZN5RFM694sendEPKvj+0x174>
 800127e:	2300      	movs	r3, #0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d09e      	beq.n	80011c2 <_ZN5RFM694sendEPKvj+0xb6>
				while (((readRegister(0x23) & 0x02) == 0)
 8001284:	e7e8      	b.n	8001258 <_ZN5RFM694sendEPKvj+0x14c>
					;
			}
		}

		setMode(RFM69_MODE_STANDBY);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	2101      	movs	r1, #1
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff fc2b 	bl	8000ae6 <_ZN5RFM697setModeE9RFM69Mode>
	}

	// transfer packet to FIFO
	this->nCS_Low();
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	0018      	movs	r0, r3
 8001294:	f000 fac1 	bl	800181a <_ZN3SPI7nCS_LowEv>

	// address FIFO
	this->transfer(0x00 | 0x80);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	0018      	movs	r0, r3
 800129e:	f000 fb69 	bl	8001974 <_ZN3SPI8transferEh>

	// send length byte
	this->transfer(dataLength);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	0011      	movs	r1, r2
 80012aa:	0018      	movs	r0, r3
 80012ac:	f000 fb62 	bl	8001974 <_ZN3SPI8transferEh>

	// send payload
	for (unsigned int i = 0; i < dataLength; i++)
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d20b      	bcs.n	80012d4 <_ZN5RFM694sendEPKvj+0x1c8>
		this->transfer(((uint8_t*) data)[i]);
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	18d3      	adds	r3, r2, r3
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	0019      	movs	r1, r3
 80012c8:	f000 fb54 	bl	8001974 <_ZN3SPI8transferEh>
	for (unsigned int i = 0; i < dataLength; i++)
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	3301      	adds	r3, #1
 80012d0:	61fb      	str	r3, [r7, #28]
 80012d2:	e7ef      	b.n	80012b4 <_ZN5RFM694sendEPKvj+0x1a8>

	this->nCS_High();
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 fab5 	bl	8001846 <_ZN3SPI8nCS_HighEv>

	// start radio transmission
	setMode(RFM69_MODE_TX);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2103      	movs	r1, #3
 80012e0:	0018      	movs	r0, r3
 80012e2:	f7ff fc00 	bl	8000ae6 <_ZN5RFM697setModeE9RFM69Mode>

	// wait for packet sent
	waitForPacketSent();
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff fdfe 	bl	8000eea <_ZN5RFM6917waitForPacketSentEv>

	// go to standby
	setMode(RFM69_MODE_STANDBY);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2101      	movs	r1, #1
 80012f2:	0018      	movs	r0, r3
 80012f4:	f7ff fbf7 	bl	8000ae6 <_ZN5RFM697setModeE9RFM69Mode>

	return dataLength;
 80012f8:	687b      	ldr	r3, [r7, #4]
}
 80012fa:	0018      	movs	r0, r3
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b008      	add	sp, #32
 8001300:	bd80      	pop	{r7, pc}

08001302 <_ZN5RFM6911SetResetPinEP12GPIO_TypeDeft>:

void RFM69::SetResetPin(GPIO_TypeDef *RESET_PORT, uint16_t RESET_PIN) {
 8001302:	b590      	push	{r4, r7, lr}
 8001304:	b087      	sub	sp, #28
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	1dbb      	adds	r3, r7, #6
 800130e:	801a      	strh	r2, [r3, #0]
	this->_resetGPIO = RESET_PORT;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	631a      	str	r2, [r3, #48]	; 0x30
	this->_resetPin = RESET_PIN;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1dba      	adds	r2, r7, #6
 800131a:	8812      	ldrh	r2, [r2, #0]
 800131c:	869a      	strh	r2, [r3, #52]	; 0x34
	Gpio ResetPin = Gpio(this->_resetGPIO, this->_resetPin);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8001326:	2410      	movs	r4, #16
 8001328:	193b      	adds	r3, r7, r4
 800132a:	0018      	movs	r0, r3
 800132c:	f7ff f926 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
	ResetPin.SetAsGenerapPurporseOutput(OUTPUT_PP);
 8001330:	193b      	adds	r3, r7, r4
 8001332:	2100      	movs	r1, #0
 8001334:	0018      	movs	r0, r3
 8001336:	f7ff fa91 	bl	800085c <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>

}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b007      	add	sp, #28
 8001340:	bd90      	pop	{r4, r7, pc}

08001342 <_ZN4UartC1EP13USART_TypeDefm>:

/* Підтримка кільцевого буфера */
//#define UART_RX_BUFFER_SIZE 128 // Вказати максимальний розмір прийомного буфера


Uart::Uart(USART_TypeDef *UartPort, uint32_t UsartBrrValue) {
 8001342:	b580      	push	{r7, lr}
 8001344:	b084      	sub	sp, #16
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	801a      	strh	r2, [r3, #0]
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	805a      	strh	r2, [r3, #2]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	3304      	adds	r3, #4
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	2100      	movs	r1, #0
 8001362:	0018      	movs	r0, r3
 8001364:	f000 fc87 	bl	8001c76 <memset>
	this->ItemUsart = UartPort;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2184      	movs	r1, #132	; 0x84
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	505a      	str	r2, [r3, r1]
	this->ItemUsartBrrValue = UsartBrrValue;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2188      	movs	r1, #136	; 0x88
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	505a      	str	r2, [r3, r1]
	this->InitGpio();
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	0018      	movs	r0, r3
 800137c:	f000 f812 	bl	80013a4 <_ZN4Uart8InitGpioEv>
	this->EnableClock(this->ItemUsart);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2284      	movs	r2, #132	; 0x84
 8001384:	589a      	ldr	r2, [r3, r2]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	0011      	movs	r1, r2
 800138a:	0018      	movs	r0, r3
 800138c:	f000 f85a 	bl	8001444 <_ZN4Uart11EnableClockEP13USART_TypeDef>
	this->Init();
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	0018      	movs	r0, r3
 8001394:	f000 f890 	bl	80014b8 <_ZN4Uart4InitEv>
}
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	0018      	movs	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	b004      	add	sp, #16
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <_ZN4Uart8InitGpioEv>:
uint16_t Uart::GetRingBufferSize(void) {
	return ((uint16_t) (UART_RING_BUFFER_SIZE + this->rx_buffer_head - this->rx_buffer_tail))
			% UART_RING_BUFFER_SIZE;
}
#endif
void Uart::InitGpio(void) {
 80013a4:	b5b0      	push	{r4, r5, r7, lr}
 80013a6:	b08a      	sub	sp, #40	; 0x28
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
// Взалежності від того, який USART обрано його й ініціалізуємо
	if (this->ItemUsart == USART1) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2284      	movs	r2, #132	; 0x84
 80013b0:	589b      	ldr	r3, [r3, r2]
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <_ZN4Uart8InitGpioEv+0x94>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d119      	bne.n	80013ec <_ZN4Uart8InitGpioEv+0x48>

#ifdef USART1_PB6Tx_PB7Rx
		// PB6 USART1->Tx(AF0)
		// PB7 USART1->Rx(AF0)
		Gpio USART1_tx = Gpio(GPIOB, 6);
 80013b8:	4920      	ldr	r1, [pc, #128]	; (800143c <_ZN4Uart8InitGpioEv+0x98>)
 80013ba:	2420      	movs	r4, #32
 80013bc:	193b      	adds	r3, r7, r4
 80013be:	2206      	movs	r2, #6
 80013c0:	0018      	movs	r0, r3
 80013c2:	f7ff f8db 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART1_rx = Gpio(GPIOB, 7);
 80013c6:	491d      	ldr	r1, [pc, #116]	; (800143c <_ZN4Uart8InitGpioEv+0x98>)
 80013c8:	2518      	movs	r5, #24
 80013ca:	197b      	adds	r3, r7, r5
 80013cc:	2207      	movs	r2, #7
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7ff f8d4 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>

		USART1_tx.SetAsAF(AF0, OUTPUT_PP);
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	0018      	movs	r0, r3
 80013dc:	f7ff f9d9 	bl	8000792 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART1_rx.SetAsAF(AF0);
 80013e0:	197b      	adds	r3, r7, r5
 80013e2:	2100      	movs	r1, #0
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff f980 	bl	80006ea <_ZN4Gpio7SetAsAFE7GPIO_AF>

	} else {
		// Обробка спроби ініціалізації неіснуючого USART порта
		// "ERROR: Unkown port"
	}
}
 80013ea:	e020      	b.n	800142e <_ZN4Uart8InitGpioEv+0x8a>
	} else if (this->ItemUsart == USART2) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2284      	movs	r2, #132	; 0x84
 80013f0:	589b      	ldr	r3, [r3, r2]
 80013f2:	4a13      	ldr	r2, [pc, #76]	; (8001440 <_ZN4Uart8InitGpioEv+0x9c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d11a      	bne.n	800142e <_ZN4Uart8InitGpioEv+0x8a>
		Gpio USART2_tx = Gpio(GPIOA, 2);
 80013f8:	2390      	movs	r3, #144	; 0x90
 80013fa:	05d9      	lsls	r1, r3, #23
 80013fc:	2410      	movs	r4, #16
 80013fe:	193b      	adds	r3, r7, r4
 8001400:	2202      	movs	r2, #2
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff f8ba 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
		Gpio USART2_rx = Gpio(GPIOA, 3);
 8001408:	2390      	movs	r3, #144	; 0x90
 800140a:	05d9      	lsls	r1, r3, #23
 800140c:	2508      	movs	r5, #8
 800140e:	197b      	adds	r3, r7, r5
 8001410:	2203      	movs	r2, #3
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff f8b2 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
		USART2_tx.SetAsAF(AF1, OUTPUT_PP);
 8001418:	193b      	adds	r3, r7, r4
 800141a:	2200      	movs	r2, #0
 800141c:	2101      	movs	r1, #1
 800141e:	0018      	movs	r0, r3
 8001420:	f7ff f9b7 	bl	8000792 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>
		USART2_rx.SetAsAF(AF0);
 8001424:	197b      	adds	r3, r7, r5
 8001426:	2100      	movs	r1, #0
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff f95e 	bl	80006ea <_ZN4Gpio7SetAsAFE7GPIO_AF>
}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b00a      	add	sp, #40	; 0x28
 8001434:	bdb0      	pop	{r4, r5, r7, pc}
 8001436:	46c0      	nop			; (mov r8, r8)
 8001438:	40013800 	.word	0x40013800
 800143c:	48000400 	.word	0x48000400
 8001440:	40004400 	.word	0x40004400

08001444 <_ZN4Uart11EnableClockEP13USART_TypeDef>:

void Uart::EnableClock(USART_TypeDef *UartPort) {
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]

	if (UartPort == USART1) {
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	4a16      	ldr	r2, [pc, #88]	; (80014ac <_ZN4Uart11EnableClockEP13USART_TypeDef+0x68>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d110      	bne.n	8001478 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
		// Перед тим як ввімкнути тактування USART1 перевіримо, чи не було воно ввімкнене до цього?
		if (!(RCC->APB2ENR & RCC_APB2ENR_USART1EN)) {
 8001456:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001458:	699a      	ldr	r2, [r3, #24]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	01db      	lsls	r3, r3, #7
 800145e:	4013      	ands	r3, r2
 8001460:	425a      	negs	r2, r3
 8001462:	4153      	adcs	r3, r2
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x34>
			RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 800146c:	699a      	ldr	r2, [r3, #24]
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	01c9      	lsls	r1, r1, #7
 8001474:	430a      	orrs	r2, r1
 8001476:	619a      	str	r2, [r3, #24]
		}
	}
// Перед тим як ввімкнути тактування USART2 перевіримо, чи не було воно ввімкнене до цього?
	if (UartPort == USART2) {
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x70>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d110      	bne.n	80014a2 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
		if (!(RCC->APB1ENR & RCC_APB1ENR_USART2EN)) {
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001482:	69da      	ldr	r2, [r3, #28]
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	029b      	lsls	r3, r3, #10
 8001488:	4013      	ands	r3, r2
 800148a:	425a      	negs	r2, r3
 800148c:	4153      	adcs	r3, r2
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d006      	beq.n	80014a2 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x5e>
			RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 8001496:	69da      	ldr	r2, [r3, #28]
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <_ZN4Uart11EnableClockEP13USART_TypeDef+0x6c>)
 800149a:	2180      	movs	r1, #128	; 0x80
 800149c:	0289      	lsls	r1, r1, #10
 800149e:	430a      	orrs	r2, r1
 80014a0:	61da      	str	r2, [r3, #28]
		}
	}

}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40013800 	.word	0x40013800
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40004400 	.word	0x40004400

080014b8 <_ZN4Uart4InitEv>:

void Uart::Init(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
	this->ItemUsart->CR1 = 0;             // Скидаю налаштування
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2284      	movs	r2, #132	; 0x84
 80014c4:	589b      	ldr	r3, [r3, r2]
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_UE; // Вмикаю модуль USART;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2284      	movs	r2, #132	; 0x84
 80014ce:	589b      	ldr	r3, [r3, r2]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2184      	movs	r1, #132	; 0x84
 80014d6:	585b      	ldr	r3, [r3, r1]
 80014d8:	2101      	movs	r1, #1
 80014da:	430a      	orrs	r2, r1
 80014dc:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->BRR = 5000;          // Для 9600 Бод, при 48 МГц.

	if (this->ItemUsart->CR1 & USART_CR1_OVER8) {
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2284      	movs	r2, #132	; 0x84
 80014e2:	589b      	ldr	r3, [r3, r2]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	2380      	movs	r3, #128	; 0x80
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	4013      	ands	r3, r2
 80014ec:	1e5a      	subs	r2, r3, #1
 80014ee:	4193      	sbcs	r3, r2
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10f      	bne.n	8001516 <_ZN4Uart4InitEv+0x5e>
		// Oversampling by 8

	} else {
		// Oversampling by 16
		int UsartBrrValue = 0;
 80014f6:	2300      	movs	r3, #0
 80014f8:	60fb      	str	r3, [r7, #12]

		UsartBrrValue = HCLK / this->ItemUsartBrrValue;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2288      	movs	r2, #136	; 0x88
 80014fe:	589b      	ldr	r3, [r3, r2]
 8001500:	0019      	movs	r1, r3
 8001502:	4811      	ldr	r0, [pc, #68]	; (8001548 <_ZN4Uart4InitEv+0x90>)
 8001504:	f7fe fe00 	bl	8000108 <__udivsi3>
 8001508:	0003      	movs	r3, r0
 800150a:	60fb      	str	r3, [r7, #12]

		this->ItemUsart->BRR = UsartBrrValue;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2284      	movs	r2, #132	; 0x84
 8001510:	589b      	ldr	r3, [r3, r2]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	60da      	str	r2, [r3, #12]
	}

	this->ItemUsart->CR1 |= USART_CR1_TE; // Transmit enable
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2284      	movs	r2, #132	; 0x84
 800151a:	589b      	ldr	r3, [r3, r2]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2184      	movs	r1, #132	; 0x84
 8001522:	585b      	ldr	r3, [r3, r1]
 8001524:	2108      	movs	r1, #8
 8001526:	430a      	orrs	r2, r1
 8001528:	601a      	str	r2, [r3, #0]
	this->ItemUsart->CR1 |= USART_CR1_RE; // Receive enable
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2284      	movs	r2, #132	; 0x84
 800152e:	589b      	ldr	r3, [r3, r2]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2184      	movs	r1, #132	; 0x84
 8001536:	585b      	ldr	r3, [r3, r1]
 8001538:	2104      	movs	r1, #4
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]

	//this->ItemUsart->CR2 = 0;
	//this->ItemUsart->CR3 = 0;
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b004      	add	sp, #16
 8001544:	bd80      	pop	{r7, pc}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	007a1200 	.word	0x007a1200

0800154c <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize>:
#define SPI1_DR_8bit          (*(__IO uint8_t *)((uint32_t)&(SPI1->DR)))
#define SPI2_DR_8bit          (*(__IO uint8_t *)((uint32_t)&(SPI2->DR)))

extern "C" void SPI1_IRQHandler();

SPI::SPI(SPI_TypeDef *Port, SPI_DataSize_t size)
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	1dfb      	adds	r3, r7, #7
 8001558:	701a      	strb	r2, [r3, #0]
{

	this->_dataSize = size;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1dfa      	adds	r2, r7, #7
 800155e:	2122      	movs	r1, #34	; 0x22
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	545a      	strb	r2, [r3, r1]
	this->SPI_ITEM = Port;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	601a      	str	r2, [r3, #0]

	this->InitGpio();
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	0018      	movs	r0, r3
 800156e:	f000 f865 	bl	800163c <_ZN3SPI8InitGpioEv>
	this->EnableClk();
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	0018      	movs	r0, r3
 8001576:	f000 f8c5 	bl	8001704 <_ZN3SPI9EnableClkEv>
	this->SetClockPrsc(fPCLK_DIV_By_2);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2100      	movs	r1, #0
 800157e:	0018      	movs	r0, r3
 8001580:	f000 f90b 	bl	800179a <_ZN3SPI12SetClockPrscE12SetClockPrsc>
	this->EnableSoftwareSlaveManagment();
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	0018      	movs	r0, r3
 8001588:	f000 f91d 	bl	80017c6 <_ZN3SPI28EnableSoftwareSlaveManagmentEv>
	this->EnableMotorollaMode();
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	0018      	movs	r0, r3
 8001590:	f000 f933 	bl	80017fa <_ZN3SPI19EnableMotorollaModeEv>
	this->Config();
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	0018      	movs	r0, r3
 8001598:	f000 f836 	bl	8001608 <_ZN3SPI6ConfigEv>

	if (this->_dataSize == DataSize_16B)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2222      	movs	r2, #34	; 0x22
 80015a0:	5c9b      	ldrb	r3, [r3, r2]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d104      	bne.n	80015b0 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x64>
	{
		this->SetFrameSize(DataSize_16B);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2101      	movs	r1, #1
 80015aa:	0018      	movs	r0, r3
 80015ac:	f000 f8d0 	bl	8001750 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
	}
	if (this->_dataSize == DataSize_8B)
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2222      	movs	r2, #34	; 0x22
 80015b4:	5c9b      	ldrb	r3, [r3, r2]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10d      	bne.n	80015d6 <_ZN3SPIC1EP11SPI_TypeDef12SPI_DataSize+0x8a>
	{
		this->SetFrameSize(DataSize_8B);
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	2100      	movs	r1, #0
 80015be:	0018      	movs	r0, r3
 80015c0:	f000 f8c6 	bl	8001750 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>
		this->SPI_ITEM->CR2 |= SPI_CR2_FRXTH; //Подія RXNE генерується, якщо рівень FIFO більше або дорівнює 1/4 (8-біт)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	0149      	lsls	r1, r1, #5
 80015d2:	430a      	orrs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]
	}

	this->SetClockPhase(CPHA0);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2101      	movs	r1, #1
 80015da:	0018      	movs	r0, r3
 80015dc:	f000 f97f 	bl	80018de <_ZN3SPI13SetClockPhaseE10ClockPhase>
	this->SetClockPolarity(CPOL0);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2101      	movs	r1, #1
 80015e4:	0018      	movs	r0, r3
 80015e6:	f000 f953 	bl	8001890 <_ZN3SPI16SetClockPolarityE8ClockPol>
	this->SetMsbLsbFirst(MSB_First);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2101      	movs	r1, #1
 80015ee:	0018      	movs	r0, r3
 80015f0:	f000 f99c 	bl	800192c <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>
	this->Enable();
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 f93a 	bl	8001870 <_ZN3SPI6EnableEv>
}
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b004      	add	sp, #16
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <_ZN3SPI6ConfigEv>:
void SPI::Config()
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_MSTR;       // 1: Master configuration
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2104      	movs	r1, #4
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
											   // 0: Slave configuration
	this->SPI_ITEM->CR2 &= ~SPI_CR2_DS;       // Clear bitfield
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4903      	ldr	r1, [pc, #12]	; (8001638 <_ZN3SPI6ConfigEv+0x30>)
 800162c:	400a      	ands	r2, r1
 800162e:	605a      	str	r2, [r3, #4]

}
 8001630:	46c0      	nop			; (mov r8, r8)
 8001632:	46bd      	mov	sp, r7
 8001634:	b002      	add	sp, #8
 8001636:	bd80      	pop	{r7, pc}
 8001638:	fffff0ff 	.word	0xfffff0ff

0800163c <_ZN3SPI8InitGpioEv>:

void SPI::InitGpio(void)
{
 800163c:	b590      	push	{r4, r7, lr}
 800163e:	b08b      	sub	sp, #44	; 0x2c
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	// Визначення GPIO
	this->MISO_PORT = GPIOA;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2290      	movs	r2, #144	; 0x90
 8001648:	05d2      	lsls	r2, r2, #23
 800164a:	60da      	str	r2, [r3, #12]
	this->MISO_PIN = 6;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2206      	movs	r2, #6
 8001650:	821a      	strh	r2, [r3, #16]

	this->MOSI_PORT = GPIOB;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a29      	ldr	r2, [pc, #164]	; (80016fc <_ZN3SPI8InitGpioEv+0xc0>)
 8001656:	605a      	str	r2, [r3, #4]
	this->MOSI_PIN = 5;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2205      	movs	r2, #5
 800165c:	811a      	strh	r2, [r3, #8]

	this->SCK_PORT = GPIOB;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a26      	ldr	r2, [pc, #152]	; (80016fc <_ZN3SPI8InitGpioEv+0xc0>)
 8001662:	615a      	str	r2, [r3, #20]
	this->SCK_PIN = 3;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2203      	movs	r2, #3
 8001668:	831a      	strh	r2, [r3, #24]

	this->nSC_PORT = GPIOC;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a24      	ldr	r2, [pc, #144]	; (8001700 <_ZN3SPI8InitGpioEv+0xc4>)
 800166e:	61da      	str	r2, [r3, #28]
	this->nSC_PIN = 4;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2204      	movs	r2, #4
 8001674:	841a      	strh	r2, [r3, #32]

	// Ініціалізація GPIO
	Gpio MISO = Gpio(this->MISO_PORT, this->MISO_PIN);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68d9      	ldr	r1, [r3, #12]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	8a1a      	ldrh	r2, [r3, #16]
 800167e:	2420      	movs	r4, #32
 8001680:	193b      	adds	r3, r7, r4
 8001682:	0018      	movs	r0, r3
 8001684:	f7fe ff7a 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
	MISO.SetAsAF(AF0, OUTPUT_PP);
 8001688:	193b      	adds	r3, r7, r4
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	0018      	movs	r0, r3
 8001690:	f7ff f87f 	bl	8000792 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio MOSI = Gpio(this->MOSI_PORT, this->MOSI_PIN);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	891a      	ldrh	r2, [r3, #8]
 800169c:	2418      	movs	r4, #24
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	0018      	movs	r0, r3
 80016a2:	f7fe ff6b 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
	MOSI.SetAsAF(AF0, OUTPUT_PP);
 80016a6:	193b      	adds	r3, r7, r4
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff f870 	bl	8000792 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio SCK = Gpio(this->SCK_PORT, this->SCK_PIN);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6959      	ldr	r1, [r3, #20]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	8b1a      	ldrh	r2, [r3, #24]
 80016ba:	2410      	movs	r4, #16
 80016bc:	193b      	adds	r3, r7, r4
 80016be:	0018      	movs	r0, r3
 80016c0:	f7fe ff5c 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
	SCK.SetAsAF(AF0, OUTPUT_PP);
 80016c4:	193b      	adds	r3, r7, r4
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	0018      	movs	r0, r3
 80016cc:	f7ff f861 	bl	8000792 <_ZN4Gpio7SetAsAFE7GPIO_AF2OT>

	Gpio nCS = Gpio(this->nSC_PORT, this->nSC_PIN);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69d9      	ldr	r1, [r3, #28]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	8c1a      	ldrh	r2, [r3, #32]
 80016d8:	2408      	movs	r4, #8
 80016da:	193b      	adds	r3, r7, r4
 80016dc:	0018      	movs	r0, r3
 80016de:	f7fe ff4d 	bl	800057c <_ZN4GpioC1EP12GPIO_TypeDeft>
	nCS.SetAsGenerapPurporseOutput(OUTPUT_PP);
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	2100      	movs	r1, #0
 80016e6:	0018      	movs	r0, r3
 80016e8:	f7ff f8b8 	bl	800085c <_ZN4Gpio26SetAsGenerapPurporseOutputE2OT>
	this->nCS_High();
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	0018      	movs	r0, r3
 80016f0:	f000 f8a9 	bl	8001846 <_ZN3SPI8nCS_HighEv>
}
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b00b      	add	sp, #44	; 0x2c
 80016fa:	bd90      	pop	{r4, r7, pc}
 80016fc:	48000400 	.word	0x48000400
 8001700:	48000800 	.word	0x48000800

08001704 <_ZN3SPI9EnableClkEv>:

void SPI::EnableClk(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	if (this->SPI_ITEM == SPI1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <_ZN3SPI9EnableClkEv+0x40>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d106      	bne.n	8001724 <_ZN3SPI9EnableClkEv+0x20>
	{
		RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <_ZN3SPI9EnableClkEv+0x44>)
 8001718:	699a      	ldr	r2, [r3, #24]
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <_ZN3SPI9EnableClkEv+0x44>)
 800171c:	2180      	movs	r1, #128	; 0x80
 800171e:	0149      	lsls	r1, r1, #5
 8001720:	430a      	orrs	r2, r1
 8001722:	619a      	str	r2, [r3, #24]
	}
	if (this->SPI_ITEM == SPI2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a08      	ldr	r2, [pc, #32]	; (800174c <_ZN3SPI9EnableClkEv+0x48>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d106      	bne.n	800173c <_ZN3SPI9EnableClkEv+0x38>
	{
		RCC->APB1ENR |= RCC_APB1ENR_SPI2EN;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <_ZN3SPI9EnableClkEv+0x44>)
 8001730:	69da      	ldr	r2, [r3, #28]
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <_ZN3SPI9EnableClkEv+0x44>)
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	01c9      	lsls	r1, r1, #7
 8001738:	430a      	orrs	r2, r1
 800173a:	61da      	str	r2, [r3, #28]
	}
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	b002      	add	sp, #8
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40013000 	.word	0x40013000
 8001748:	40021000 	.word	0x40021000
 800174c:	40003800 	.word	0x40003800

08001750 <_ZN3SPI12SetFrameSizeE12SPI_DataSize>:

void SPI::SetFrameSize(SPI_DataSize_t Size)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	000a      	movs	r2, r1
 800175a:	1cfb      	adds	r3, r7, #3
 800175c:	701a      	strb	r2, [r3, #0]
	if (Size == DataSize_8B)
 800175e:	1cfb      	adds	r3, r7, #3
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d108      	bne.n	8001778 <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x28>
	{
		this->SPI_ITEM->CR2 |= 0x07 << SPI_CR2_DS_Pos; // 8 Bit frame
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	21e0      	movs	r1, #224	; 0xe0
 8001772:	00c9      	lsls	r1, r1, #3
 8001774:	430a      	orrs	r2, r1
 8001776:	605a      	str	r2, [r3, #4]
	}
	if (Size == DataSize_16B)
 8001778:	1cfb      	adds	r3, r7, #3
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d108      	bne.n	8001792 <_ZN3SPI12SetFrameSizeE12SPI_DataSize+0x42>
	{
		this->SPI_ITEM->CR2 |= (0x0F << SPI_CR2_DS_Pos); // 16 Bit frame
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	21f0      	movs	r1, #240	; 0xf0
 800178c:	0109      	lsls	r1, r1, #4
 800178e:	430a      	orrs	r2, r1
 8001790:	605a      	str	r2, [r3, #4]
	}
}
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	46bd      	mov	sp, r7
 8001796:	b002      	add	sp, #8
 8001798:	bd80      	pop	{r7, pc}

0800179a <_ZN3SPI12SetClockPrscE12SetClockPrsc>:

void SPI::SetClockPrsc(SetClockPrsc_t Prescaler)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	000a      	movs	r2, r1
 80017a4:	1cfb      	adds	r3, r7, #3
 80017a6:	701a      	strb	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= (Prescaler << SPI_CR1_BR_Pos);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	1cfb      	adds	r3, r7, #3
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]
}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	46bd      	mov	sp, r7
 80017c2:	b002      	add	sp, #8
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <_ZN3SPI28EnableSoftwareSlaveManagmentEv>:

void SPI::EnableSoftwareSlaveManagment(void)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSM;  // 1: Software slave management enabled
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2180      	movs	r1, #128	; 0x80
 80017da:	0089      	lsls	r1, r1, #2
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
	this->SPI_ITEM->CR1 |= SPI_CR1_SSI;  // 1: Internal slave select
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	0049      	lsls	r1, r1, #1
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
}
 80017f2:	46c0      	nop			; (mov r8, r8)
 80017f4:	46bd      	mov	sp, r7
 80017f6:	b002      	add	sp, #8
 80017f8:	bd80      	pop	{r7, pc}

080017fa <_ZN3SPI19EnableMotorollaModeEv>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SSM; // 1: Software slave management disabled
}

void SPI::EnableMotorollaMode(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b082      	sub	sp, #8
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR2 &= ~SPI_CR2_FRF;      // Motorolla mode
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2110      	movs	r1, #16
 800180e:	438a      	bics	r2, r1
 8001810:	605a      	str	r2, [r3, #4]
}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b002      	add	sp, #8
 8001818:	bd80      	pop	{r7, pc}

0800181a <_ZN3SPI7nCS_LowEv>:

void SPI::nCS_Low(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= ((1 << this->nSC_PIN) << 16U); // BIT RESET
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69db      	ldr	r3, [r3, #28]
 8001826:	699a      	ldr	r2, [r3, #24]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	8c1b      	ldrh	r3, [r3, #32]
 800182c:	0019      	movs	r1, r3
 800182e:	2301      	movs	r3, #1
 8001830:	408b      	lsls	r3, r1
 8001832:	041b      	lsls	r3, r3, #16
 8001834:	0019      	movs	r1, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	430a      	orrs	r2, r1
 800183c:	619a      	str	r2, [r3, #24]
}
 800183e:	46c0      	nop			; (mov r8, r8)
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}

08001846 <_ZN3SPI8nCS_HighEv>:

void SPI::nCS_High(void)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
	this->nSC_PORT->BSRR |= (1 << this->nSC_PIN); // BIT SET
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	699a      	ldr	r2, [r3, #24]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	8c1b      	ldrh	r3, [r3, #32]
 8001858:	0019      	movs	r1, r3
 800185a:	2301      	movs	r3, #1
 800185c:	408b      	lsls	r3, r1
 800185e:	0019      	movs	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	430a      	orrs	r2, r1
 8001866:	619a      	str	r2, [r3, #24]
}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}

08001870 <_ZN3SPI6EnableEv>:

void SPI::Enable(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	this->SPI_ITEM->CR1 |= SPI_CR1_SPE;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2140      	movs	r1, #64	; 0x40
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]
}
 8001888:	46c0      	nop			; (mov r8, r8)
 800188a:	46bd      	mov	sp, r7
 800188c:	b002      	add	sp, #8
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZN3SPI16SetClockPolarityE8ClockPol>:
{
	this->SPI_ITEM->CR1 &= ~SPI_CR1_SPE;
}

void SPI::SetClockPolarity(ClockPol_t cpol)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	000a      	movs	r2, r1
 800189a:	1cfb      	adds	r3, r7, #3
 800189c:	701a      	strb	r2, [r3, #0]

	if (cpol = CPOL1)
 800189e:	1cfb      	adds	r3, r7, #3
 80018a0:	2200      	movs	r2, #0
 80018a2:	701a      	strb	r2, [r3, #0]
 80018a4:	2300      	movs	r3, #0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <_ZN3SPI16SetClockPolarityE8ClockPol+0x2a>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_CPOL;    // Polarity clc signal CPOL = 1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2102      	movs	r1, #2
 80018b6:	430a      	orrs	r2, r1
 80018b8:	601a      	str	r2, [r3, #0]
	}
	if (cpol = CPOL0)
 80018ba:	1cfb      	adds	r3, r7, #3
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
 80018c0:	2301      	movs	r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d007      	beq.n	80018d6 <_ZN3SPI16SetClockPolarityE8ClockPol+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPOL;   // Polarity clc signal CPOL = 0;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2102      	movs	r1, #2
 80018d2:	438a      	bics	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
	}

}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	46bd      	mov	sp, r7
 80018da:	b002      	add	sp, #8
 80018dc:	bd80      	pop	{r7, pc}

080018de <_ZN3SPI13SetClockPhaseE10ClockPhase>:

void SPI::SetClockPhase(ClockPhase_t cpha)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
 80018e6:	000a      	movs	r2, r1
 80018e8:	1cfb      	adds	r3, r7, #3
 80018ea:	701a      	strb	r2, [r3, #0]
	if (cpha = CPHA1)
 80018ec:	1cfb      	adds	r3, r7, #3
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	2300      	movs	r3, #0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d007      	beq.n	8001908 <_ZN3SPI13SetClockPhaseE10ClockPhase+0x2a>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2101      	movs	r1, #1
 8001904:	438a      	bics	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
	}
	if (cpha = CPHA0)
 8001908:	1cfb      	adds	r3, r7, #3
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	2301      	movs	r3, #1
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <_ZN3SPI13SetClockPhaseE10ClockPhase+0x46>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_CPHA;   // Phase clc signal    CPHA = 0;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2101      	movs	r1, #1
 8001920:	438a      	bics	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
	}

}
 8001924:	46c0      	nop			; (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	b002      	add	sp, #8
 800192a:	bd80      	pop	{r7, pc}

0800192c <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First>:

void SPI::SetMsbLsbFirst(MSB_LSB_First_t msb_lsb_first)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	000a      	movs	r2, r1
 8001936:	1cfb      	adds	r3, r7, #3
 8001938:	701a      	strb	r2, [r3, #0]
	if (msb_lsb_first == MSB_First)
 800193a:	1cfb      	adds	r3, r7, #3
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d107      	bne.n	8001952 <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x26>
	{
		this->SPI_ITEM->CR1 &= ~SPI_CR1_LSBFIRST;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2180      	movs	r1, #128	; 0x80
 800194e:	438a      	bics	r2, r1
 8001950:	601a      	str	r2, [r3, #0]
	}
	if (msb_lsb_first == LSB_First)
 8001952:	1cfb      	adds	r3, r7, #3
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d107      	bne.n	800196a <_ZN3SPI14SetMsbLsbFirstE13MSB_LSB_First+0x3e>
	{
		this->SPI_ITEM->CR1 |= SPI_CR1_LSBFIRST;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
	}
}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b002      	add	sp, #8
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <_ZN3SPI8transferEh>:

uint8_t SPI::transfer(uint8_t data){
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	000a      	movs	r2, r1
 800197e:	1cfb      	adds	r3, r7, #3
 8001980:	701a      	strb	r2, [r3, #0]
	    //this->nCS_Low();
		while (!(this->SPI_ITEM->SR & SPI_SR_TXE))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2202      	movs	r2, #2
 800198a:	4013      	ands	r3, r2
 800198c:	425a      	negs	r2, r3
 800198e:	4153      	adcs	r3, r2
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d000      	beq.n	8001998 <_ZN3SPI8transferEh+0x24>
 8001996:	e7f4      	b.n	8001982 <_ZN3SPI8transferEh+0xe>
			; // Очікую спустошення передавального буфера.
		SPI1_DR_8bit = data;
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <_ZN3SPI8transferEh+0x50>)
 800199a:	1cfb      	adds	r3, r7, #3
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	7013      	strb	r3, [r2, #0]

		while (!(this->SPI_ITEM->SR & SPI_SR_RXNE))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2201      	movs	r2, #1
 80019a8:	4013      	ands	r3, r2
 80019aa:	425a      	negs	r2, r3
 80019ac:	4153      	adcs	r3, r2
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d000      	beq.n	80019b6 <_ZN3SPI8transferEh+0x42>
 80019b4:	e7f4      	b.n	80019a0 <_ZN3SPI8transferEh+0x2c>
			; // Очікую заповнення приймального буфера.
		return (SPI1_DR_8bit);
 80019b6:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <_ZN3SPI8transferEh+0x50>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	b2db      	uxtb	r3, r3
		//this->nCS_Low();
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b002      	add	sp, #8
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	4001300c 	.word	0x4001300c

080019c8 <main>:
uint8_t Temperature = 0;
int32_t freq=0;
char UART_BUFFER[30];

int main(void)
{
 80019c8:	b5b0      	push	{r4, r5, r7, lr}
 80019ca:	b0ac      	sub	sp, #176	; 0xb0
 80019cc:	af02      	add	r7, sp, #8

	mstimer_init();
 80019ce:	f000 f873 	bl	8001ab8 <_Z12mstimer_initv>

	RFM69 Modem = RFM69(SPI1, GPIOC, 4, true, DataSize_8B);
 80019d2:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <main+0x98>)
 80019d4:	4923      	ldr	r1, [pc, #140]	; (8001a64 <main+0x9c>)
 80019d6:	2410      	movs	r4, #16
 80019d8:	1938      	adds	r0, r7, r4
 80019da:	2300      	movs	r3, #0
 80019dc:	9301      	str	r3, [sp, #4]
 80019de:	2301      	movs	r3, #1
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2304      	movs	r3, #4
 80019e4:	f7fe ff60 	bl	80008a8 <_ZN5RFM69C1EP11SPI_TypeDefP12GPIO_TypeDeftb12SPI_DataSize>
	Modem.SetResetPin(GPIOC, 5);
 80019e8:	491d      	ldr	r1, [pc, #116]	; (8001a60 <main+0x98>)
 80019ea:	193b      	adds	r3, r7, r4
 80019ec:	2205      	movs	r2, #5
 80019ee:	0018      	movs	r0, r3
 80019f0:	f7ff fc87 	bl	8001302 <_ZN5RFM6911SetResetPinEP12GPIO_TypeDeft>
	Modem.reset();
 80019f4:	193b      	adds	r3, r7, r4
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7fe ffca 	bl	8000990 <_ZN5RFM695resetEv>


	Modem.init();
 80019fc:	193b      	adds	r3, r7, r4
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7fe fffc 	bl	80009fc <_ZN5RFM694initEv>
	Modem.sleep();
 8001a04:	193b      	adds	r3, r7, r4
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7ff f9d8 	bl	8000dbc <_ZN5RFM695sleepEv>
	Modem.setPowerDBm(10);
 8001a0c:	193b      	adds	r3, r7, r4
 8001a0e:	210a      	movs	r1, #10
 8001a10:	0018      	movs	r0, r3
 8001a12:	f7ff faa5 	bl	8000f60 <_ZN5RFM6911setPowerDBmEa>
	Modem.setCSMA(true);
 8001a16:	193b      	adds	r3, r7, r4
 8001a18:	2101      	movs	r1, #1
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7fe ffa8 	bl	8000970 <_ZN5RFM697setCSMAEb>

	char testdata[] =
 8001a20:	2008      	movs	r0, #8
 8001a22:	183b      	adds	r3, r7, r0
 8001a24:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <main+0xa0>)
 8001a26:	6811      	ldr	r1, [r2, #0]
 8001a28:	6019      	str	r1, [r3, #0]
 8001a2a:	7912      	ldrb	r2, [r2, #4]
 8001a2c:	711a      	strb	r2, [r3, #4]
	{ 'H', 'e', 'l', 'l', 'o' };
	Modem.send(testdata, sizeof(testdata));
 8001a2e:	1839      	adds	r1, r7, r0
 8001a30:	193b      	adds	r3, r7, r4
 8001a32:	2205      	movs	r2, #5
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff fb69 	bl	800110c <_ZN5RFM694sendEPKvj>
	Modem.sleep();
 8001a3a:	193b      	adds	r3, r7, r4
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f7ff f9bd 	bl	8000dbc <_ZN5RFM695sleepEv>

	char rx[8];
	int bytesReceived=0;
 8001a42:	2300      	movs	r3, #0
 8001a44:	25a4      	movs	r5, #164	; 0xa4
 8001a46:	197a      	adds	r2, r7, r5
 8001a48:	6013      	str	r3, [r2, #0]
	bytesReceived = Modem.receive(rx, sizeof(rx));
 8001a4a:	0039      	movs	r1, r7
 8001a4c:	193b      	adds	r3, r7, r4
 8001a4e:	2208      	movs	r2, #8
 8001a50:	0018      	movs	r0, r3
 8001a52:	f7ff f9c0 	bl	8000dd6 <_ZN5RFM697receiveEPcj>
 8001a56:	0003      	movs	r3, r0
 8001a58:	197a      	adds	r2, r7, r5
 8001a5a:	6013      	str	r3, [r2, #0]


	while (1)
 8001a5c:	e7fe      	b.n	8001a5c <main+0x94>
 8001a5e:	46c0      	nop			; (mov r8, r8)
 8001a60:	48000800 	.word	0x48000800
 8001a64:	40013000 	.word	0x40013000
 8001a68:	08002884 	.word	0x08002884

08001a6c <SysTick_Handler>:

	}
}

extern "C" void SysTick_Handler()
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
	uptime_ms++;
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <SysTick_Handler+0x14>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <SysTick_Handler+0x14>)
 8001a78:	601a      	str	r2, [r3, #0]
}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000084 	.word	0x20000084

08001a84 <_Z8delay_msj>:
/** Wait for X milliseconds.
 *
 * @param ms Milliseconds
 */
void delay_ms(unsigned ms)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	uint32_t start = uptime_ms;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <_Z8delay_msj+0x30>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	60fb      	str	r3, [r7, #12]
	while (uptime_ms - start < ms)
 8001a92:	4b08      	ldr	r3, [pc, #32]	; (8001ab4 <_Z8delay_msj+0x30>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1ad2      	subs	r2, r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	419b      	sbcs	r3, r3
 8001aa0:	425b      	negs	r3, r3
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d000      	beq.n	8001aaa <_Z8delay_msj+0x26>
 8001aa8:	e7f3      	b.n	8001a92 <_Z8delay_msj+0xe>
		;
}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b004      	add	sp, #16
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	20000084 	.word	0x20000084

08001ab8 <_Z12mstimer_initv>:

/** Initialize the millisecond timer. */
void mstimer_init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
	SysTick_Config(SystemCoreClock / 1000);
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <_Z12mstimer_initv+0x20>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	23fa      	movs	r3, #250	; 0xfa
 8001ac2:	0099      	lsls	r1, r3, #2
 8001ac4:	0010      	movs	r0, r2
 8001ac6:	f7fe fb1f 	bl	8000108 <__udivsi3>
 8001aca:	0003      	movs	r3, r0
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7fe fd31 	bl	8000534 <SysTick_Config>
}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	20000000 	.word	0x20000000

08001adc <_Z11mstimer_getv>:
/** Return the number of milliseconds since start.
 *
 * @return Milliseconds
 */
uint32_t mstimer_get(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	return uptime_ms;
 8001ae0:	4b02      	ldr	r3, [pc, #8]	; (8001aec <_Z11mstimer_getv+0x10>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	46c0      	nop			; (mov r8, r8)
 8001aec:	20000084 	.word	0x20000084

08001af0 <_Z41__static_initialization_and_destruction_0ii>:
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d10a      	bne.n	8001b16 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d106      	bne.n	8001b16 <_Z41__static_initialization_and_destruction_0ii+0x26>
Uart Debug = Uart(USART1, 115200);
 8001b08:	23e1      	movs	r3, #225	; 0xe1
 8001b0a:	025a      	lsls	r2, r3, #9
 8001b0c:	4905      	ldr	r1, [pc, #20]	; (8001b24 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001b10:	0018      	movs	r0, r3
 8001b12:	f7ff fc16 	bl	8001342 <_ZN4UartC1EP13USART_TypeDefm>
}
 8001b16:	46c0      	nop			; (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	0000ffff 	.word	0x0000ffff
 8001b24:	40013800 	.word	0x40013800
 8001b28:	20000088 	.word	0x20000088

08001b2c <_GLOBAL__sub_I__ZN4GpioC2EP12GPIO_TypeDeft>:
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <_GLOBAL__sub_I__ZN4GpioC2EP12GPIO_TypeDeft+0x14>)
 8001b32:	0019      	movs	r1, r3
 8001b34:	2001      	movs	r0, #1
 8001b36:	f7ff ffdb 	bl	8001af0 <_Z41__static_initialization_and_destruction_0ii>
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	46c0      	nop			; (mov r8, r8)
 8001b40:	0000ffff 	.word	0x0000ffff

08001b44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <_sbrk+0x5c>)
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <_sbrk+0x60>)
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b58:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <_sbrk+0x64>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <_sbrk+0x64>)
 8001b62:	4a12      	ldr	r2, [pc, #72]	; (8001bac <_sbrk+0x68>)
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b66:	4b10      	ldr	r3, [pc, #64]	; (8001ba8 <_sbrk+0x64>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	18d3      	adds	r3, r2, r3
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d207      	bcs.n	8001b84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b74:	f000 f84c 	bl	8001c10 <__errno>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	220c      	movs	r2, #12
 8001b7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	425b      	negs	r3, r3
 8001b82:	e009      	b.n	8001b98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b84:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <_sbrk+0x64>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b8a:	4b07      	ldr	r3, [pc, #28]	; (8001ba8 <_sbrk+0x64>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	18d2      	adds	r2, r2, r3
 8001b92:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <_sbrk+0x64>)
 8001b94:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b006      	add	sp, #24
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20002000 	.word	0x20002000
 8001ba4:	00000400 	.word	0x00000400
 8001ba8:	20000114 	.word	0x20000114
 8001bac:	20000128 	.word	0x20000128

08001bb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bbc:	480d      	ldr	r0, [pc, #52]	; (8001bf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bbe:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bc0:	f7ff fff6 	bl	8001bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bc6:	490d      	ldr	r1, [pc, #52]	; (8001bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <LoopForever+0xe>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bcc:	e002      	b.n	8001bd4 <LoopCopyDataInit>

08001bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd2:	3304      	adds	r3, #4

08001bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd8:	d3f9      	bcc.n	8001bce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bda:	4a0a      	ldr	r2, [pc, #40]	; (8001c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bdc:	4c0a      	ldr	r4, [pc, #40]	; (8001c08 <LoopForever+0x16>)
  movs r3, #0
 8001bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be0:	e001      	b.n	8001be6 <LoopFillZerobss>

08001be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be4:	3204      	adds	r2, #4

08001be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be8:	d3fb      	bcc.n	8001be2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001bea:	f000 f817 	bl	8001c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bee:	f7ff feeb 	bl	80019c8 <main>

08001bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bf2:	e7fe      	b.n	8001bf2 <LoopForever>
  ldr   r0, =_estack
 8001bf4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bfc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001c00:	080028c4 	.word	0x080028c4
  ldr r2, =_sbss
 8001c04:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001c08:	20000124 	.word	0x20000124

08001c0c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c0c:	e7fe      	b.n	8001c0c <ADC_COMP_IRQHandler>
	...

08001c10 <__errno>:
 8001c10:	4b01      	ldr	r3, [pc, #4]	; (8001c18 <__errno+0x8>)
 8001c12:	6818      	ldr	r0, [r3, #0]
 8001c14:	4770      	bx	lr
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	20000004 	.word	0x20000004

08001c1c <__libc_init_array>:
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	2600      	movs	r6, #0
 8001c20:	4d0c      	ldr	r5, [pc, #48]	; (8001c54 <__libc_init_array+0x38>)
 8001c22:	4c0d      	ldr	r4, [pc, #52]	; (8001c58 <__libc_init_array+0x3c>)
 8001c24:	1b64      	subs	r4, r4, r5
 8001c26:	10a4      	asrs	r4, r4, #2
 8001c28:	42a6      	cmp	r6, r4
 8001c2a:	d109      	bne.n	8001c40 <__libc_init_array+0x24>
 8001c2c:	2600      	movs	r6, #0
 8001c2e:	f000 f8d9 	bl	8001de4 <_init>
 8001c32:	4d0a      	ldr	r5, [pc, #40]	; (8001c5c <__libc_init_array+0x40>)
 8001c34:	4c0a      	ldr	r4, [pc, #40]	; (8001c60 <__libc_init_array+0x44>)
 8001c36:	1b64      	subs	r4, r4, r5
 8001c38:	10a4      	asrs	r4, r4, #2
 8001c3a:	42a6      	cmp	r6, r4
 8001c3c:	d105      	bne.n	8001c4a <__libc_init_array+0x2e>
 8001c3e:	bd70      	pop	{r4, r5, r6, pc}
 8001c40:	00b3      	lsls	r3, r6, #2
 8001c42:	58eb      	ldr	r3, [r5, r3]
 8001c44:	4798      	blx	r3
 8001c46:	3601      	adds	r6, #1
 8001c48:	e7ee      	b.n	8001c28 <__libc_init_array+0xc>
 8001c4a:	00b3      	lsls	r3, r6, #2
 8001c4c:	58eb      	ldr	r3, [r5, r3]
 8001c4e:	4798      	blx	r3
 8001c50:	3601      	adds	r6, #1
 8001c52:	e7f2      	b.n	8001c3a <__libc_init_array+0x1e>
 8001c54:	080028b8 	.word	0x080028b8
 8001c58:	080028b8 	.word	0x080028b8
 8001c5c:	080028b8 	.word	0x080028b8
 8001c60:	080028c0 	.word	0x080028c0

08001c64 <memcpy>:
 8001c64:	2300      	movs	r3, #0
 8001c66:	b510      	push	{r4, lr}
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d100      	bne.n	8001c6e <memcpy+0xa>
 8001c6c:	bd10      	pop	{r4, pc}
 8001c6e:	5ccc      	ldrb	r4, [r1, r3]
 8001c70:	54c4      	strb	r4, [r0, r3]
 8001c72:	3301      	adds	r3, #1
 8001c74:	e7f8      	b.n	8001c68 <memcpy+0x4>

08001c76 <memset>:
 8001c76:	0003      	movs	r3, r0
 8001c78:	1812      	adds	r2, r2, r0
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d100      	bne.n	8001c80 <memset+0xa>
 8001c7e:	4770      	bx	lr
 8001c80:	7019      	strb	r1, [r3, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	e7f9      	b.n	8001c7a <memset+0x4>
	...

08001c88 <rand>:
 8001c88:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <rand+0x4c>)
 8001c8a:	b510      	push	{r4, lr}
 8001c8c:	681c      	ldr	r4, [r3, #0]
 8001c8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10f      	bne.n	8001cb4 <rand+0x2c>
 8001c94:	2018      	movs	r0, #24
 8001c96:	f000 f829 	bl	8001cec <malloc>
 8001c9a:	4b0f      	ldr	r3, [pc, #60]	; (8001cd8 <rand+0x50>)
 8001c9c:	63a0      	str	r0, [r4, #56]	; 0x38
 8001c9e:	6003      	str	r3, [r0, #0]
 8001ca0:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <rand+0x54>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	6043      	str	r3, [r0, #4]
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <rand+0x58>)
 8001ca8:	6083      	str	r3, [r0, #8]
 8001caa:	230b      	movs	r3, #11
 8001cac:	8183      	strh	r3, [r0, #12]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	6102      	str	r2, [r0, #16]
 8001cb2:	6143      	str	r3, [r0, #20]
 8001cb4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8001cb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ce4 <rand+0x5c>)
 8001cb8:	6920      	ldr	r0, [r4, #16]
 8001cba:	6961      	ldr	r1, [r4, #20]
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <rand+0x60>)
 8001cbe:	f7fe fb99 	bl	80003f4 <__aeabi_lmul>
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	1880      	adds	r0, r0, r2
 8001cc8:	4159      	adcs	r1, r3
 8001cca:	6120      	str	r0, [r4, #16]
 8001ccc:	6161      	str	r1, [r4, #20]
 8001cce:	0048      	lsls	r0, r1, #1
 8001cd0:	0840      	lsrs	r0, r0, #1
 8001cd2:	bd10      	pop	{r4, pc}
 8001cd4:	20000004 	.word	0x20000004
 8001cd8:	abcd330e 	.word	0xabcd330e
 8001cdc:	e66d1234 	.word	0xe66d1234
 8001ce0:	0005deec 	.word	0x0005deec
 8001ce4:	4c957f2d 	.word	0x4c957f2d
 8001ce8:	5851f42d 	.word	0x5851f42d

08001cec <malloc>:
 8001cec:	b510      	push	{r4, lr}
 8001cee:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <malloc+0x10>)
 8001cf0:	0001      	movs	r1, r0
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	f000 f804 	bl	8001d00 <_malloc_r>
 8001cf8:	bd10      	pop	{r4, pc}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	20000004 	.word	0x20000004

08001d00 <_malloc_r>:
 8001d00:	2303      	movs	r3, #3
 8001d02:	b570      	push	{r4, r5, r6, lr}
 8001d04:	1ccd      	adds	r5, r1, #3
 8001d06:	439d      	bics	r5, r3
 8001d08:	3508      	adds	r5, #8
 8001d0a:	0006      	movs	r6, r0
 8001d0c:	2d0c      	cmp	r5, #12
 8001d0e:	d21e      	bcs.n	8001d4e <_malloc_r+0x4e>
 8001d10:	250c      	movs	r5, #12
 8001d12:	42a9      	cmp	r1, r5
 8001d14:	d81d      	bhi.n	8001d52 <_malloc_r+0x52>
 8001d16:	0030      	movs	r0, r6
 8001d18:	f000 f862 	bl	8001de0 <__malloc_lock>
 8001d1c:	4a25      	ldr	r2, [pc, #148]	; (8001db4 <_malloc_r+0xb4>)
 8001d1e:	6814      	ldr	r4, [r2, #0]
 8001d20:	0021      	movs	r1, r4
 8001d22:	2900      	cmp	r1, #0
 8001d24:	d119      	bne.n	8001d5a <_malloc_r+0x5a>
 8001d26:	4c24      	ldr	r4, [pc, #144]	; (8001db8 <_malloc_r+0xb8>)
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <_malloc_r+0x36>
 8001d2e:	0030      	movs	r0, r6
 8001d30:	f000 f844 	bl	8001dbc <_sbrk_r>
 8001d34:	6020      	str	r0, [r4, #0]
 8001d36:	0029      	movs	r1, r5
 8001d38:	0030      	movs	r0, r6
 8001d3a:	f000 f83f 	bl	8001dbc <_sbrk_r>
 8001d3e:	1c43      	adds	r3, r0, #1
 8001d40:	d12b      	bne.n	8001d9a <_malloc_r+0x9a>
 8001d42:	230c      	movs	r3, #12
 8001d44:	0030      	movs	r0, r6
 8001d46:	6033      	str	r3, [r6, #0]
 8001d48:	f000 f84b 	bl	8001de2 <__malloc_unlock>
 8001d4c:	e003      	b.n	8001d56 <_malloc_r+0x56>
 8001d4e:	2d00      	cmp	r5, #0
 8001d50:	dadf      	bge.n	8001d12 <_malloc_r+0x12>
 8001d52:	230c      	movs	r3, #12
 8001d54:	6033      	str	r3, [r6, #0]
 8001d56:	2000      	movs	r0, #0
 8001d58:	bd70      	pop	{r4, r5, r6, pc}
 8001d5a:	680b      	ldr	r3, [r1, #0]
 8001d5c:	1b5b      	subs	r3, r3, r5
 8001d5e:	d419      	bmi.n	8001d94 <_malloc_r+0x94>
 8001d60:	2b0b      	cmp	r3, #11
 8001d62:	d903      	bls.n	8001d6c <_malloc_r+0x6c>
 8001d64:	600b      	str	r3, [r1, #0]
 8001d66:	18cc      	adds	r4, r1, r3
 8001d68:	6025      	str	r5, [r4, #0]
 8001d6a:	e003      	b.n	8001d74 <_malloc_r+0x74>
 8001d6c:	684b      	ldr	r3, [r1, #4]
 8001d6e:	428c      	cmp	r4, r1
 8001d70:	d10d      	bne.n	8001d8e <_malloc_r+0x8e>
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	0030      	movs	r0, r6
 8001d76:	f000 f834 	bl	8001de2 <__malloc_unlock>
 8001d7a:	0020      	movs	r0, r4
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	300b      	adds	r0, #11
 8001d80:	1d23      	adds	r3, r4, #4
 8001d82:	4390      	bics	r0, r2
 8001d84:	1ac3      	subs	r3, r0, r3
 8001d86:	d0e7      	beq.n	8001d58 <_malloc_r+0x58>
 8001d88:	425a      	negs	r2, r3
 8001d8a:	50e2      	str	r2, [r4, r3]
 8001d8c:	e7e4      	b.n	8001d58 <_malloc_r+0x58>
 8001d8e:	6063      	str	r3, [r4, #4]
 8001d90:	000c      	movs	r4, r1
 8001d92:	e7ef      	b.n	8001d74 <_malloc_r+0x74>
 8001d94:	000c      	movs	r4, r1
 8001d96:	6849      	ldr	r1, [r1, #4]
 8001d98:	e7c3      	b.n	8001d22 <_malloc_r+0x22>
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	1cc4      	adds	r4, r0, #3
 8001d9e:	439c      	bics	r4, r3
 8001da0:	42a0      	cmp	r0, r4
 8001da2:	d0e1      	beq.n	8001d68 <_malloc_r+0x68>
 8001da4:	1a21      	subs	r1, r4, r0
 8001da6:	0030      	movs	r0, r6
 8001da8:	f000 f808 	bl	8001dbc <_sbrk_r>
 8001dac:	1c43      	adds	r3, r0, #1
 8001dae:	d1db      	bne.n	8001d68 <_malloc_r+0x68>
 8001db0:	e7c7      	b.n	8001d42 <_malloc_r+0x42>
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	20000118 	.word	0x20000118
 8001db8:	2000011c 	.word	0x2000011c

08001dbc <_sbrk_r>:
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	b570      	push	{r4, r5, r6, lr}
 8001dc0:	4c06      	ldr	r4, [pc, #24]	; (8001ddc <_sbrk_r+0x20>)
 8001dc2:	0005      	movs	r5, r0
 8001dc4:	0008      	movs	r0, r1
 8001dc6:	6023      	str	r3, [r4, #0]
 8001dc8:	f7ff febc 	bl	8001b44 <_sbrk>
 8001dcc:	1c43      	adds	r3, r0, #1
 8001dce:	d103      	bne.n	8001dd8 <_sbrk_r+0x1c>
 8001dd0:	6823      	ldr	r3, [r4, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d000      	beq.n	8001dd8 <_sbrk_r+0x1c>
 8001dd6:	602b      	str	r3, [r5, #0]
 8001dd8:	bd70      	pop	{r4, r5, r6, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	20000120 	.word	0x20000120

08001de0 <__malloc_lock>:
 8001de0:	4770      	bx	lr

08001de2 <__malloc_unlock>:
 8001de2:	4770      	bx	lr

08001de4 <_init>:
 8001de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001de6:	46c0      	nop			; (mov r8, r8)
 8001de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dea:	bc08      	pop	{r3}
 8001dec:	469e      	mov	lr, r3
 8001dee:	4770      	bx	lr

08001df0 <_fini>:
 8001df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001df6:	bc08      	pop	{r3}
 8001df8:	469e      	mov	lr, r3
 8001dfa:	4770      	bx	lr
