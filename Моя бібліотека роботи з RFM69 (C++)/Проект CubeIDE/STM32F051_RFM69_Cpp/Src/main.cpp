/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stm32f0xx.h>

#include "Gpio.h"
#include "SPI.h"
#include "uart.h"
#include "main.h"

volatile uint32_t uptime_ms = 0;
Uart Debug = Uart(USART1, 115200);

uint8_t ReceiveRegValue = 0;
uint8_t Temperature = 0;
int32_t freq=0;

int main(void)
{

	mstimer_init();


	RFM69 Modem = RFM69(SPI1, GPIOC, 4, true, DataSize_8B);

	//freq = Modem.getFrequency();
	ReceiveRegValue = Modem.readRegister(REG_NODEADRS);
	Modem.setAddress(21);
	ReceiveRegValue = Modem.readRegister(REG_NODEADRS);

	Modem.SetResetPin(GPIOC, 5);
	Modem.reset();

	Modem.init();
	Modem.sleep();
	Modem.setPowerDBm(10);
	Modem.setCSMA(true);

	char testdata[] =
	{ 'H', 'e', 'l', 'l', 'o' };
	Modem.send(testdata, sizeof(testdata));
	Modem.sleep();

	char rx[8];
	int bytesReceived;
	bytesReceived = Modem.receive(rx, sizeof(rx));


	while (1)
	{

	}
}

extern "C" void SysTick_Handler()
{
	uptime_ms++;
}

/** Wait for X milliseconds.
 *
 * @param ms Milliseconds
 */
void delay_ms(unsigned ms)
{
	uint32_t start = uptime_ms;
	while (uptime_ms - start < ms)
		;
}

/** Initialize the millisecond timer. */
void mstimer_init(void)
{
	SysTick_Config(SystemCoreClock / 1000);
}

/** Return the number of milliseconds since start.
 *
 * @return Milliseconds
 */
uint32_t mstimer_get(void)
{
	return uptime_ms;
}
