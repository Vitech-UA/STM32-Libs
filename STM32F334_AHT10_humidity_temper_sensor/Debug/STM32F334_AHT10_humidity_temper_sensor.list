
STM32F334_AHT10_humidity_temper_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd8  08004bd8  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004bd8  08004bd8  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bd8  08004bd8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bd8  08004bd8  00014bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000014  08004bf4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  08004bf4  000200d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd59  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bb4  00000000  00000000  0002cd9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd0  00000000  00000000  0002e958  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000be8  00000000  00000000  0002f628  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001b653  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d2a  00000000  00000000  0004b863  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a0783  00000000  00000000  0005558d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f5d10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ec  00000000  00000000  000f5d8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b90 	.word	0x08004b90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004b90 	.word	0x08004b90

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a05      	ldr	r2, [pc, #20]	; (8000a28 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d102      	bne.n	8000a1c <HAL_TIM_PeriodElapsedCallback+0x18>
		T_100ms = 255;
 8000a16:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000a18:	22ff      	movs	r2, #255	; 0xff
 8000a1a:	701a      	strb	r2, [r3, #0]

	}
}
 8000a1c:	bf00      	nop
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40000400 	.word	0x40000400
 8000a2c:	20000003 	.word	0x20000003

08000a30 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a30:	b598      	push	{r3, r4, r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a34:	f000 fb20 	bl	8001078 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a38:	f000 f8aa 	bl	8000b90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a3c:	f000 f994 	bl	8000d68 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a40:	f000 f904 	bl	8000c4c <MX_I2C1_Init>
	MX_TIM3_Init();
 8000a44:	f000 f940 	bl	8000cc8 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim3);
 8000a48:	4844      	ldr	r0, [pc, #272]	; (8000b5c <main+0x12c>)
 8000a4a:	f003 fcad 	bl	80043a8 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {

		if (T_100ms) {
 8000a4e:	4b44      	ldr	r3, [pc, #272]	; (8000b60 <main+0x130>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0fb      	beq.n	8000a4e <main+0x1e>
			if (AHT10_Switcher) {
 8000a56:	4b43      	ldr	r3, [pc, #268]	; (8000b64 <main+0x134>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <main+0x3c>
				HAL_I2C_Master_Transmit_IT(&hi2c1, AHT10_ADDRESS,
 8000a5e:	2303      	movs	r3, #3
 8000a60:	4a41      	ldr	r2, [pc, #260]	; (8000b68 <main+0x138>)
 8000a62:	2170      	movs	r1, #112	; 0x70
 8000a64:	4841      	ldr	r0, [pc, #260]	; (8000b6c <main+0x13c>)
 8000a66:	f000 fee3 	bl	8001830 <HAL_I2C_Master_Transmit_IT>
 8000a6a:	e005      	b.n	8000a78 <main+0x48>
						(uint8_t*) AHT10_TmpHumCmd, 3);
			} else {
				HAL_I2C_Master_Receive_IT(&hi2c1, AHT10_ADDRESS,
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	4a40      	ldr	r2, [pc, #256]	; (8000b70 <main+0x140>)
 8000a70:	2170      	movs	r1, #112	; 0x70
 8000a72:	483e      	ldr	r0, [pc, #248]	; (8000b6c <main+0x13c>)
 8000a74:	f000 ff4c 	bl	8001910 <HAL_I2C_Master_Receive_IT>
						(uint8_t*) AHT10_RX_Data, 6);

			}

			if (~AHT10_RX_Data[0] & 0x80) {
 8000a78:	4b3d      	ldr	r3, [pc, #244]	; (8000b70 <main+0x140>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b25b      	sxtb	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	db59      	blt.n	8000b36 <main+0x106>
				/* Convert to Temperature in °C */
				AHT10_ADC_RAW = (((uint32_t) AHT10_RX_Data[3] & 15) << 16)
 8000a82:	4b3b      	ldr	r3, [pc, #236]	; (8000b70 <main+0x140>)
 8000a84:	78db      	ldrb	r3, [r3, #3]
 8000a86:	041b      	lsls	r3, r3, #16
 8000a88:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
						| ((uint32_t) AHT10_RX_Data[4] << 8) | AHT10_RX_Data[5];
 8000a8c:	4b38      	ldr	r3, [pc, #224]	; (8000b70 <main+0x140>)
 8000a8e:	791b      	ldrb	r3, [r3, #4]
 8000a90:	021b      	lsls	r3, r3, #8
 8000a92:	4313      	orrs	r3, r2
 8000a94:	4a36      	ldr	r2, [pc, #216]	; (8000b70 <main+0x140>)
 8000a96:	7952      	ldrb	r2, [r2, #5]
 8000a98:	4313      	orrs	r3, r2
				AHT10_ADC_RAW = (((uint32_t) AHT10_RX_Data[3] & 15) << 16)
 8000a9a:	4a36      	ldr	r2, [pc, #216]	; (8000b74 <main+0x144>)
 8000a9c:	6013      	str	r3, [r2, #0]
				AHT10_Temperature =
						(float) (AHT10_ADC_RAW * 200.00 / 1048576.00) - 50.00;
 8000a9e:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <main+0x144>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fcd2 	bl	800044c <__aeabi_ui2d>
 8000aa8:	f04f 0200 	mov.w	r2, #0
 8000aac:	4b32      	ldr	r3, [pc, #200]	; (8000b78 <main+0x148>)
 8000aae:	f7ff fd47 	bl	8000540 <__aeabi_dmul>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460c      	mov	r4, r1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	4621      	mov	r1, r4
 8000aba:	f04f 0200 	mov.w	r2, #0
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <main+0x14c>)
 8000ac0:	f7ff fe68 	bl	8000794 <__aeabi_ddiv>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	460c      	mov	r4, r1
 8000ac8:	4618      	mov	r0, r3
 8000aca:	4621      	mov	r1, r4
 8000acc:	f7ff ff4a 	bl	8000964 <__aeabi_d2f>
 8000ad0:	ee07 0a10 	vmov	s14, r0
				AHT10_Temperature =
 8000ad4:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8000b80 <main+0x150>
 8000ad8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000adc:	4b29      	ldr	r3, [pc, #164]	; (8000b84 <main+0x154>)
 8000ade:	edc3 7a00 	vstr	s15, [r3]
				/* Convert to Relative Humidity in % */
				AHT10_ADC_RAW = ((uint32_t) AHT10_RX_Data[1] << 12)
 8000ae2:	4b23      	ldr	r3, [pc, #140]	; (8000b70 <main+0x140>)
 8000ae4:	785b      	ldrb	r3, [r3, #1]
 8000ae6:	031a      	lsls	r2, r3, #12
						| ((uint32_t) AHT10_RX_Data[2] << 4)
 8000ae8:	4b21      	ldr	r3, [pc, #132]	; (8000b70 <main+0x140>)
 8000aea:	789b      	ldrb	r3, [r3, #2]
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	4313      	orrs	r3, r2
						| (AHT10_RX_Data[3] >> 4);
 8000af0:	4a1f      	ldr	r2, [pc, #124]	; (8000b70 <main+0x140>)
 8000af2:	78d2      	ldrb	r2, [r2, #3]
 8000af4:	0912      	lsrs	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	4313      	orrs	r3, r2
				AHT10_ADC_RAW = ((uint32_t) AHT10_RX_Data[1] << 12)
 8000afa:	4a1e      	ldr	r2, [pc, #120]	; (8000b74 <main+0x144>)
 8000afc:	6013      	str	r3, [r2, #0]
				AHT10_Humidity = (float) (AHT10_ADC_RAW * 100.00 / 1048576.00);
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <main+0x144>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff fca2 	bl	800044c <__aeabi_ui2d>
 8000b08:	f04f 0200 	mov.w	r2, #0
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	; (8000b88 <main+0x158>)
 8000b0e:	f7ff fd17 	bl	8000540 <__aeabi_dmul>
 8000b12:	4603      	mov	r3, r0
 8000b14:	460c      	mov	r4, r1
 8000b16:	4618      	mov	r0, r3
 8000b18:	4621      	mov	r1, r4
 8000b1a:	f04f 0200 	mov.w	r2, #0
 8000b1e:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <main+0x14c>)
 8000b20:	f7ff fe38 	bl	8000794 <__aeabi_ddiv>
 8000b24:	4603      	mov	r3, r0
 8000b26:	460c      	mov	r4, r1
 8000b28:	4618      	mov	r0, r3
 8000b2a:	4621      	mov	r1, r4
 8000b2c:	f7ff ff1a 	bl	8000964 <__aeabi_d2f>
 8000b30:	4602      	mov	r2, r0
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <main+0x15c>)
 8000b34:	601a      	str	r2, [r3, #0]
			}

			/* Invert */
			AHT10_Switcher = ~AHT10_Switcher;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <main+0x134>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	43db      	mvns	r3, r3
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <main+0x134>)
 8000b40:	701a      	strb	r2, [r3, #0]
			/* Nullify */
			T_100ms = 0;
 8000b42:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <main+0x130>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
			GPIOA->ODR ^= GPIO_PIN_5;
 8000b48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b52:	f083 0320 	eor.w	r3, r3, #32
 8000b56:	6153      	str	r3, [r2, #20]
		if (T_100ms) {
 8000b58:	e779      	b.n	8000a4e <main+0x1e>
 8000b5a:	bf00      	nop
 8000b5c:	20000084 	.word	0x20000084
 8000b60:	20000003 	.word	0x20000003
 8000b64:	20000004 	.word	0x20000004
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	20000030 	.word	0x20000030
 8000b70:	2000007c 	.word	0x2000007c
 8000b74:	200000cc 	.word	0x200000cc
 8000b78:	40690000 	.word	0x40690000
 8000b7c:	41300000 	.word	0x41300000
 8000b80:	42480000 	.word	0x42480000
 8000b84:	200000c4 	.word	0x200000c4
 8000b88:	40590000 	.word	0x40590000
 8000b8c:	200000c8 	.word	0x200000c8

08000b90 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b096      	sub	sp, #88	; 0x58
 8000b94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b9a:	2228      	movs	r2, #40	; 0x28
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f003 ffee 	bl	8004b80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ba4:	f107 031c 	add.w	r3, r7, #28
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	619a      	str	r2, [r3, #24]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000bc6:	2303      	movs	r3, #3
 8000bc8:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000bca:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd8:	2310      	movs	r3, #16
 8000bda:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be4:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000be6:	2300      	movs	r3, #0
 8000be8:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f002 f98a 	bl	8002f08 <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x6e>
		Error_Handler();
 8000bfa:	f000 f8ff 	bl	8000dfc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2302      	movs	r3, #2
 8000c04:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c06:	2380      	movs	r3, #128	; 0x80
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c0e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	2100      	movs	r1, #0
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f003 f87c 	bl	8003d18 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x9a>
		Error_Handler();
 8000c26:	f000 f8e9 	bl	8000dfc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c2a:	2320      	movs	r3, #32
 8000c2c:	603b      	str	r3, [r7, #0]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000c32:	463b      	mov	r3, r7
 8000c34:	4618      	mov	r0, r3
 8000c36:	f003 fa55 	bl	80040e4 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <SystemClock_Config+0xb4>
		Error_Handler();
 8000c40:	f000 f8dc 	bl	8000dfc <Error_Handler>
	}
}
 8000c44:	bf00      	nop
 8000c46:	3758      	adds	r7, #88	; 0x58
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c52:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <MX_I2C1_Init+0x78>)
 8000c54:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0000020B;
 8000c56:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c58:	f240 220b 	movw	r2, #523	; 0x20b
 8000c5c:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c64:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000c70:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c82:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000c88:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c8a:	f000 fd41 	bl	8001710 <HAL_I2C_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000c94:	f000 f8b2 	bl	8000dfc <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000c9c:	f002 f89c 	bl	8002dd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000ca6:	f000 f8a9 	bl	8000dfc <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000caa:	2100      	movs	r1, #0
 8000cac:	4804      	ldr	r0, [pc, #16]	; (8000cc0 <MX_I2C1_Init+0x74>)
 8000cae:	f002 f8de 	bl	8002e6e <HAL_I2CEx_ConfigDigitalFilter>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_I2C1_Init+0x70>
		Error_Handler();
 8000cb8:	f000 f8a0 	bl	8000dfc <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000030 	.word	0x20000030
 8000cc4:	40005400 	.word	0x40005400

08000cc8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000cce:	f107 0310 	add.w	r3, r7, #16
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <MX_TIM3_Init+0x98>)
 8000ce8:	4a1e      	ldr	r2, [pc, #120]	; (8000d64 <MX_TIM3_Init+0x9c>)
 8000cea:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 800 - 1;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <MX_TIM3_Init+0x98>)
 8000cee:	f240 321f 	movw	r2, #799	; 0x31f
 8000cf2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <MX_TIM3_Init+0x98>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8000cfa:	4b19      	ldr	r3, [pc, #100]	; (8000d60 <MX_TIM3_Init+0x98>)
 8000cfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d00:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <MX_TIM3_Init+0x98>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <MX_TIM3_Init+0x98>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <MX_TIM3_Init+0x98>)
 8000d10:	f003 fb1e 	bl	8004350 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM3_Init+0x56>
		Error_Handler();
 8000d1a:	f000 f86f 	bl	8000dfc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d22:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000d24:	f107 0310 	add.w	r3, r7, #16
 8000d28:	4619      	mov	r1, r3
 8000d2a:	480d      	ldr	r0, [pc, #52]	; (8000d60 <MX_TIM3_Init+0x98>)
 8000d2c:	f003 fc85 	bl	800463a <HAL_TIM_ConfigClockSource>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x72>
		Error_Handler();
 8000d36:	f000 f861 	bl	8000dfc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	4619      	mov	r1, r3
 8000d46:	4806      	ldr	r0, [pc, #24]	; (8000d60 <MX_TIM3_Init+0x98>)
 8000d48:	f003 fe6a 	bl	8004a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_TIM3_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8000d52:	f000 f853 	bl	8000dfc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000084 	.word	0x20000084
 8000d64:	40000400 	.word	0x40000400

08000d68 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
 8000d7c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	; (8000df8 <MX_GPIO_Init+0x90>)
 8000d80:	695b      	ldr	r3, [r3, #20]
 8000d82:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <MX_GPIO_Init+0x90>)
 8000d84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d88:	6153      	str	r3, [r2, #20]
 8000d8a:	4b1b      	ldr	r3, [pc, #108]	; (8000df8 <MX_GPIO_Init+0x90>)
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	4b18      	ldr	r3, [pc, #96]	; (8000df8 <MX_GPIO_Init+0x90>)
 8000d98:	695b      	ldr	r3, [r3, #20]
 8000d9a:	4a17      	ldr	r2, [pc, #92]	; (8000df8 <MX_GPIO_Init+0x90>)
 8000d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da0:	6153      	str	r3, [r2, #20]
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_GPIO_Init+0x90>)
 8000da4:	695b      	ldr	r3, [r3, #20]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	607b      	str	r3, [r7, #4]
 8000dac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_GPIO_Init+0x90>)
 8000db0:	695b      	ldr	r3, [r3, #20]
 8000db2:	4a11      	ldr	r2, [pc, #68]	; (8000df8 <MX_GPIO_Init+0x90>)
 8000db4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db8:	6153      	str	r3, [r2, #20]
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_GPIO_Init+0x90>)
 8000dbc:	695b      	ldr	r3, [r3, #20]
 8000dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2120      	movs	r1, #32
 8000dca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dce:	f000 fc87 	bl	80016e0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dd2:	2320      	movs	r3, #32
 8000dd4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	4619      	mov	r1, r3
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f000 fb06 	bl	80013fc <HAL_GPIO_Init>

}
 8000df0:	bf00      	nop
 8000df2:	3720      	adds	r7, #32
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40021000 	.word	0x40021000

08000dfc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <HAL_MspInit+0x44>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <HAL_MspInit+0x44>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6193      	str	r3, [r2, #24]
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <HAL_MspInit+0x44>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <HAL_MspInit+0x44>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	4a08      	ldr	r2, [pc, #32]	; (8000e50 <HAL_MspInit+0x44>)
 8000e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e34:	61d3      	str	r3, [r2, #28]
 8000e36:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_MspInit+0x44>)
 8000e38:	69db      	ldr	r3, [r3, #28]
 8000e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40021000 	.word	0x40021000

08000e54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08a      	sub	sp, #40	; 0x28
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a2a      	ldr	r2, [pc, #168]	; (8000f1c <HAL_I2C_MspInit+0xc8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d14d      	bne.n	8000f12 <HAL_I2C_MspInit+0xbe>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e76:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	4a29      	ldr	r2, [pc, #164]	; (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e80:	6153      	str	r3, [r2, #20]
 8000e82:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000e84:	695b      	ldr	r3, [r3, #20]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e8a:	613b      	str	r3, [r7, #16]
 8000e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8e:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4a23      	ldr	r2, [pc, #140]	; (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e98:	6153      	str	r3, [r2, #20]
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eac:	2312      	movs	r3, #18
 8000eae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec6:	f000 fa99 	bl	80013fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000eca:	2380      	movs	r3, #128	; 0x80
 8000ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ece:	2312      	movs	r3, #18
 8000ed0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eda:	2304      	movs	r3, #4
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480f      	ldr	r0, [pc, #60]	; (8000f24 <HAL_I2C_MspInit+0xd0>)
 8000ee6:	f000 fa89 	bl	80013fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000ef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef4:	61d3      	str	r3, [r2, #28]
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_I2C_MspInit+0xcc>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efe:	60bb      	str	r3, [r7, #8]
 8000f00:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	201f      	movs	r0, #31
 8000f08:	f000 f9f7 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f0c:	201f      	movs	r0, #31
 8000f0e:	f000 fa10 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3728      	adds	r7, #40	; 0x28
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40005400 	.word	0x40005400
 8000f20:	40021000 	.word	0x40021000
 8000f24:	48000400 	.word	0x48000400

08000f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0d      	ldr	r2, [pc, #52]	; (8000f6c <HAL_TIM_Base_MspInit+0x44>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d113      	bne.n	8000f62 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_TIM_Base_MspInit+0x48>)
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	4a0c      	ldr	r2, [pc, #48]	; (8000f70 <HAL_TIM_Base_MspInit+0x48>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	61d3      	str	r3, [r2, #28]
 8000f46:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <HAL_TIM_Base_MspInit+0x48>)
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2100      	movs	r1, #0
 8000f56:	201d      	movs	r0, #29
 8000f58:	f000 f9cf 	bl	80012fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f5c:	201d      	movs	r0, #29
 8000f5e:	f000 f9e8 	bl	8001332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40000400 	.word	0x40000400
 8000f70:	40021000 	.word	0x40021000

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fc8:	f000 f89c 	bl	8001104 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000fd4:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <TIM3_IRQHandler+0x10>)
 8000fd6:	f003 fa11 	bl	80043fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000084 	.word	0x20000084

08000fe4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fe8:	4802      	ldr	r0, [pc, #8]	; (8000ff4 <I2C1_EV_IRQHandler+0x10>)
 8000fea:	f000 fd01 	bl	80019f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000030 	.word	0x20000030

08000ff8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ffc:	4b08      	ldr	r3, [pc, #32]	; (8001020 <SystemInit+0x28>)
 8000ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001002:	4a07      	ldr	r2, [pc, #28]	; (8001020 <SystemInit+0x28>)
 8001004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <SystemInit+0x28>)
 800100e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001012:	609a      	str	r2, [r3, #8]
#endif
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001028:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800102a:	e003      	b.n	8001034 <LoopCopyDataInit>

0800102c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800102e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001030:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001032:	3104      	adds	r1, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001038:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800103a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800103c:	d3f6      	bcc.n	800102c <CopyDataInit>
	ldr	r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001040:	e002      	b.n	8001048 <LoopFillZerobss>

08001042 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001042:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001044:	f842 3b04 	str.w	r3, [r2], #4

08001048 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <LoopForever+0x16>)
	cmp	r2, r3
 800104a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800104c:	d3f9      	bcc.n	8001042 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800104e:	f7ff ffd3 	bl	8000ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f003 fd71 	bl	8004b38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001056:	f7ff fceb 	bl	8000a30 <main>

0800105a <LoopForever>:

LoopForever:
    b LoopForever
 800105a:	e7fe      	b.n	800105a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800105c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001060:	08004be0 	.word	0x08004be0
	ldr	r0, =_sdata
 8001064:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001068:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 800106c:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8001070:	200000d4 	.word	0x200000d4

08001074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_2_IRQHandler>
	...

08001078 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_Init+0x28>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_Init+0x28>)
 8001082:	f043 0310 	orr.w	r3, r3, #16
 8001086:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001088:	2003      	movs	r0, #3
 800108a:	f000 f92b 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800108e:	2000      	movs	r0, #0
 8001090:	f000 f808 	bl	80010a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001094:	f7ff feba 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40022000 	.word	0x40022000

080010a4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010ac:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_InitTick+0x54>)
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <HAL_InitTick+0x58>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4619      	mov	r1, r3
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	4618      	mov	r0, r3
 80010c4:	f000 f943 	bl	800134e <HAL_SYSTICK_Config>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e00e      	b.n	80010f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b0f      	cmp	r3, #15
 80010d6:	d80a      	bhi.n	80010ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010d8:	2200      	movs	r2, #0
 80010da:	6879      	ldr	r1, [r7, #4]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295
 80010e0:	f000 f90b 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010e4:	4a06      	ldr	r2, [pc, #24]	; (8001100 <HAL_InitTick+0x5c>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e000      	b.n	80010f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000008 	.word	0x20000008
 80010fc:	20000010 	.word	0x20000010
 8001100:	2000000c 	.word	0x2000000c

08001104 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x20>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <HAL_IncTick+0x24>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4413      	add	r3, r2
 8001114:	4a04      	ldr	r2, [pc, #16]	; (8001128 <HAL_IncTick+0x24>)
 8001116:	6013      	str	r3, [r2, #0]
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000010 	.word	0x20000010
 8001128:	200000d0 	.word	0x200000d0

0800112c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <HAL_GetTick+0x14>)
 8001132:	681b      	ldr	r3, [r3, #0]
}
 8001134:	4618      	mov	r0, r3
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	200000d0 	.word	0x200000d0

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800116c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001176:	4a04      	ldr	r2, [pc, #16]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	60d3      	str	r3, [r2, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	db0b      	blt.n	80011d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	f003 021f 	and.w	r2, r3, #31
 80011c0:	4907      	ldr	r1, [pc, #28]	; (80011e0 <__NVIC_EnableIRQ+0x38>)
 80011c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c6:	095b      	lsrs	r3, r3, #5
 80011c8:	2001      	movs	r0, #1
 80011ca:	fa00 f202 	lsl.w	r2, r0, r2
 80011ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011d2:	bf00      	nop
 80011d4:	370c      	adds	r7, #12
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	e000e100 	.word	0xe000e100

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	; (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	; (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	; 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	; 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	; (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff29 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800130c:	f7ff ff3e 	bl	800118c <__NVIC_GetPriorityGrouping>
 8001310:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	6978      	ldr	r0, [r7, #20]
 8001318:	f7ff ff8e 	bl	8001238 <NVIC_EncodePriority>
 800131c:	4602      	mov	r2, r0
 800131e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ff5d 	bl	80011e4 <__NVIC_SetPriority>
}
 800132a:	bf00      	nop
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b082      	sub	sp, #8
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff31 	bl	80011a8 <__NVIC_EnableIRQ>
}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffa2 	bl	80012a0 <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001378:	2b02      	cmp	r3, #2
 800137a:	d005      	beq.n	8001388 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2204      	movs	r2, #4
 8001380:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	73fb      	strb	r3, [r7, #15]
 8001386:	e027      	b.n	80013d8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f022 020e 	bic.w	r2, r2, #14
 8001396:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0201 	bic.w	r2, r2, #1
 80013a6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b0:	2101      	movs	r1, #1
 80013b2:	fa01 f202 	lsl.w	r2, r1, r2
 80013b6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2201      	movs	r2, #1
 80013bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	4798      	blx	r3
    } 
  }
  return status;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b087      	sub	sp, #28
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
 8001404:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800140a:	e14e      	b.n	80016aa <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2101      	movs	r1, #1
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	4013      	ands	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8140 	beq.w	80016a4 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d00b      	beq.n	8001444 <HAL_GPIO_Init+0x48>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	2b02      	cmp	r3, #2
 8001432:	d007      	beq.n	8001444 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001438:	2b11      	cmp	r3, #17
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b12      	cmp	r3, #18
 8001442:	d130      	bne.n	80014a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	2203      	movs	r2, #3
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800147a:	2201      	movs	r2, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	f003 0201 	and.w	r2, r3, #1
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	4013      	ands	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0xea>
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b12      	cmp	r3, #18
 80014e4:	d123      	bne.n	800152e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	08da      	lsrs	r2, r3, #3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	3208      	adds	r2, #8
 80014ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f003 0307 	and.w	r3, r3, #7
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	220f      	movs	r2, #15
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43db      	mvns	r3, r3
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	4013      	ands	r3, r2
 8001508:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	691a      	ldr	r2, [r3, #16]
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	08da      	lsrs	r2, r3, #3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3208      	adds	r2, #8
 8001528:	6939      	ldr	r1, [r7, #16]
 800152a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2203      	movs	r2, #3
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	4013      	ands	r3, r2
 8001544:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f003 0203 	and.w	r2, r3, #3
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	f000 809a 	beq.w	80016a4 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001570:	4b55      	ldr	r3, [pc, #340]	; (80016c8 <HAL_GPIO_Init+0x2cc>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a54      	ldr	r2, [pc, #336]	; (80016c8 <HAL_GPIO_Init+0x2cc>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b52      	ldr	r3, [pc, #328]	; (80016c8 <HAL_GPIO_Init+0x2cc>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0301 	and.w	r3, r3, #1
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001588:	4a50      	ldr	r2, [pc, #320]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	089b      	lsrs	r3, r3, #2
 800158e:	3302      	adds	r3, #2
 8001590:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001594:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	220f      	movs	r2, #15
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015b2:	d013      	beq.n	80015dc <HAL_GPIO_Init+0x1e0>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a46      	ldr	r2, [pc, #280]	; (80016d0 <HAL_GPIO_Init+0x2d4>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d00d      	beq.n	80015d8 <HAL_GPIO_Init+0x1dc>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4a45      	ldr	r2, [pc, #276]	; (80016d4 <HAL_GPIO_Init+0x2d8>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d007      	beq.n	80015d4 <HAL_GPIO_Init+0x1d8>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a44      	ldr	r2, [pc, #272]	; (80016d8 <HAL_GPIO_Init+0x2dc>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d101      	bne.n	80015d0 <HAL_GPIO_Init+0x1d4>
 80015cc:	2303      	movs	r3, #3
 80015ce:	e006      	b.n	80015de <HAL_GPIO_Init+0x1e2>
 80015d0:	2305      	movs	r3, #5
 80015d2:	e004      	b.n	80015de <HAL_GPIO_Init+0x1e2>
 80015d4:	2302      	movs	r3, #2
 80015d6:	e002      	b.n	80015de <HAL_GPIO_Init+0x1e2>
 80015d8:	2301      	movs	r3, #1
 80015da:	e000      	b.n	80015de <HAL_GPIO_Init+0x1e2>
 80015dc:	2300      	movs	r3, #0
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	f002 0203 	and.w	r2, r2, #3
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	4093      	lsls	r3, r2
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015ee:	4937      	ldr	r1, [pc, #220]	; (80016cc <HAL_GPIO_Init+0x2d0>)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	089b      	lsrs	r3, r3, #2
 80015f4:	3302      	adds	r3, #2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015fc:	4b37      	ldr	r3, [pc, #220]	; (80016dc <HAL_GPIO_Init+0x2e0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4313      	orrs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001620:	4a2e      	ldr	r2, [pc, #184]	; (80016dc <HAL_GPIO_Init+0x2e0>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001626:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <HAL_GPIO_Init+0x2e0>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	43db      	mvns	r3, r3
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	4013      	ands	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4313      	orrs	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800164a:	4a24      	ldr	r2, [pc, #144]	; (80016dc <HAL_GPIO_Init+0x2e0>)
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <HAL_GPIO_Init+0x2e0>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001674:	4a19      	ldr	r2, [pc, #100]	; (80016dc <HAL_GPIO_Init+0x2e0>)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_GPIO_Init+0x2e0>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4313      	orrs	r3, r2
 800169c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800169e:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <HAL_GPIO_Init+0x2e0>)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	3301      	adds	r3, #1
 80016a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa22 f303 	lsr.w	r3, r2, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f47f aea9 	bne.w	800140c <HAL_GPIO_Init+0x10>
  }
}
 80016ba:	bf00      	nop
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000
 80016cc:	40010000 	.word	0x40010000
 80016d0:	48000400 	.word	0x48000400
 80016d4:	48000800 	.word	0x48000800
 80016d8:	48000c00 	.word	0x48000c00
 80016dc:	40010400 	.word	0x40010400

080016e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
 80016ec:	4613      	mov	r3, r2
 80016ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016fc:	e002      	b.n	8001704 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d101      	bne.n	8001722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e081      	b.n	8001826 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d106      	bne.n	800173c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f7ff fb8c 	bl	8000e54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2224      	movs	r2, #36	; 0x24
 8001740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f022 0201 	bic.w	r2, r2, #1
 8001752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001760:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001770:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d107      	bne.n	800178a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689a      	ldr	r2, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	e006      	b.n	8001798 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001796:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d104      	bne.n	80017aa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	68da      	ldr	r2, [r3, #12]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	ea42 0103 	orr.w	r1, r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	021a      	lsls	r2, r3, #8
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69d9      	ldr	r1, [r3, #28]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a1a      	ldr	r2, [r3, #32]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2220      	movs	r2, #32
 8001812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2200      	movs	r2, #0
 800181a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	461a      	mov	r2, r3
 800183c:	460b      	mov	r3, r1
 800183e:	817b      	strh	r3, [r7, #10]
 8001840:	4613      	mov	r3, r2
 8001842:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b20      	cmp	r3, #32
 800184e:	d153      	bne.n	80018f8 <HAL_I2C_Master_Transmit_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800185a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800185e:	d101      	bne.n	8001864 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8001860:	2302      	movs	r3, #2
 8001862:	e04a      	b.n	80018fa <HAL_I2C_Master_Transmit_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_I2C_Master_Transmit_IT+0x42>
 800186e:	2302      	movs	r3, #2
 8001870:	e043      	b.n	80018fa <HAL_I2C_Master_Transmit_IT+0xca>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2221      	movs	r2, #33	; 0x21
 800187e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2210      	movs	r2, #16
 8001886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	893a      	ldrh	r2, [r7, #8]
 800189a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_I2C_Master_Transmit_IT+0xd4>)
 80018a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4a18      	ldr	r2, [pc, #96]	; (8001908 <HAL_I2C_Master_Transmit_IT+0xd8>)
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2bff      	cmp	r3, #255	; 0xff
 80018b0:	d906      	bls.n	80018c0 <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	22ff      	movs	r2, #255	; 0xff
 80018b6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80018b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e007      	b.n	80018d0 <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80018ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ce:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	8979      	ldrh	r1, [r7, #10]
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_I2C_Master_Transmit_IT+0xdc>)
 80018da:	9300      	str	r3, [sp, #0]
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	68f8      	ldr	r0, [r7, #12]
 80018e0:	f001 f98a 	bl	8002bf8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80018ec:	2101      	movs	r1, #1
 80018ee:	68f8      	ldr	r0, [r7, #12]
 80018f0:	f001 f9b0 	bl	8002c54 <I2C_Enable_IRQ>

    return HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e000      	b.n	80018fa <HAL_I2C_Master_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80018f8:	2302      	movs	r3, #2
  }
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	ffff0000 	.word	0xffff0000
 8001908:	08001af5 	.word	0x08001af5
 800190c:	80002000 	.word	0x80002000

08001910 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b088      	sub	sp, #32
 8001914:	af02      	add	r7, sp, #8
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	607a      	str	r2, [r7, #4]
 800191a:	461a      	mov	r2, r3
 800191c:	460b      	mov	r3, r1
 800191e:	817b      	strh	r3, [r7, #10]
 8001920:	4613      	mov	r3, r2
 8001922:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b20      	cmp	r3, #32
 800192e:	d153      	bne.n	80019d8 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800193a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800193e:	d101      	bne.n	8001944 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8001940:	2302      	movs	r3, #2
 8001942:	e04a      	b.n	80019da <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800194a:	2b01      	cmp	r3, #1
 800194c:	d101      	bne.n	8001952 <HAL_I2C_Master_Receive_IT+0x42>
 800194e:	2302      	movs	r3, #2
 8001950:	e043      	b.n	80019da <HAL_I2C_Master_Receive_IT+0xca>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2222      	movs	r2, #34	; 0x22
 800195e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2210      	movs	r2, #16
 8001966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	893a      	ldrh	r2, [r7, #8]
 800197a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <HAL_I2C_Master_Receive_IT+0xd4>)
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	4a18      	ldr	r2, [pc, #96]	; (80019e8 <HAL_I2C_Master_Receive_IT+0xd8>)
 8001986:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198c:	b29b      	uxth	r3, r3
 800198e:	2bff      	cmp	r3, #255	; 0xff
 8001990:	d906      	bls.n	80019a0 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	22ff      	movs	r2, #255	; 0xff
 8001996:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001998:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	e007      	b.n	80019b0 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80019aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ae:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	8979      	ldrh	r1, [r7, #10]
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_I2C_Master_Receive_IT+0xdc>)
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f001 f91a 	bl	8002bf8 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80019cc:	2102      	movs	r1, #2
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f001 f940 	bl	8002c54 <I2C_Enable_IRQ>

    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e000      	b.n	80019da <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
  }
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	ffff0000 	.word	0xffff0000
 80019e8:	08001af5 	.word	0x08001af5
 80019ec:	80002400 	.word	0x80002400

080019f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	68f9      	ldr	r1, [r7, #12]
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	4798      	blx	r3
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
 8001a80:	4613      	mov	r3, r2
 8001a82:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <I2C_Master_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <I2C_Master_ISR_IT+0x1e>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e115      	b.n	8001d3e <I2C_Master_ISR_IT+0x24a>
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d013      	beq.n	8001b4e <I2C_Master_ISR_IT+0x5a>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	091b      	lsrs	r3, r3, #4
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00d      	beq.n	8001b4e <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2210      	movs	r2, #16
 8001b38:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f043 0204 	orr.w	r2, r3, #4
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f001 f813 	bl	8002b72 <I2C_Flush_TXDR>
 8001b4c:	e0e2      	b.n	8001d14 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d023      	beq.n	8001ba2 <I2C_Master_ISR_IT+0xae>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	f003 0301 	and.w	r3, r3, #1
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d01d      	beq.n	8001ba2 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ba0:	e0b8      	b.n	8001d14 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	085b      	lsrs	r3, r3, #1
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d01e      	beq.n	8001bec <I2C_Master_ISR_IT+0xf8>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d018      	beq.n	8001bec <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	781a      	ldrb	r2, [r3, #0]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	3b01      	subs	r3, #1
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001bea:	e093      	b.n	8001d14 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	09db      	lsrs	r3, r3, #7
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d05e      	beq.n	8001cb6 <I2C_Master_ISR_IT+0x1c2>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	099b      	lsrs	r3, r3, #6
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d058      	beq.n	8001cb6 <I2C_Master_ISR_IT+0x1c2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d041      	beq.n	8001c92 <I2C_Master_ISR_IT+0x19e>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d13d      	bne.n	8001c92 <I2C_Master_ISR_IT+0x19e>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	b29b      	uxth	r3, r3
 8001c1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c22:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	2bff      	cmp	r3, #255	; 0xff
 8001c2c:	d90e      	bls.n	8001c4c <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	22ff      	movs	r2, #255	; 0xff
 8001c32:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	8a79      	ldrh	r1, [r7, #18]
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f000 ffd7 	bl	8002bf8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c4a:	e033      	b.n	8001cb4 <I2C_Master_ISR_IT+0x1c0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c5e:	d00c      	beq.n	8001c7a <I2C_Master_ISR_IT+0x186>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, hi2c->XferOptions, I2C_NO_STARTSTOP);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c64:	b2da      	uxtb	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001c6a:	8a79      	ldrh	r1, [r7, #18]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	4603      	mov	r3, r0
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 ffc0 	bl	8002bf8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c78:	e01c      	b.n	8001cb4 <I2C_Master_ISR_IT+0x1c0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	8a79      	ldrh	r1, [r7, #18]
 8001c82:	2300      	movs	r3, #0
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c8a:	68f8      	ldr	r0, [r7, #12]
 8001c8c:	f000 ffb4 	bl	8002bf8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c90:	e010      	b.n	8001cb4 <I2C_Master_ISR_IT+0x1c0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ca0:	d003      	beq.n	8001caa <I2C_Master_ISR_IT+0x1b6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 fba9 	bl	80023fa <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ca8:	e034      	b.n	8001d14 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001caa:	2140      	movs	r1, #64	; 0x40
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 fe69 	bl	8002984 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cb2:	e02f      	b.n	8001d14 <I2C_Master_ISR_IT+0x220>
 8001cb4:	e02e      	b.n	8001d14 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	099b      	lsrs	r3, r3, #6
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d028      	beq.n	8001d14 <I2C_Master_ISR_IT+0x220>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	099b      	lsrs	r3, r3, #6
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d022      	beq.n	8001d14 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d119      	bne.n	8001d0c <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ce6:	d015      	beq.n	8001d14 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001cf0:	d108      	bne.n	8001d04 <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	e007      	b.n	8001d14 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001d04:	68f8      	ldr	r0, [r7, #12]
 8001d06:	f000 fb78 	bl	80023fa <I2C_ITMasterSeqCplt>
 8001d0a:	e003      	b.n	8001d14 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001d0c:	2140      	movs	r1, #64	; 0x40
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fe38 	bl	8002984 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	095b      	lsrs	r3, r3, #5
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <I2C_Master_ISR_IT+0x240>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <I2C_Master_ISR_IT+0x240>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8001d2c:	6979      	ldr	r1, [r7, #20]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fbfe 	bl	8002530 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2200      	movs	r2, #0
 8001d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <I2C_Slave_ISR_IT+0x24>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e0ec      	b.n	8001f44 <I2C_Slave_ISR_IT+0x1fe>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	095b      	lsrs	r3, r3, #5
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d009      	beq.n	8001d92 <I2C_Slave_ISR_IT+0x4c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001d8a:	6939      	ldr	r1, [r7, #16]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f000 fc99 	bl	80026c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d04d      	beq.n	8001e3a <I2C_Slave_ISR_IT+0xf4>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d047      	beq.n	8001e3a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d128      	bne.n	8001e06 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b28      	cmp	r3, #40	; 0x28
 8001dbe:	d108      	bne.n	8001dd2 <I2C_Slave_ISR_IT+0x8c>
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001dc6:	d104      	bne.n	8001dd2 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001dc8:	6939      	ldr	r1, [r7, #16]
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 fd84 	bl	80028d8 <I2C_ITListenCplt>
 8001dd0:	e032      	b.n	8001e38 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b29      	cmp	r3, #41	; 0x29
 8001ddc:	d10e      	bne.n	8001dfc <I2C_Slave_ISR_IT+0xb6>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001de4:	d00a      	beq.n	8001dfc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2210      	movs	r2, #16
 8001dec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 febf 	bl	8002b72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 fb3d 	bl	8002474 <I2C_ITSlaveSeqCplt>
 8001dfa:	e01d      	b.n	8001e38 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2210      	movs	r2, #16
 8001e02:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001e04:	e096      	b.n	8001f34 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2210      	movs	r2, #16
 8001e0c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f043 0204 	orr.w	r2, r3, #4
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <I2C_Slave_ISR_IT+0xe4>
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e26:	f040 8085 	bne.w	8001f34 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	4619      	mov	r1, r3
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 fda7 	bl	8002984 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001e36:	e07d      	b.n	8001f34 <I2C_Slave_ISR_IT+0x1ee>
 8001e38:	e07c      	b.n	8001f34 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d030      	beq.n	8001ea8 <I2C_Slave_ISR_IT+0x162>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d02a      	beq.n	8001ea8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d018      	beq.n	8001e8e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d14f      	bne.n	8001f38 <I2C_Slave_ISR_IT+0x1f2>
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e9e:	d04b      	beq.n	8001f38 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 fae7 	bl	8002474 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001ea6:	e047      	b.n	8001f38 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	08db      	lsrs	r3, r3, #3
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00a      	beq.n	8001eca <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	08db      	lsrs	r3, r3, #3
 8001eb8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d004      	beq.n	8001eca <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001ec0:	6939      	ldr	r1, [r7, #16]
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f000 fa15 	bl	80022f2 <I2C_ITAddrCplt>
 8001ec8:	e037      	b.n	8001f3a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d031      	beq.n	8001f3a <I2C_Slave_ISR_IT+0x1f4>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d02b      	beq.n	8001f3a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d018      	beq.n	8001f1e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	851a      	strh	r2, [r3, #40]	; 0x28
 8001f1c:	e00d      	b.n	8001f3a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f24:	d002      	beq.n	8001f2c <I2C_Slave_ISR_IT+0x1e6>
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d106      	bne.n	8001f3a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 faa1 	bl	8002474 <I2C_ITSlaveSeqCplt>
 8001f32:	e002      	b.n	8001f3a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001f34:	bf00      	nop
 8001f36:	e000      	b.n	8001f3a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001f38:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3718      	adds	r7, #24
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b088      	sub	sp, #32
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <I2C_Master_ISR_DMA+0x1a>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e0e1      	b.n	800212a <I2C_Master_ISR_DMA+0x1de>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	091b      	lsrs	r3, r3, #4
 8001f72:	f003 0301 	and.w	r3, r3, #1
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d017      	beq.n	8001faa <I2C_Master_ISR_DMA+0x5e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d011      	beq.n	8001faa <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f043 0204 	orr.w	r2, r3, #4
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001f9a:	2120      	movs	r1, #32
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fe59 	bl	8002c54 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 fde5 	bl	8002b72 <I2C_Flush_TXDR>
 8001fa8:	e0ba      	b.n	8002120 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	09db      	lsrs	r3, r3, #7
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d072      	beq.n	800209c <I2C_Master_ISR_DMA+0x150>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	099b      	lsrs	r3, r3, #6
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d06c      	beq.n	800209c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fd0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d04e      	beq.n	800207a <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fe8:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2bff      	cmp	r3, #255	; 0xff
 8001ff2:	d906      	bls.n	8002002 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	22ff      	movs	r2, #255	; 0xff
 8001ff8:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001ffa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	e010      	b.n	8002024 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002014:	d003      	beq.n	800201e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	e002      	b.n	8002024 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800201e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002022:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002028:	b2da      	uxtb	r2, r3
 800202a:	8a79      	ldrh	r1, [r7, #18]
 800202c:	2300      	movs	r3, #0
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fde0 	bl	8002bf8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203c:	b29a      	uxth	r2, r3
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	b29a      	uxth	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b22      	cmp	r3, #34	; 0x22
 8002054:	d108      	bne.n	8002068 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002064:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002066:	e05b      	b.n	8002120 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002076:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002078:	e052      	b.n	8002120 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002088:	d003      	beq.n	8002092 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 f9b5 	bl	80023fa <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8002090:	e046      	b.n	8002120 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002092:	2140      	movs	r1, #64	; 0x40
 8002094:	68f8      	ldr	r0, [r7, #12]
 8002096:	f000 fc75 	bl	8002984 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800209a:	e041      	b.n	8002120 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	099b      	lsrs	r3, r3, #6
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d029      	beq.n	80020fc <I2C_Master_ISR_DMA+0x1b0>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	099b      	lsrs	r3, r3, #6
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d023      	beq.n	80020fc <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d119      	bne.n	80020f2 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80020cc:	d027      	beq.n	800211e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020d6:	d108      	bne.n	80020ea <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020e6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80020e8:	e019      	b.n	800211e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f000 f985 	bl	80023fa <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80020f0:	e015      	b.n	800211e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80020f2:	2140      	movs	r1, #64	; 0x40
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 fc45 	bl	8002984 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80020fa:	e010      	b.n	800211e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00b      	beq.n	8002120 <I2C_Master_ISR_DMA+0x1d4>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fa0a 	bl	8002530 <I2C_ITMasterCplt>
 800211c:	e000      	b.n	8002120 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800211e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b088      	sub	sp, #32
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800214e:	2b01      	cmp	r3, #1
 8002150:	d101      	bne.n	8002156 <I2C_Slave_ISR_DMA+0x24>
 8002152:	2302      	movs	r3, #2
 8002154:	e0c9      	b.n	80022ea <I2C_Slave_ISR_DMA+0x1b8>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <I2C_Slave_ISR_DMA+0x4c>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	095b      	lsrs	r3, r3, #5
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002176:	68b9      	ldr	r1, [r7, #8]
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f000 faa3 	bl	80026c4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 809a 	beq.w	80022c0 <I2C_Slave_ISR_DMA+0x18e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8093 	beq.w	80022c0 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0b9b      	lsrs	r3, r3, #14
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d105      	bne.n	80021b2 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	0bdb      	lsrs	r3, r3, #15
 80021aa:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d07f      	beq.n	80022b2 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00d      	beq.n	80021d6 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0bdb      	lsrs	r3, r3, #15
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80021d2:	2301      	movs	r3, #1
 80021d4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00d      	beq.n	80021fa <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0b9b      	lsrs	r3, r3, #14
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d007      	beq.n	80021fa <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80021f6:	2301      	movs	r3, #1
 80021f8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d128      	bne.n	8002252 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b28      	cmp	r3, #40	; 0x28
 800220a:	d108      	bne.n	800221e <I2C_Slave_ISR_DMA+0xec>
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002212:	d104      	bne.n	800221e <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fb5e 	bl	80028d8 <I2C_ITListenCplt>
 800221c:	e048      	b.n	80022b0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b29      	cmp	r3, #41	; 0x29
 8002228:	d10e      	bne.n	8002248 <I2C_Slave_ISR_DMA+0x116>
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002230:	d00a      	beq.n	8002248 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2210      	movs	r2, #16
 8002238:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fc99 	bl	8002b72 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f917 	bl	8002474 <I2C_ITSlaveSeqCplt>
 8002246:	e033      	b.n	80022b0 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2210      	movs	r2, #16
 800224e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002250:	e034      	b.n	80022bc <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2210      	movs	r2, #16
 8002258:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f043 0204 	orr.w	r2, r3, #4
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <I2C_Slave_ISR_DMA+0x14a>
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800227a:	d11f      	bne.n	80022bc <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	2b21      	cmp	r3, #33	; 0x21
 8002280:	d002      	beq.n	8002288 <I2C_Slave_ISR_DMA+0x156>
 8002282:	7dfb      	ldrb	r3, [r7, #23]
 8002284:	2b29      	cmp	r3, #41	; 0x29
 8002286:	d103      	bne.n	8002290 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2221      	movs	r2, #33	; 0x21
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
 800228e:	e008      	b.n	80022a2 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002290:	7dfb      	ldrb	r3, [r7, #23]
 8002292:	2b22      	cmp	r3, #34	; 0x22
 8002294:	d002      	beq.n	800229c <I2C_Slave_ISR_DMA+0x16a>
 8002296:	7dfb      	ldrb	r3, [r7, #23]
 8002298:	2b2a      	cmp	r3, #42	; 0x2a
 800229a:	d102      	bne.n	80022a2 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2222      	movs	r2, #34	; 0x22
 80022a0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4619      	mov	r1, r3
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 fb6b 	bl	8002984 <I2C_ITError>
      if (treatdmanack == 1U)
 80022ae:	e005      	b.n	80022bc <I2C_Slave_ISR_DMA+0x18a>
 80022b0:	e004      	b.n	80022bc <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2210      	movs	r2, #16
 80022b8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80022ba:	e011      	b.n	80022e0 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 80022bc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80022be:	e00f      	b.n	80022e0 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	08db      	lsrs	r3, r3, #3
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d009      	beq.n	80022e0 <I2C_Slave_ISR_DMA+0x1ae>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	08db      	lsrs	r3, r3, #3
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f809 	bl	80022f2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b084      	sub	sp, #16
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002308:	2b28      	cmp	r3, #40	; 0x28
 800230a:	d16a      	bne.n	80023e2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	0c1b      	lsrs	r3, r3, #16
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	0c1b      	lsrs	r3, r3, #16
 8002324:	b29b      	uxth	r3, r3
 8002326:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800232a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	b29b      	uxth	r3, r3
 8002334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002338:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	b29b      	uxth	r3, r3
 8002342:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002346:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d138      	bne.n	80023c2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002350:	897b      	ldrh	r3, [r7, #10]
 8002352:	09db      	lsrs	r3, r3, #7
 8002354:	b29a      	uxth	r2, r3
 8002356:	89bb      	ldrh	r3, [r7, #12]
 8002358:	4053      	eors	r3, r2
 800235a:	b29b      	uxth	r3, r3
 800235c:	f003 0306 	and.w	r3, r3, #6
 8002360:	2b00      	cmp	r3, #0
 8002362:	d11c      	bne.n	800239e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002364:	897b      	ldrh	r3, [r7, #10]
 8002366:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	2b02      	cmp	r3, #2
 8002378:	d13b      	bne.n	80023f2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2208      	movs	r2, #8
 8002386:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002390:	89ba      	ldrh	r2, [r7, #12]
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff fb6c 	bl	8001a74 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800239c:	e029      	b.n	80023f2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800239e:	893b      	ldrh	r3, [r7, #8]
 80023a0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 fcb8 	bl	8002d1c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023b4:	89ba      	ldrh	r2, [r7, #12]
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
 80023b8:	4619      	mov	r1, r3
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff fb5a 	bl	8001a74 <HAL_I2C_AddrCallback>
}
 80023c0:	e017      	b.n	80023f2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80023c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 fca8 	bl	8002d1c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80023d4:	89ba      	ldrh	r2, [r7, #12]
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	4619      	mov	r1, r3
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fb4a 	bl	8001a74 <HAL_I2C_AddrCallback>
}
 80023e0:	e007      	b.n	80023f2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2208      	movs	r2, #8
 80023e8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80023f2:	bf00      	nop
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b21      	cmp	r3, #33	; 0x21
 8002414:	d115      	bne.n	8002442 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2211      	movs	r2, #17
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800242a:	2101      	movs	r1, #1
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 fc75 	bl	8002d1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f7ff faf2 	bl	8001a24 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002440:	e014      	b.n	800246c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2220      	movs	r2, #32
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2212      	movs	r2, #18
 800244e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002456:	2102      	movs	r1, #2
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fc5f 	bl	8002d1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f7ff fae6 	bl	8001a38 <HAL_I2C_MasterRxCpltCallback>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	0b9b      	lsrs	r3, r3, #14
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e00d      	b.n	80024c6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	0bdb      	lsrs	r3, r3, #15
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b29      	cmp	r3, #41	; 0x29
 80024d0:	d112      	bne.n	80024f8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2228      	movs	r2, #40	; 0x28
 80024d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2221      	movs	r2, #33	; 0x21
 80024de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80024e0:	2101      	movs	r1, #1
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fc1a 	bl	8002d1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f7ff faab 	bl	8001a4c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80024f6:	e017      	b.n	8002528 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b2a      	cmp	r3, #42	; 0x2a
 8002502:	d111      	bne.n	8002528 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2228      	movs	r2, #40	; 0x28
 8002508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2222      	movs	r2, #34	; 0x22
 8002510:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002512:	2102      	movs	r1, #2
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 fc01 	bl	8002d1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff fa9c 	bl	8001a60 <HAL_I2C_SlaveRxCpltCallback>
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2220      	movs	r2, #32
 8002544:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b21      	cmp	r3, #33	; 0x21
 8002550:	d107      	bne.n	8002562 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002552:	2101      	movs	r1, #1
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fbe1 	bl	8002d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2211      	movs	r2, #17
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
 8002560:	e00c      	b.n	800257c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b22      	cmp	r3, #34	; 0x22
 800256c:	d106      	bne.n	800257c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800256e:	2102      	movs	r1, #2
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fbd3 	bl	8002d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2212      	movs	r2, #18
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b4d      	ldr	r3, [pc, #308]	; (80026bc <I2C_ITMasterCplt+0x18c>)
 8002588:	400b      	ands	r3, r1
 800258a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4a      	ldr	r2, [pc, #296]	; (80026c0 <I2C_ITMasterCplt+0x190>)
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d009      	beq.n	80025b8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2210      	movs	r2, #16
 80025aa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b0:	f043 0204 	orr.w	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b60      	cmp	r3, #96	; 0x60
 80025c2:	d10b      	bne.n	80025dc <I2C_ITMasterCplt+0xac>
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	089b      	lsrs	r3, r3, #2
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80025da:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 fac8 	bl	8002b72 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b60      	cmp	r3, #96	; 0x60
 80025f2:	d002      	beq.n	80025fa <I2C_ITMasterCplt+0xca>
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d006      	beq.n	8002608 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	4619      	mov	r1, r3
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f9bf 	bl	8002984 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002606:	e054      	b.n	80026b2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b21      	cmp	r3, #33	; 0x21
 8002612:	d124      	bne.n	800265e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b40      	cmp	r3, #64	; 0x40
 800262c:	d10b      	bne.n	8002646 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff fa30 	bl	8001aa4 <HAL_I2C_MemTxCpltCallback>
}
 8002644:	e035      	b.n	80026b2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff f9e4 	bl	8001a24 <HAL_I2C_MasterTxCpltCallback>
}
 800265c:	e029      	b.n	80026b2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b22      	cmp	r3, #34	; 0x22
 8002668:	d123      	bne.n	80026b2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2220      	movs	r2, #32
 800266e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b40      	cmp	r3, #64	; 0x40
 8002682:	d10b      	bne.n	800269c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f7ff fa0f 	bl	8001ab8 <HAL_I2C_MemRxCpltCallback>
}
 800269a:	e00a      	b.n	80026b2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff f9c3 	bl	8001a38 <HAL_I2C_MasterRxCpltCallback>
}
 80026b2:	bf00      	nop
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	fe00e800 	.word	0xfe00e800
 80026c0:	ffff0000 	.word	0xffff0000

080026c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026e0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2220      	movs	r2, #32
 80026e8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	2b21      	cmp	r3, #33	; 0x21
 80026ee:	d002      	beq.n	80026f6 <I2C_ITSlaveCplt+0x32>
 80026f0:	7bfb      	ldrb	r3, [r7, #15]
 80026f2:	2b29      	cmp	r3, #41	; 0x29
 80026f4:	d108      	bne.n	8002708 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80026f6:	f248 0101 	movw	r1, #32769	; 0x8001
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fb0e 	bl	8002d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2221      	movs	r2, #33	; 0x21
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
 8002706:	e00d      	b.n	8002724 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	2b22      	cmp	r3, #34	; 0x22
 800270c:	d002      	beq.n	8002714 <I2C_ITSlaveCplt+0x50>
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b2a      	cmp	r3, #42	; 0x2a
 8002712:	d107      	bne.n	8002724 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002714:	f248 0102 	movw	r1, #32770	; 0x8002
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 faff 	bl	8002d1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2222      	movs	r2, #34	; 0x22
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	685a      	ldr	r2, [r3, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002732:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	6859      	ldr	r1, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <I2C_ITSlaveCplt+0x20c>)
 8002740:	400b      	ands	r3, r1
 8002742:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fa14 	bl	8002b72 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	0b9b      	lsrs	r3, r3, #14
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d013      	beq.n	800277e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002764:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	2b00      	cmp	r3, #0
 800276c:	d020      	beq.n	80027b0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	b29a      	uxth	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800277c:	e018      	b.n	80027b0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	0bdb      	lsrs	r3, r3, #15
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	d012      	beq.n	80027b0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002798:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d006      	beq.n	80027b0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	089b      	lsrs	r3, r3, #2
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d020      	beq.n	80027fe <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	f023 0304 	bic.w	r3, r3, #4
 80027c2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00c      	beq.n	80027fe <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	3b01      	subs	r3, #1
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002802:	b29b      	uxth	r3, r3
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280c:	f043 0204 	orr.w	r2, r3, #4
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	2b00      	cmp	r3, #0
 8002828:	d010      	beq.n	800284c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	4619      	mov	r1, r3
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 f8a7 	bl	8002984 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b28      	cmp	r3, #40	; 0x28
 8002840:	d141      	bne.n	80028c6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002842:	6979      	ldr	r1, [r7, #20]
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f847 	bl	80028d8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800284a:	e03c      	b.n	80028c6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002854:	d014      	beq.n	8002880 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff fe0c 	bl	8002474 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <I2C_ITSlaveCplt+0x210>)
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2220      	movs	r2, #32
 8002866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff f909 	bl	8001a90 <HAL_I2C_ListenCpltCallback>
}
 800287e:	e022      	b.n	80028c6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b22      	cmp	r3, #34	; 0x22
 800288a:	d10e      	bne.n	80028aa <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2220      	movs	r2, #32
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff f8dc 	bl	8001a60 <HAL_I2C_SlaveRxCpltCallback>
}
 80028a8:	e00d      	b.n	80028c6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff f8c3 	bl	8001a4c <HAL_I2C_SlaveTxCpltCallback>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	fe00e800 	.word	0xfe00e800
 80028d4:	ffff0000 	.word	0xffff0000

080028d8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a26      	ldr	r2, [pc, #152]	; (8002980 <I2C_ITListenCplt+0xa8>)
 80028e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d022      	beq.n	8002956 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292c:	2b00      	cmp	r3, #0
 800292e:	d012      	beq.n	8002956 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002934:	3b01      	subs	r3, #1
 8002936:	b29a      	uxth	r2, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	f043 0204 	orr.w	r2, r3, #4
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002956:	f248 0103 	movw	r1, #32771	; 0x8003
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f9de 	bl	8002d1c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2210      	movs	r2, #16
 8002966:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff f88d 	bl	8001a90 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	ffff0000 	.word	0xffff0000

08002984 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002994:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a5d      	ldr	r2, [pc, #372]	; (8002b18 <I2C_ITError+0x194>)
 80029a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
 80029b8:	2b28      	cmp	r3, #40	; 0x28
 80029ba:	d005      	beq.n	80029c8 <I2C_ITError+0x44>
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	2b29      	cmp	r3, #41	; 0x29
 80029c0:	d002      	beq.n	80029c8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80029c2:	7bfb      	ldrb	r3, [r7, #15]
 80029c4:	2b2a      	cmp	r3, #42	; 0x2a
 80029c6:	d10b      	bne.n	80029e0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029c8:	2103      	movs	r1, #3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f9a6 	bl	8002d1c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2228      	movs	r2, #40	; 0x28
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a50      	ldr	r2, [pc, #320]	; (8002b1c <I2C_ITError+0x198>)
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34
 80029de:	e011      	b.n	8002a04 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029e0:	f248 0103 	movw	r1, #32771	; 0x8003
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f999 	bl	8002d1c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b60      	cmp	r3, #96	; 0x60
 80029f4:	d003      	beq.n	80029fe <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2220      	movs	r2, #32
 80029fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d039      	beq.n	8002a86 <I2C_ITError+0x102>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b11      	cmp	r3, #17
 8002a16:	d002      	beq.n	8002a1e <I2C_ITError+0x9a>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b21      	cmp	r3, #33	; 0x21
 8002a1c:	d133      	bne.n	8002a86 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a2c:	d107      	bne.n	8002a3e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a3c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe fccd 	bl	80013e2 <HAL_DMA_GetState>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d017      	beq.n	8002a7e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a52:	4a33      	ldr	r2, [pc, #204]	; (8002b20 <I2C_ITError+0x19c>)
 8002a54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7fe fc7f 	bl	8001366 <HAL_DMA_Abort_IT>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d04d      	beq.n	8002b0a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a78:	4610      	mov	r0, r2
 8002a7a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a7c:	e045      	b.n	8002b0a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f850 	bl	8002b24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a84:	e041      	b.n	8002b0a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d039      	beq.n	8002b02 <I2C_ITError+0x17e>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b12      	cmp	r3, #18
 8002a92:	d002      	beq.n	8002a9a <I2C_ITError+0x116>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b22      	cmp	r3, #34	; 0x22
 8002a98:	d133      	bne.n	8002b02 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa8:	d107      	bne.n	8002aba <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ab8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fc8f 	bl	80013e2 <HAL_DMA_GetState>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d017      	beq.n	8002afa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <I2C_ITError+0x19c>)
 8002ad0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fc41 	bl	8001366 <HAL_DMA_Abort_IT>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d011      	beq.n	8002b0e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002af4:	4610      	mov	r0, r2
 8002af6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002af8:	e009      	b.n	8002b0e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f812 	bl	8002b24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b00:	e005      	b.n	8002b0e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f80e 	bl	8002b24 <I2C_TreatErrorCallback>
  }
}
 8002b08:	e002      	b.n	8002b10 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b0a:	bf00      	nop
 8002b0c:	e000      	b.n	8002b10 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b0e:	bf00      	nop
}
 8002b10:	bf00      	nop
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	ffff0000 	.word	0xffff0000
 8002b1c:	08001d47 	.word	0x08001d47
 8002b20:	08002bbb 	.word	0x08002bbb

08002b24 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b60      	cmp	r3, #96	; 0x60
 8002b36:	d10e      	bne.n	8002b56 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe ffc6 	bl	8001ae0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b54:	e009      	b.n	8002b6a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7fe ffb1 	bl	8001acc <HAL_I2C_ErrorCallback>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d103      	bne.n	8002b90 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d007      	beq.n	8002bae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699a      	ldr	r2, [r3, #24]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	619a      	str	r2, [r3, #24]
  }
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be4:	2200      	movs	r2, #0
 8002be6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f7ff ff9b 	bl	8002b24 <I2C_TreatErrorCallback>
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	607b      	str	r3, [r7, #4]
 8002c02:	460b      	mov	r3, r1
 8002c04:	817b      	strh	r3, [r7, #10]
 8002c06:	4613      	mov	r3, r2
 8002c08:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	0d5b      	lsrs	r3, r3, #21
 8002c14:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c18:	4b0d      	ldr	r3, [pc, #52]	; (8002c50 <I2C_TransferConfig+0x58>)
 8002c1a:	430b      	orrs	r3, r1
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	ea02 0103 	and.w	r1, r2, r3
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002c28:	7a7b      	ldrb	r3, [r7, #9]
 8002c2a:	041b      	lsls	r3, r3, #16
 8002c2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	03ff63ff 	.word	0x03ff63ff

08002c54 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c68:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <I2C_Enable_IRQ+0xc0>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d004      	beq.n	8002c78 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002c72:	4a29      	ldr	r2, [pc, #164]	; (8002d18 <I2C_Enable_IRQ+0xc4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d11d      	bne.n	8002cb4 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002c78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da03      	bge.n	8002c88 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002c86:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002c88:	887b      	ldrh	r3, [r7, #2]
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d103      	bne.n	8002c96 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002c94:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002c96:	887b      	ldrh	r3, [r7, #2]
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	d103      	bne.n	8002ca4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ca2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002ca4:	887b      	ldrh	r3, [r7, #2]
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d125      	bne.n	8002cf6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cb0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002cb2:	e020      	b.n	8002cf6 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002cb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	da03      	bge.n	8002cc4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002cc2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002cc4:	887b      	ldrh	r3, [r7, #2]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002cd4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002ce6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002ce8:	887b      	ldrh	r3, [r7, #2]
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d103      	bne.n	8002cf6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f043 0320 	orr.w	r3, r3, #32
 8002cf4:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6819      	ldr	r1, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	08001f4d 	.word	0x08001f4d
 8002d18:	08002133 	.word	0x08002133

08002d1c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002d2c:	887b      	ldrh	r3, [r7, #2]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00f      	beq.n	8002d56 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8002d3c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d4a:	2b28      	cmp	r3, #40	; 0x28
 8002d4c:	d003      	beq.n	8002d56 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002d54:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002d56:	887b      	ldrh	r3, [r7, #2]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00f      	beq.n	8002d80 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002d66:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d74:	2b28      	cmp	r3, #40	; 0x28
 8002d76:	d003      	beq.n	8002d80 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002d7e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002d80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	da03      	bge.n	8002d90 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002d8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002d90:	887b      	ldrh	r3, [r7, #2]
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d103      	bne.n	8002d9e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002d9c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	2b20      	cmp	r3, #32
 8002da2:	d103      	bne.n	8002dac <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f043 0320 	orr.w	r3, r3, #32
 8002daa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002dac:	887b      	ldrh	r3, [r7, #2]
 8002dae:	2b40      	cmp	r3, #64	; 0x40
 8002db0:	d103      	bne.n	8002dba <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6819      	ldr	r1, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	400a      	ands	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	d138      	bne.n	8002e60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e032      	b.n	8002e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2224      	movs	r2, #36	; 0x24
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e000      	b.n	8002e62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e60:	2302      	movs	r3, #2
  }
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e6e:	b480      	push	{r7}
 8002e70:	b085      	sub	sp, #20
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	6078      	str	r0, [r7, #4]
 8002e76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b20      	cmp	r3, #32
 8002e82:	d139      	bne.n	8002ef8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d101      	bne.n	8002e92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e033      	b.n	8002efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2224      	movs	r2, #36	; 0x24
 8002e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0201 	bic.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002ec0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e000      	b.n	8002efa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
  }
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	1d3b      	adds	r3, r7, #4
 8002f12:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f14:	1d3b      	adds	r3, r7, #4
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d102      	bne.n	8002f22 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	f000 bef4 	b.w	8003d0a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0301 	and.w	r3, r3, #1
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 816a 	beq.w	8003206 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002f32:	4bb3      	ldr	r3, [pc, #716]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 030c 	and.w	r3, r3, #12
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d00c      	beq.n	8002f58 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f3e:	4bb0      	ldr	r3, [pc, #704]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	2b08      	cmp	r3, #8
 8002f48:	d159      	bne.n	8002ffe <HAL_RCC_OscConfig+0xf6>
 8002f4a:	4bad      	ldr	r3, [pc, #692]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f56:	d152      	bne.n	8002ffe <HAL_RCC_OscConfig+0xf6>
 8002f58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f5c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002f64:	fa93 f3a3 	rbit	r3, r3
 8002f68:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f6c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f70:	fab3 f383 	clz	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	095b      	lsrs	r3, r3, #5
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d102      	bne.n	8002f8a <HAL_RCC_OscConfig+0x82>
 8002f84:	4b9e      	ldr	r3, [pc, #632]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	e015      	b.n	8002fb6 <HAL_RCC_OscConfig+0xae>
 8002f8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f8e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fa2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002fa6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002fb2:	4b93      	ldr	r3, [pc, #588]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fba:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002fbe:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002fc2:	fa92 f2a2 	rbit	r2, r2
 8002fc6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002fca:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002fce:	fab2 f282 	clz	r2, r2
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f042 0220 	orr.w	r2, r2, #32
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	f002 021f 	and.w	r2, r2, #31
 8002fde:	2101      	movs	r1, #1
 8002fe0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 810c 	beq.w	8003204 <HAL_RCC_OscConfig+0x2fc>
 8002fec:	1d3b      	adds	r3, r7, #4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f040 8106 	bne.w	8003204 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	f000 be86 	b.w	8003d0a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ffe:	1d3b      	adds	r3, r7, #4
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d106      	bne.n	8003018 <HAL_RCC_OscConfig+0x110>
 800300a:	4b7d      	ldr	r3, [pc, #500]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a7c      	ldr	r2, [pc, #496]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e030      	b.n	800307a <HAL_RCC_OscConfig+0x172>
 8003018:	1d3b      	adds	r3, r7, #4
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x134>
 8003022:	4b77      	ldr	r3, [pc, #476]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a76      	ldr	r2, [pc, #472]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8003028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b74      	ldr	r3, [pc, #464]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a73      	ldr	r2, [pc, #460]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8003034:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e01e      	b.n	800307a <HAL_RCC_OscConfig+0x172>
 800303c:	1d3b      	adds	r3, r7, #4
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003046:	d10c      	bne.n	8003062 <HAL_RCC_OscConfig+0x15a>
 8003048:	4b6d      	ldr	r3, [pc, #436]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a6c      	ldr	r2, [pc, #432]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 800304e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003052:	6013      	str	r3, [r2, #0]
 8003054:	4b6a      	ldr	r3, [pc, #424]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a69      	ldr	r2, [pc, #420]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 800305a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	e00b      	b.n	800307a <HAL_RCC_OscConfig+0x172>
 8003062:	4b67      	ldr	r3, [pc, #412]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a66      	ldr	r2, [pc, #408]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8003068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4b64      	ldr	r3, [pc, #400]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a63      	ldr	r2, [pc, #396]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8003074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003078:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800307a:	4b61      	ldr	r3, [pc, #388]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 800307c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307e:	f023 020f 	bic.w	r2, r3, #15
 8003082:	1d3b      	adds	r3, r7, #4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	495d      	ldr	r1, [pc, #372]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 800308a:	4313      	orrs	r3, r2
 800308c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800308e:	1d3b      	adds	r3, r7, #4
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d059      	beq.n	800314c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7fe f848 	bl	800112c <HAL_GetTick>
 800309c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a0:	e00a      	b.n	80030b8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a2:	f7fe f843 	bl	800112c <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d902      	bls.n	80030b8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	f000 be29 	b.w	8003d0a <HAL_RCC_OscConfig+0xe02>
 80030b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030bc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80030cc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030d0:	fab3 f383 	clz	r3, r3
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d102      	bne.n	80030ea <HAL_RCC_OscConfig+0x1e2>
 80030e4:	4b46      	ldr	r3, [pc, #280]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	e015      	b.n	8003116 <HAL_RCC_OscConfig+0x20e>
 80030ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030ee:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80030f6:	fa93 f3a3 	rbit	r3, r3
 80030fa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80030fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003102:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003106:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003112:	4b3b      	ldr	r3, [pc, #236]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800311a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800311e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003122:	fa92 f2a2 	rbit	r2, r2
 8003126:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800312a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800312e:	fab2 f282 	clz	r2, r2
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	f042 0220 	orr.w	r2, r2, #32
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	f002 021f 	and.w	r2, r2, #31
 800313e:	2101      	movs	r1, #1
 8003140:	fa01 f202 	lsl.w	r2, r1, r2
 8003144:	4013      	ands	r3, r2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ab      	beq.n	80030a2 <HAL_RCC_OscConfig+0x19a>
 800314a:	e05c      	b.n	8003206 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fd ffee 	bl	800112c <HAL_GetTick>
 8003150:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003156:	f7fd ffe9 	bl	800112c <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	; 0x64
 8003164:	d902      	bls.n	800316c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	f000 bdcf 	b.w	8003d0a <HAL_RCC_OscConfig+0xe02>
 800316c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003170:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003174:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003180:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003184:	fab3 f383 	clz	r3, r3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	095b      	lsrs	r3, r3, #5
 800318c:	b2db      	uxtb	r3, r3
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	b2db      	uxtb	r3, r3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d102      	bne.n	800319e <HAL_RCC_OscConfig+0x296>
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	e015      	b.n	80031ca <HAL_RCC_OscConfig+0x2c2>
 800319e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031a2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80031b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031b6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80031ba:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80031be:	fa93 f3a3 	rbit	r3, r3
 80031c2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80031c6:	4b0e      	ldr	r3, [pc, #56]	; (8003200 <HAL_RCC_OscConfig+0x2f8>)
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031ce:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80031d2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80031d6:	fa92 f2a2 	rbit	r2, r2
 80031da:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80031de:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80031e2:	fab2 f282 	clz	r2, r2
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	f042 0220 	orr.w	r2, r2, #32
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	f002 021f 	and.w	r2, r2, #31
 80031f2:	2101      	movs	r1, #1
 80031f4:	fa01 f202 	lsl.w	r2, r1, r2
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1ab      	bne.n	8003156 <HAL_RCC_OscConfig+0x24e>
 80031fe:	e002      	b.n	8003206 <HAL_RCC_OscConfig+0x2fe>
 8003200:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 816f 	beq.w	80034f4 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003216:	4bd0      	ldr	r3, [pc, #832]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f003 030c 	and.w	r3, r3, #12
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003222:	4bcd      	ldr	r3, [pc, #820]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b08      	cmp	r3, #8
 800322c:	d16c      	bne.n	8003308 <HAL_RCC_OscConfig+0x400>
 800322e:	4bca      	ldr	r3, [pc, #808]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d166      	bne.n	8003308 <HAL_RCC_OscConfig+0x400>
 800323a:	2302      	movs	r3, #2
 800323c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003240:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003244:	fa93 f3a3 	rbit	r3, r3
 8003248:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800324c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003250:	fab3 f383 	clz	r3, r3
 8003254:	b2db      	uxtb	r3, r3
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b01      	cmp	r3, #1
 8003262:	d102      	bne.n	800326a <HAL_RCC_OscConfig+0x362>
 8003264:	4bbc      	ldr	r3, [pc, #752]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	e013      	b.n	8003292 <HAL_RCC_OscConfig+0x38a>
 800326a:	2302      	movs	r3, #2
 800326c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003270:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800327c:	2302      	movs	r3, #2
 800327e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003282:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800328e:	4bb2      	ldr	r3, [pc, #712]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	2202      	movs	r2, #2
 8003294:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003298:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800329c:	fa92 f2a2 	rbit	r2, r2
 80032a0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80032a4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80032a8:	fab2 f282 	clz	r2, r2
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	f042 0220 	orr.w	r2, r2, #32
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	f002 021f 	and.w	r2, r2, #31
 80032b8:	2101      	movs	r1, #1
 80032ba:	fa01 f202 	lsl.w	r2, r1, r2
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d007      	beq.n	80032d4 <HAL_RCC_OscConfig+0x3cc>
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f000 bd1b 	b.w	8003d0a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	4ba0      	ldr	r3, [pc, #640]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032dc:	1d3b      	adds	r3, r7, #4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	21f8      	movs	r1, #248	; 0xf8
 80032e4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80032ec:	fa91 f1a1 	rbit	r1, r1
 80032f0:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80032f4:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80032f8:	fab1 f181 	clz	r1, r1
 80032fc:	b2c9      	uxtb	r1, r1
 80032fe:	408b      	lsls	r3, r1
 8003300:	4995      	ldr	r1, [pc, #596]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003306:	e0f5      	b.n	80034f4 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003308:	1d3b      	adds	r3, r7, #4
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8085 	beq.w	800341e <HAL_RCC_OscConfig+0x516>
 8003314:	2301      	movs	r3, #1
 8003316:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003326:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003334:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	461a      	mov	r2, r3
 800333c:	2301      	movs	r3, #1
 800333e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fd fef4 	bl	800112c <HAL_GetTick>
 8003344:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334a:	f7fd feef 	bl	800112c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d902      	bls.n	8003360 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f000 bcd5 	b.w	8003d0a <HAL_RCC_OscConfig+0xe02>
 8003360:	2302      	movs	r3, #2
 8003362:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003372:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d102      	bne.n	8003390 <HAL_RCC_OscConfig+0x488>
 800338a:	4b73      	ldr	r3, [pc, #460]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	e013      	b.n	80033b8 <HAL_RCC_OscConfig+0x4b0>
 8003390:	2302      	movs	r3, #2
 8003392:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80033a2:	2302      	movs	r3, #2
 80033a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80033a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80033b4:	4b68      	ldr	r3, [pc, #416]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	2202      	movs	r2, #2
 80033ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80033be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80033c2:	fa92 f2a2 	rbit	r2, r2
 80033c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80033ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80033ce:	fab2 f282 	clz	r2, r2
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	f042 0220 	orr.w	r2, r2, #32
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	f002 021f 	and.w	r2, r2, #31
 80033de:	2101      	movs	r1, #1
 80033e0:	fa01 f202 	lsl.w	r2, r1, r2
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0af      	beq.n	800334a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ea:	4b5b      	ldr	r3, [pc, #364]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f2:	1d3b      	adds	r3, r7, #4
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	21f8      	movs	r1, #248	; 0xf8
 80033fa:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033fe:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003402:	fa91 f1a1 	rbit	r1, r1
 8003406:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800340a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800340e:	fab1 f181 	clz	r1, r1
 8003412:	b2c9      	uxtb	r1, r1
 8003414:	408b      	lsls	r3, r1
 8003416:	4950      	ldr	r1, [pc, #320]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 8003418:	4313      	orrs	r3, r2
 800341a:	600b      	str	r3, [r1, #0]
 800341c:	e06a      	b.n	80034f4 <HAL_RCC_OscConfig+0x5ec>
 800341e:	2301      	movs	r3, #1
 8003420:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003430:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800343e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	461a      	mov	r2, r3
 8003446:	2300      	movs	r3, #0
 8003448:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7fd fe6f 	bl	800112c <HAL_GetTick>
 800344e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003454:	f7fd fe6a 	bl	800112c <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d902      	bls.n	800346a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	f000 bc50 	b.w	8003d0a <HAL_RCC_OscConfig+0xe02>
 800346a:	2302      	movs	r3, #2
 800346c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800347c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d102      	bne.n	800349a <HAL_RCC_OscConfig+0x592>
 8003494:	4b30      	ldr	r3, [pc, #192]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	e013      	b.n	80034c2 <HAL_RCC_OscConfig+0x5ba>
 800349a:	2302      	movs	r3, #2
 800349c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80034ac:	2302      	movs	r3, #2
 80034ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80034b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80034be:	4b26      	ldr	r3, [pc, #152]	; (8003558 <HAL_RCC_OscConfig+0x650>)
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2202      	movs	r2, #2
 80034c4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80034c8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80034cc:	fa92 f2a2 	rbit	r2, r2
 80034d0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80034d4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80034d8:	fab2 f282 	clz	r2, r2
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	f042 0220 	orr.w	r2, r2, #32
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	f002 021f 	and.w	r2, r2, #31
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1af      	bne.n	8003454 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f4:	1d3b      	adds	r3, r7, #4
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80da 	beq.w	80036b8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003504:	1d3b      	adds	r3, r7, #4
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d069      	beq.n	80035e2 <HAL_RCC_OscConfig+0x6da>
 800350e:	2301      	movs	r3, #1
 8003510:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003518:	fa93 f3a3 	rbit	r3, r3
 800351c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003520:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003524:	fab3 f383 	clz	r3, r3
 8003528:	b2db      	uxtb	r3, r3
 800352a:	461a      	mov	r2, r3
 800352c:	4b0b      	ldr	r3, [pc, #44]	; (800355c <HAL_RCC_OscConfig+0x654>)
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	461a      	mov	r2, r3
 8003534:	2301      	movs	r3, #1
 8003536:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003538:	f7fd fdf8 	bl	800112c <HAL_GetTick>
 800353c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003540:	e00e      	b.n	8003560 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003542:	f7fd fdf3 	bl	800112c <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b02      	cmp	r3, #2
 8003550:	d906      	bls.n	8003560 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e3d9      	b.n	8003d0a <HAL_RCC_OscConfig+0xe02>
 8003556:	bf00      	nop
 8003558:	40021000 	.word	0x40021000
 800355c:	10908120 	.word	0x10908120
 8003560:	2302      	movs	r3, #2
 8003562:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003572:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003576:	2202      	movs	r2, #2
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	fa93 f2a3 	rbit	r2, r3
 8003584:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003588:	601a      	str	r2, [r3, #0]
 800358a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800358e:	2202      	movs	r2, #2
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	fa93 f2a3 	rbit	r2, r3
 800359c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80035a0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a2:	4ba5      	ldr	r3, [pc, #660]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 80035a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80035aa:	2102      	movs	r1, #2
 80035ac:	6019      	str	r1, [r3, #0]
 80035ae:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	fa93 f1a3 	rbit	r1, r3
 80035b8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80035bc:	6019      	str	r1, [r3, #0]
  return result;
 80035be:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2101      	movs	r1, #1
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d0b0      	beq.n	8003542 <HAL_RCC_OscConfig+0x63a>
 80035e0:	e06a      	b.n	80036b8 <HAL_RCC_OscConfig+0x7b0>
 80035e2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80035e6:	2201      	movs	r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	fa93 f2a3 	rbit	r2, r3
 80035f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80035f8:	601a      	str	r2, [r3, #0]
  return result;
 80035fa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80035fe:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003600:	fab3 f383 	clz	r3, r3
 8003604:	b2db      	uxtb	r3, r3
 8003606:	461a      	mov	r2, r3
 8003608:	4b8c      	ldr	r3, [pc, #560]	; (800383c <HAL_RCC_OscConfig+0x934>)
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	461a      	mov	r2, r3
 8003610:	2300      	movs	r3, #0
 8003612:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003614:	f7fd fd8a 	bl	800112c <HAL_GetTick>
 8003618:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	e009      	b.n	8003632 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800361e:	f7fd fd85 	bl	800112c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e36b      	b.n	8003d0a <HAL_RCC_OscConfig+0xe02>
 8003632:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003636:	2202      	movs	r2, #2
 8003638:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	fa93 f2a3 	rbit	r2, r3
 8003644:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800364e:	2202      	movs	r2, #2
 8003650:	601a      	str	r2, [r3, #0]
 8003652:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	fa93 f2a3 	rbit	r2, r3
 800365c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003666:	2202      	movs	r2, #2
 8003668:	601a      	str	r2, [r3, #0]
 800366a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	fa93 f2a3 	rbit	r2, r3
 8003674:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003678:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367a:	4b6f      	ldr	r3, [pc, #444]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 800367c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800367e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003682:	2102      	movs	r1, #2
 8003684:	6019      	str	r1, [r3, #0]
 8003686:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	fa93 f1a3 	rbit	r1, r3
 8003690:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003694:	6019      	str	r1, [r3, #0]
  return result;
 8003696:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	fab3 f383 	clz	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f003 031f 	and.w	r3, r3, #31
 80036ac:	2101      	movs	r1, #1
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1b2      	bne.n	800361e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036b8:	1d3b      	adds	r3, r7, #4
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8158 	beq.w	8003978 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036c8:	2300      	movs	r3, #0
 80036ca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ce:	4b5a      	ldr	r3, [pc, #360]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d112      	bne.n	8003700 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	4b57      	ldr	r3, [pc, #348]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	4a56      	ldr	r2, [pc, #344]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036e4:	61d3      	str	r3, [r2, #28]
 80036e6:	4b54      	ldr	r3, [pc, #336]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	601a      	str	r2, [r3, #0]
 80036f4:	f107 0308 	add.w	r3, r7, #8
 80036f8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80036fa:	2301      	movs	r3, #1
 80036fc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003700:	4b4f      	ldr	r3, [pc, #316]	; (8003840 <HAL_RCC_OscConfig+0x938>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003708:	2b00      	cmp	r3, #0
 800370a:	d11a      	bne.n	8003742 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800370c:	4b4c      	ldr	r3, [pc, #304]	; (8003840 <HAL_RCC_OscConfig+0x938>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a4b      	ldr	r2, [pc, #300]	; (8003840 <HAL_RCC_OscConfig+0x938>)
 8003712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003716:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003718:	f7fd fd08 	bl	800112c <HAL_GetTick>
 800371c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003720:	e009      	b.n	8003736 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003722:	f7fd fd03 	bl	800112c <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e2e9      	b.n	8003d0a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	4b42      	ldr	r3, [pc, #264]	; (8003840 <HAL_RCC_OscConfig+0x938>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0ef      	beq.n	8003722 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d106      	bne.n	800375a <HAL_RCC_OscConfig+0x852>
 800374c:	4b3a      	ldr	r3, [pc, #232]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	4a39      	ldr	r2, [pc, #228]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	6213      	str	r3, [r2, #32]
 8003758:	e02f      	b.n	80037ba <HAL_RCC_OscConfig+0x8b2>
 800375a:	1d3b      	adds	r3, r7, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10c      	bne.n	800377e <HAL_RCC_OscConfig+0x876>
 8003764:	4b34      	ldr	r3, [pc, #208]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	4a33      	ldr	r2, [pc, #204]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	6213      	str	r3, [r2, #32]
 8003770:	4b31      	ldr	r3, [pc, #196]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	4a30      	ldr	r2, [pc, #192]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 8003776:	f023 0304 	bic.w	r3, r3, #4
 800377a:	6213      	str	r3, [r2, #32]
 800377c:	e01d      	b.n	80037ba <HAL_RCC_OscConfig+0x8b2>
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	2b05      	cmp	r3, #5
 8003786:	d10c      	bne.n	80037a2 <HAL_RCC_OscConfig+0x89a>
 8003788:	4b2b      	ldr	r3, [pc, #172]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 800378a:	6a1b      	ldr	r3, [r3, #32]
 800378c:	4a2a      	ldr	r2, [pc, #168]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 800378e:	f043 0304 	orr.w	r3, r3, #4
 8003792:	6213      	str	r3, [r2, #32]
 8003794:	4b28      	ldr	r3, [pc, #160]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	4a27      	ldr	r2, [pc, #156]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	6213      	str	r3, [r2, #32]
 80037a0:	e00b      	b.n	80037ba <HAL_RCC_OscConfig+0x8b2>
 80037a2:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	4a24      	ldr	r2, [pc, #144]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6213      	str	r3, [r2, #32]
 80037ae:	4b22      	ldr	r3, [pc, #136]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4a21      	ldr	r2, [pc, #132]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 80037b4:	f023 0304 	bic.w	r3, r3, #4
 80037b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d06b      	beq.n	800389c <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c4:	f7fd fcb2 	bl	800112c <HAL_GetTick>
 80037c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037cc:	e00b      	b.n	80037e6 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fd fcad 	bl	800112c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f241 3288 	movw	r2, #5000	; 0x1388
 80037de:	4293      	cmp	r3, r2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e291      	b.n	8003d0a <HAL_RCC_OscConfig+0xe02>
 80037e6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80037ea:	2202      	movs	r2, #2
 80037ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	fa93 f2a3 	rbit	r2, r3
 80037f8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003802:	2202      	movs	r2, #2
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	fa93 f2a3 	rbit	r2, r3
 8003810:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003814:	601a      	str	r2, [r3, #0]
  return result;
 8003816:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800381a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381c:	fab3 f383 	clz	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f043 0302 	orr.w	r3, r3, #2
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d109      	bne.n	8003844 <HAL_RCC_OscConfig+0x93c>
 8003830:	4b01      	ldr	r3, [pc, #4]	; (8003838 <HAL_RCC_OscConfig+0x930>)
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	e014      	b.n	8003860 <HAL_RCC_OscConfig+0x958>
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000
 800383c:	10908120 	.word	0x10908120
 8003840:	40007000 	.word	0x40007000
 8003844:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003848:	2202      	movs	r2, #2
 800384a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	fa93 f2a3 	rbit	r2, r3
 8003856:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	4bbb      	ldr	r3, [pc, #748]	; (8003b4c <HAL_RCC_OscConfig+0xc44>)
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003864:	2102      	movs	r1, #2
 8003866:	6011      	str	r1, [r2, #0]
 8003868:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	fa92 f1a2 	rbit	r1, r2
 8003872:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003876:	6011      	str	r1, [r2, #0]
  return result;
 8003878:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	fab2 f282 	clz	r2, r2
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	f002 021f 	and.w	r2, r2, #31
 800388e:	2101      	movs	r1, #1
 8003890:	fa01 f202 	lsl.w	r2, r1, r2
 8003894:	4013      	ands	r3, r2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d099      	beq.n	80037ce <HAL_RCC_OscConfig+0x8c6>
 800389a:	e063      	b.n	8003964 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389c:	f7fd fc46 	bl	800112c <HAL_GetTick>
 80038a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a4:	e00b      	b.n	80038be <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fd fc41 	bl	800112c <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e225      	b.n	8003d0a <HAL_RCC_OscConfig+0xe02>
 80038be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80038c2:	2202      	movs	r2, #2
 80038c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	fa93 f2a3 	rbit	r2, r3
 80038d0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80038da:	2202      	movs	r2, #2
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	fa93 f2a3 	rbit	r2, r3
 80038e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80038ec:	601a      	str	r2, [r3, #0]
  return result;
 80038ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80038f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f4:	fab3 f383 	clz	r3, r3
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	f043 0302 	orr.w	r3, r3, #2
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d102      	bne.n	800390e <HAL_RCC_OscConfig+0xa06>
 8003908:	4b90      	ldr	r3, [pc, #576]	; (8003b4c <HAL_RCC_OscConfig+0xc44>)
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	e00d      	b.n	800392a <HAL_RCC_OscConfig+0xa22>
 800390e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003912:	2202      	movs	r2, #2
 8003914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003916:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	fa93 f2a3 	rbit	r2, r3
 8003920:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	4b89      	ldr	r3, [pc, #548]	; (8003b4c <HAL_RCC_OscConfig+0xc44>)
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800392e:	2102      	movs	r1, #2
 8003930:	6011      	str	r1, [r2, #0]
 8003932:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	fa92 f1a2 	rbit	r1, r2
 800393c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003940:	6011      	str	r1, [r2, #0]
  return result;
 8003942:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	fab2 f282 	clz	r2, r2
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	f002 021f 	and.w	r2, r2, #31
 8003958:	2101      	movs	r1, #1
 800395a:	fa01 f202 	lsl.w	r2, r1, r2
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1a0      	bne.n	80038a6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003964:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396c:	4b77      	ldr	r3, [pc, #476]	; (8003b4c <HAL_RCC_OscConfig+0xc44>)
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	4a76      	ldr	r2, [pc, #472]	; (8003b4c <HAL_RCC_OscConfig+0xc44>)
 8003972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003976:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003978:	1d3b      	adds	r3, r7, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 81c2 	beq.w	8003d08 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003984:	4b71      	ldr	r3, [pc, #452]	; (8003b4c <HAL_RCC_OscConfig+0xc44>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b08      	cmp	r3, #8
 800398e:	f000 819c 	beq.w	8003cca <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003992:	1d3b      	adds	r3, r7, #4
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	2b02      	cmp	r3, #2
 800399a:	f040 8114 	bne.w	8003bc6 <HAL_RCC_OscConfig+0xcbe>
 800399e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80039a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	fa93 f2a3 	rbit	r2, r3
 80039b2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039b6:	601a      	str	r2, [r3, #0]
  return result;
 80039b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80039bc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	fab3 f383 	clz	r3, r3
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	461a      	mov	r2, r3
 80039d0:	2300      	movs	r3, #0
 80039d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d4:	f7fd fbaa 	bl	800112c <HAL_GetTick>
 80039d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039dc:	e009      	b.n	80039f2 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039de:	f7fd fba5 	bl	800112c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e18b      	b.n	8003d0a <HAL_RCC_OscConfig+0xe02>
 80039f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80039f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039fc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	fa93 f2a3 	rbit	r2, r3
 8003a06:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a0a:	601a      	str	r2, [r3, #0]
  return result;
 8003a0c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003a10:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f043 0301 	orr.w	r3, r3, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d102      	bne.n	8003a2c <HAL_RCC_OscConfig+0xb24>
 8003a26:	4b49      	ldr	r3, [pc, #292]	; (8003b4c <HAL_RCC_OscConfig+0xc44>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	e01b      	b.n	8003a64 <HAL_RCC_OscConfig+0xb5c>
 8003a2c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a36:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	fa93 f2a3 	rbit	r2, r3
 8003a40:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	fa93 f2a3 	rbit	r2, r3
 8003a5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	4b3a      	ldr	r3, [pc, #232]	; (8003b4c <HAL_RCC_OscConfig+0xc44>)
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a6c:	6011      	str	r1, [r2, #0]
 8003a6e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	fa92 f1a2 	rbit	r1, r2
 8003a78:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003a7c:	6011      	str	r1, [r2, #0]
  return result;
 8003a7e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003a82:	6812      	ldr	r2, [r2, #0]
 8003a84:	fab2 f282 	clz	r2, r2
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	f042 0220 	orr.w	r2, r2, #32
 8003a8e:	b2d2      	uxtb	r2, r2
 8003a90:	f002 021f 	and.w	r2, r2, #31
 8003a94:	2101      	movs	r1, #1
 8003a96:	fa01 f202 	lsl.w	r2, r1, r2
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d19e      	bne.n	80039de <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa0:	4b2a      	ldr	r3, [pc, #168]	; (8003b4c <HAL_RCC_OscConfig+0xc44>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003aa8:	1d3b      	adds	r3, r7, #4
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003aae:	1d3b      	adds	r3, r7, #4
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	430b      	orrs	r3, r1
 8003ab6:	4925      	ldr	r1, [pc, #148]	; (8003b4c <HAL_RCC_OscConfig+0xc44>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
 8003abc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003ac0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	fa93 f2a3 	rbit	r2, r3
 8003ad0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ad4:	601a      	str	r2, [r3, #0]
  return result;
 8003ad6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003ada:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003adc:	fab3 f383 	clz	r3, r3
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ae6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	461a      	mov	r2, r3
 8003aee:	2301      	movs	r3, #1
 8003af0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af2:	f7fd fb1b 	bl	800112c <HAL_GetTick>
 8003af6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003afa:	e009      	b.n	8003b10 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fd fb16 	bl	800112c <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0fc      	b.n	8003d0a <HAL_RCC_OscConfig+0xe02>
 8003b10:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	fa93 f2a3 	rbit	r2, r3
 8003b24:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b28:	601a      	str	r2, [r3, #0]
  return result;
 8003b2a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003b2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b30:	fab3 f383 	clz	r3, r3
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d105      	bne.n	8003b50 <HAL_RCC_OscConfig+0xc48>
 8003b44:	4b01      	ldr	r3, [pc, #4]	; (8003b4c <HAL_RCC_OscConfig+0xc44>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	e01e      	b.n	8003b88 <HAL_RCC_OscConfig+0xc80>
 8003b4a:	bf00      	nop
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	fa93 f2a3 	rbit	r2, r3
 8003b64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	fa93 f2a3 	rbit	r2, r3
 8003b7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b82:	601a      	str	r2, [r3, #0]
 8003b84:	4b63      	ldr	r3, [pc, #396]	; (8003d14 <HAL_RCC_OscConfig+0xe0c>)
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b90:	6011      	str	r1, [r2, #0]
 8003b92:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003b96:	6812      	ldr	r2, [r2, #0]
 8003b98:	fa92 f1a2 	rbit	r1, r2
 8003b9c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ba0:	6011      	str	r1, [r2, #0]
  return result;
 8003ba2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	fab2 f282 	clz	r2, r2
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	f042 0220 	orr.w	r2, r2, #32
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	f002 021f 	and.w	r2, r2, #31
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d09b      	beq.n	8003afc <HAL_RCC_OscConfig+0xbf4>
 8003bc4:	e0a0      	b.n	8003d08 <HAL_RCC_OscConfig+0xe00>
 8003bc6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	fa93 f2a3 	rbit	r2, r3
 8003bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003bde:	601a      	str	r2, [r3, #0]
  return result;
 8003be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003be4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	fab3 f383 	clz	r3, r3
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003bf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fd fa96 	bl	800112c <HAL_GetTick>
 8003c00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c04:	e009      	b.n	8003c1a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c06:	f7fd fa91 	bl	800112c <HAL_GetTick>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e077      	b.n	8003d0a <HAL_RCC_OscConfig+0xe02>
 8003c1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	fa93 f2a3 	rbit	r2, r3
 8003c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c32:	601a      	str	r2, [r3, #0]
  return result;
 8003c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3a:	fab3 f383 	clz	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d102      	bne.n	8003c54 <HAL_RCC_OscConfig+0xd4c>
 8003c4e:	4b31      	ldr	r3, [pc, #196]	; (8003d14 <HAL_RCC_OscConfig+0xe0c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	e01b      	b.n	8003c8c <HAL_RCC_OscConfig+0xd84>
 8003c54:	f107 0320 	add.w	r3, r7, #32
 8003c58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f107 0320 	add.w	r3, r7, #32
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	fa93 f2a3 	rbit	r2, r3
 8003c68:	f107 031c 	add.w	r3, r7, #28
 8003c6c:	601a      	str	r2, [r3, #0]
 8003c6e:	f107 0318 	add.w	r3, r7, #24
 8003c72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	f107 0318 	add.w	r3, r7, #24
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	fa93 f2a3 	rbit	r2, r3
 8003c82:	f107 0314 	add.w	r3, r7, #20
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	4b22      	ldr	r3, [pc, #136]	; (8003d14 <HAL_RCC_OscConfig+0xe0c>)
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	f107 0210 	add.w	r2, r7, #16
 8003c90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c94:	6011      	str	r1, [r2, #0]
 8003c96:	f107 0210 	add.w	r2, r7, #16
 8003c9a:	6812      	ldr	r2, [r2, #0]
 8003c9c:	fa92 f1a2 	rbit	r1, r2
 8003ca0:	f107 020c 	add.w	r2, r7, #12
 8003ca4:	6011      	str	r1, [r2, #0]
  return result;
 8003ca6:	f107 020c 	add.w	r2, r7, #12
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	fab2 f282 	clz	r2, r2
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	f042 0220 	orr.w	r2, r2, #32
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	f002 021f 	and.w	r2, r2, #31
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d19e      	bne.n	8003c06 <HAL_RCC_OscConfig+0xcfe>
 8003cc8:	e01e      	b.n	8003d08 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003cca:	1d3b      	adds	r3, r7, #4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e018      	b.n	8003d0a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003cd8:	4b0e      	ldr	r3, [pc, #56]	; (8003d14 <HAL_RCC_OscConfig+0xe0c>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ce0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ce4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ce8:	1d3b      	adds	r3, r7, #4
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d108      	bne.n	8003d04 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003cf2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003cf6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003cfa:	1d3b      	adds	r3, r7, #4
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d001      	beq.n	8003d08 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e000      	b.n	8003d0a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40021000 	.word	0x40021000

08003d18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b09e      	sub	sp, #120	; 0x78
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e162      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d30:	4b90      	ldr	r3, [pc, #576]	; (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	683a      	ldr	r2, [r7, #0]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d910      	bls.n	8003d60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d3e:	4b8d      	ldr	r3, [pc, #564]	; (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f023 0207 	bic.w	r2, r3, #7
 8003d46:	498b      	ldr	r1, [pc, #556]	; (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b89      	ldr	r3, [pc, #548]	; (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e14a      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d6c:	4b82      	ldr	r3, [pc, #520]	; (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	497f      	ldr	r1, [pc, #508]	; (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80dc 	beq.w	8003f44 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d13c      	bne.n	8003e0e <HAL_RCC_ClockConfig+0xf6>
 8003d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d9c:	fa93 f3a3 	rbit	r3, r3
 8003da0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da4:	fab3 f383 	clz	r3, r3
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	f043 0301 	orr.w	r3, r3, #1
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d102      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xa6>
 8003db8:	4b6f      	ldr	r3, [pc, #444]	; (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	e00f      	b.n	8003dde <HAL_RCC_ClockConfig+0xc6>
 8003dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dc6:	fa93 f3a3 	rbit	r3, r3
 8003dca:	667b      	str	r3, [r7, #100]	; 0x64
 8003dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dd0:	663b      	str	r3, [r7, #96]	; 0x60
 8003dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003dd4:	fa93 f3a3 	rbit	r3, r3
 8003dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dda:	4b67      	ldr	r3, [pc, #412]	; (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003de2:	65ba      	str	r2, [r7, #88]	; 0x58
 8003de4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003de6:	fa92 f2a2 	rbit	r2, r2
 8003dea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003dec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003dee:	fab2 f282 	clz	r2, r2
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	f042 0220 	orr.w	r2, r2, #32
 8003df8:	b2d2      	uxtb	r2, r2
 8003dfa:	f002 021f 	and.w	r2, r2, #31
 8003dfe:	2101      	movs	r1, #1
 8003e00:	fa01 f202 	lsl.w	r2, r1, r2
 8003e04:	4013      	ands	r3, r2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d17b      	bne.n	8003f02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e0f3      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d13c      	bne.n	8003e90 <HAL_RCC_ClockConfig+0x178>
 8003e16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e1e:	fa93 f3a3 	rbit	r3, r3
 8003e22:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e26:	fab3 f383 	clz	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	f043 0301 	orr.w	r3, r3, #1
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d102      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x128>
 8003e3a:	4b4f      	ldr	r3, [pc, #316]	; (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	e00f      	b.n	8003e60 <HAL_RCC_ClockConfig+0x148>
 8003e40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e48:	fa93 f3a3 	rbit	r3, r3
 8003e4c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e52:	643b      	str	r3, [r7, #64]	; 0x40
 8003e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e56:	fa93 f3a3 	rbit	r3, r3
 8003e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5c:	4b46      	ldr	r3, [pc, #280]	; (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e64:	63ba      	str	r2, [r7, #56]	; 0x38
 8003e66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e68:	fa92 f2a2 	rbit	r2, r2
 8003e6c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e70:	fab2 f282 	clz	r2, r2
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	f042 0220 	orr.w	r2, r2, #32
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	f002 021f 	and.w	r2, r2, #31
 8003e80:	2101      	movs	r1, #1
 8003e82:	fa01 f202 	lsl.w	r2, r1, r2
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d13a      	bne.n	8003f02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0b2      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
 8003e90:	2302      	movs	r3, #2
 8003e92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e96:	fa93 f3a3 	rbit	r3, r3
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e9e:	fab3 f383 	clz	r3, r3
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	095b      	lsrs	r3, r3, #5
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d102      	bne.n	8003eb8 <HAL_RCC_ClockConfig+0x1a0>
 8003eb2:	4b31      	ldr	r3, [pc, #196]	; (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	e00d      	b.n	8003ed4 <HAL_RCC_ClockConfig+0x1bc>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	fa93 f3a3 	rbit	r3, r3
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	623b      	str	r3, [r7, #32]
 8003ec8:	6a3b      	ldr	r3, [r7, #32]
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	61fb      	str	r3, [r7, #28]
 8003ed0:	4b29      	ldr	r3, [pc, #164]	; (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	61ba      	str	r2, [r7, #24]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	fa92 f2a2 	rbit	r2, r2
 8003ede:	617a      	str	r2, [r7, #20]
  return result;
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	fab2 f282 	clz	r2, r2
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	f042 0220 	orr.w	r2, r2, #32
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	f002 021f 	and.w	r2, r2, #31
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ef8:	4013      	ands	r3, r2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e079      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f02:	4b1d      	ldr	r3, [pc, #116]	; (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f023 0203 	bic.w	r2, r3, #3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	491a      	ldr	r1, [pc, #104]	; (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f14:	f7fd f90a 	bl	800112c <HAL_GetTick>
 8003f18:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f1a:	e00a      	b.n	8003f32 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f1c:	f7fd f906 	bl	800112c <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e061      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f32:	4b11      	ldr	r3, [pc, #68]	; (8003f78 <HAL_RCC_ClockConfig+0x260>)
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 020c 	and.w	r2, r3, #12
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d1eb      	bne.n	8003f1c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f44:	4b0b      	ldr	r3, [pc, #44]	; (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0307 	and.w	r3, r3, #7
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d214      	bcs.n	8003f7c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f52:	4b08      	ldr	r3, [pc, #32]	; (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 0207 	bic.w	r2, r3, #7
 8003f5a:	4906      	ldr	r1, [pc, #24]	; (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <HAL_RCC_ClockConfig+0x25c>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d005      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e040      	b.n	8003ff6 <HAL_RCC_ClockConfig+0x2de>
 8003f74:	40022000 	.word	0x40022000
 8003f78:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f88:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCC_ClockConfig+0x2e8>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	491a      	ldr	r1, [pc, #104]	; (8004000 <HAL_RCC_ClockConfig+0x2e8>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d009      	beq.n	8003fba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fa6:	4b16      	ldr	r3, [pc, #88]	; (8004000 <HAL_RCC_ClockConfig+0x2e8>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4912      	ldr	r1, [pc, #72]	; (8004000 <HAL_RCC_ClockConfig+0x2e8>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003fba:	f000 f829 	bl	8004010 <HAL_RCC_GetSysClockFreq>
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	4b0f      	ldr	r3, [pc, #60]	; (8004000 <HAL_RCC_ClockConfig+0x2e8>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fc8:	22f0      	movs	r2, #240	; 0xf0
 8003fca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	fa92 f2a2 	rbit	r2, r2
 8003fd2:	60fa      	str	r2, [r7, #12]
  return result;
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	fab2 f282 	clz	r2, r2
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	40d3      	lsrs	r3, r2
 8003fde:	4a09      	ldr	r2, [pc, #36]	; (8004004 <HAL_RCC_ClockConfig+0x2ec>)
 8003fe0:	5cd3      	ldrb	r3, [r2, r3]
 8003fe2:	fa21 f303 	lsr.w	r3, r1, r3
 8003fe6:	4a08      	ldr	r2, [pc, #32]	; (8004008 <HAL_RCC_ClockConfig+0x2f0>)
 8003fe8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003fea:	4b08      	ldr	r3, [pc, #32]	; (800400c <HAL_RCC_ClockConfig+0x2f4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fd f858 	bl	80010a4 <HAL_InitTick>
  
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3778      	adds	r7, #120	; 0x78
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	08004ba8 	.word	0x08004ba8
 8004008:	20000008 	.word	0x20000008
 800400c:	2000000c 	.word	0x2000000c

08004010 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004010:	b480      	push	{r7}
 8004012:	b08b      	sub	sp, #44	; 0x2c
 8004014:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004016:	2300      	movs	r3, #0
 8004018:	61fb      	str	r3, [r7, #28]
 800401a:	2300      	movs	r3, #0
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	2300      	movs	r3, #0
 8004020:	627b      	str	r3, [r7, #36]	; 0x24
 8004022:	2300      	movs	r3, #0
 8004024:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004026:	2300      	movs	r3, #0
 8004028:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800402a:	4b29      	ldr	r3, [pc, #164]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b04      	cmp	r3, #4
 8004038:	d002      	beq.n	8004040 <HAL_RCC_GetSysClockFreq+0x30>
 800403a:	2b08      	cmp	r3, #8
 800403c:	d003      	beq.n	8004046 <HAL_RCC_GetSysClockFreq+0x36>
 800403e:	e03c      	b.n	80040ba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004040:	4b24      	ldr	r3, [pc, #144]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004042:	623b      	str	r3, [r7, #32]
      break;
 8004044:	e03c      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800404c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004050:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004052:	68ba      	ldr	r2, [r7, #8]
 8004054:	fa92 f2a2 	rbit	r2, r2
 8004058:	607a      	str	r2, [r7, #4]
  return result;
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	fab2 f282 	clz	r2, r2
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	40d3      	lsrs	r3, r2
 8004064:	4a1c      	ldr	r2, [pc, #112]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004066:	5cd3      	ldrb	r3, [r2, r3]
 8004068:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800406a:	4b19      	ldr	r3, [pc, #100]	; (80040d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	220f      	movs	r2, #15
 8004074:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	fa92 f2a2 	rbit	r2, r2
 800407c:	60fa      	str	r2, [r7, #12]
  return result;
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	fab2 f282 	clz	r2, r2
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	40d3      	lsrs	r3, r2
 8004088:	4a14      	ldr	r2, [pc, #80]	; (80040dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800408a:	5cd3      	ldrb	r3, [r2, r3]
 800408c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004098:	4a0e      	ldr	r2, [pc, #56]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	fb02 f303 	mul.w	r3, r2, r3
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
 80040a8:	e004      	b.n	80040b4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	4a0c      	ldr	r2, [pc, #48]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	623b      	str	r3, [r7, #32]
      break;
 80040b8:	e002      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040bc:	623b      	str	r3, [r7, #32]
      break;
 80040be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040c0:	6a3b      	ldr	r3, [r7, #32]
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	372c      	adds	r7, #44	; 0x2c
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	40021000 	.word	0x40021000
 80040d4:	007a1200 	.word	0x007a1200
 80040d8:	08004bb8 	.word	0x08004bb8
 80040dc:	08004bc8 	.word	0x08004bc8
 80040e0:	003d0900 	.word	0x003d0900

080040e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b092      	sub	sp, #72	; 0x48
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80d0 	beq.w	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004102:	2300      	movs	r3, #0
 8004104:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004108:	4b8e      	ldr	r3, [pc, #568]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410a:	69db      	ldr	r3, [r3, #28]
 800410c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10e      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004114:	4b8b      	ldr	r3, [pc, #556]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	4a8a      	ldr	r2, [pc, #552]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800411a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800411e:	61d3      	str	r3, [r2, #28]
 8004120:	4b88      	ldr	r3, [pc, #544]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004122:	69db      	ldr	r3, [r3, #28]
 8004124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412c:	2301      	movs	r3, #1
 800412e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004132:	4b85      	ldr	r3, [pc, #532]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d118      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800413e:	4b82      	ldr	r3, [pc, #520]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a81      	ldr	r2, [pc, #516]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004148:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800414a:	f7fc ffef 	bl	800112c <HAL_GetTick>
 800414e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	e008      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004152:	f7fc ffeb 	bl	800112c <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b64      	cmp	r3, #100	; 0x64
 800415e:	d901      	bls.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e0ea      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004164:	4b78      	ldr	r3, [pc, #480]	; (8004348 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004170:	4b74      	ldr	r3, [pc, #464]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004178:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800417a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800417c:	2b00      	cmp	r3, #0
 800417e:	d07d      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800418a:	429a      	cmp	r2, r3
 800418c:	d076      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800418e:	4b6d      	ldr	r3, [pc, #436]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800419c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	fa93 f3a3 	rbit	r3, r3
 80041a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041a8:	fab3 f383 	clz	r3, r3
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	461a      	mov	r2, r3
 80041b0:	4b66      	ldr	r3, [pc, #408]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	461a      	mov	r2, r3
 80041b8:	2301      	movs	r3, #1
 80041ba:	6013      	str	r3, [r2, #0]
 80041bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	fa93 f3a3 	rbit	r3, r3
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041cc:	fab3 f383 	clz	r3, r3
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	4b5d      	ldr	r3, [pc, #372]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	461a      	mov	r2, r3
 80041dc:	2300      	movs	r3, #0
 80041de:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041e0:	4a58      	ldr	r2, [pc, #352]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d045      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f0:	f7fc ff9c 	bl	800112c <HAL_GetTick>
 80041f4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f6:	e00a      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fc ff98 	bl	800112c <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	; 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e095      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800420e:	2302      	movs	r3, #2
 8004210:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	fa93 f3a3 	rbit	r3, r3
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
 800421a:	2302      	movs	r3, #2
 800421c:	623b      	str	r3, [r7, #32]
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	fa93 f3a3 	rbit	r3, r3
 8004224:	61fb      	str	r3, [r7, #28]
  return result;
 8004226:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004228:	fab3 f383 	clz	r3, r3
 800422c:	b2db      	uxtb	r3, r3
 800422e:	095b      	lsrs	r3, r3, #5
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f043 0302 	orr.w	r3, r3, #2
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d102      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800423c:	4b41      	ldr	r3, [pc, #260]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	e007      	b.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004242:	2302      	movs	r3, #2
 8004244:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	fa93 f3a3 	rbit	r3, r3
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	4b3d      	ldr	r3, [pc, #244]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	2202      	movs	r2, #2
 8004254:	613a      	str	r2, [r7, #16]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	fa92 f2a2 	rbit	r2, r2
 800425c:	60fa      	str	r2, [r7, #12]
  return result;
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	fab2 f282 	clz	r2, r2
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800426a:	b2d2      	uxtb	r2, r2
 800426c:	f002 021f 	and.w	r2, r2, #31
 8004270:	2101      	movs	r1, #1
 8004272:	fa01 f202 	lsl.w	r2, r1, r2
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0bd      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800427c:	4b31      	ldr	r3, [pc, #196]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	492e      	ldr	r1, [pc, #184]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	4313      	orrs	r3, r2
 800428c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800428e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004292:	2b01      	cmp	r3, #1
 8004294:	d105      	bne.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004296:	4b2b      	ldr	r3, [pc, #172]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	4a2a      	ldr	r2, [pc, #168]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d008      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042ae:	4b25      	ldr	r3, [pc, #148]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b2:	f023 0203 	bic.w	r2, r3, #3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	4922      	ldr	r1, [pc, #136]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042cc:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d0:	f023 0210 	bic.w	r2, r3, #16
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	491a      	ldr	r1, [pc, #104]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80042ea:	4b16      	ldr	r3, [pc, #88]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	4913      	ldr	r1, [pc, #76]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004308:	4b0e      	ldr	r3, [pc, #56]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	490b      	ldr	r1, [pc, #44]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004316:	4313      	orrs	r3, r2
 8004318:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004326:	4b07      	ldr	r3, [pc, #28]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	699b      	ldr	r3, [r3, #24]
 8004332:	4904      	ldr	r1, [pc, #16]	; (8004344 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004334:	4313      	orrs	r3, r2
 8004336:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3748      	adds	r7, #72	; 0x48
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40021000 	.word	0x40021000
 8004348:	40007000 	.word	0x40007000
 800434c:	10908100 	.word	0x10908100

08004350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e01d      	b.n	800439e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fc fdd6 	bl	8000f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f000 fa34 	bl	80047fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3708      	adds	r7, #8
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
	...

080043a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f042 0201 	orr.w	r2, r2, #1
 80043be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	4b0c      	ldr	r3, [pc, #48]	; (80043f8 <HAL_TIM_Base_Start_IT+0x50>)
 80043c8:	4013      	ands	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b06      	cmp	r3, #6
 80043d0:	d00b      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0x42>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043d8:	d007      	beq.n	80043ea <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	00010007 	.word	0x00010007

080043fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b02      	cmp	r3, #2
 8004410:	d122      	bne.n	8004458 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b02      	cmp	r3, #2
 800441e:	d11b      	bne.n	8004458 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0202 	mvn.w	r2, #2
 8004428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2201      	movs	r2, #1
 800442e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	f003 0303 	and.w	r3, r3, #3
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f9be 	bl	80047c0 <HAL_TIM_IC_CaptureCallback>
 8004444:	e005      	b.n	8004452 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f9b0 	bl	80047ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 f9c1 	bl	80047d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b04      	cmp	r3, #4
 8004464:	d122      	bne.n	80044ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b04      	cmp	r3, #4
 8004472:	d11b      	bne.n	80044ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0204 	mvn.w	r2, #4
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f994 	bl	80047c0 <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f986 	bl	80047ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f997 	bl	80047d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	2b08      	cmp	r3, #8
 80044b8:	d122      	bne.n	8004500 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d11b      	bne.n	8004500 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0208 	mvn.w	r2, #8
 80044d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2204      	movs	r2, #4
 80044d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f96a 	bl	80047c0 <HAL_TIM_IC_CaptureCallback>
 80044ec:	e005      	b.n	80044fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f95c 	bl	80047ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f96d 	bl	80047d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	2b10      	cmp	r3, #16
 800450c:	d122      	bne.n	8004554 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b10      	cmp	r3, #16
 800451a:	d11b      	bne.n	8004554 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f06f 0210 	mvn.w	r2, #16
 8004524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2208      	movs	r2, #8
 800452a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f940 	bl	80047c0 <HAL_TIM_IC_CaptureCallback>
 8004540:	e005      	b.n	800454e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 f932 	bl	80047ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f943 	bl	80047d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b01      	cmp	r3, #1
 8004560:	d10e      	bne.n	8004580 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	2b01      	cmp	r3, #1
 800456e:	d107      	bne.n	8004580 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0201 	mvn.w	r2, #1
 8004578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7fc fa42 	bl	8000a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458a:	2b80      	cmp	r3, #128	; 0x80
 800458c:	d10e      	bne.n	80045ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004598:	2b80      	cmp	r3, #128	; 0x80
 800459a:	d107      	bne.n	80045ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fab2 	bl	8004b10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691b      	ldr	r3, [r3, #16]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ba:	d10e      	bne.n	80045da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c6:	2b80      	cmp	r3, #128	; 0x80
 80045c8:	d107      	bne.n	80045da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 faa5 	bl	8004b24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e4:	2b40      	cmp	r3, #64	; 0x40
 80045e6:	d10e      	bne.n	8004606 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d107      	bne.n	8004606 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f8f1 	bl	80047e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f003 0320 	and.w	r3, r3, #32
 8004610:	2b20      	cmp	r3, #32
 8004612:	d10e      	bne.n	8004632 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b20      	cmp	r3, #32
 8004620:	d107      	bne.n	8004632 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f06f 0220 	mvn.w	r2, #32
 800462a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fa65 	bl	8004afc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800464a:	2b01      	cmp	r3, #1
 800464c:	d101      	bne.n	8004652 <HAL_TIM_ConfigClockSource+0x18>
 800464e:	2302      	movs	r3, #2
 8004650:	e0a8      	b.n	80047a4 <HAL_TIM_ConfigClockSource+0x16a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2201      	movs	r2, #1
 8004656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004670:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004674:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800467c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b40      	cmp	r3, #64	; 0x40
 800468c:	d067      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x124>
 800468e:	2b40      	cmp	r3, #64	; 0x40
 8004690:	d80b      	bhi.n	80046aa <HAL_TIM_ConfigClockSource+0x70>
 8004692:	2b10      	cmp	r3, #16
 8004694:	d073      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x144>
 8004696:	2b10      	cmp	r3, #16
 8004698:	d802      	bhi.n	80046a0 <HAL_TIM_ConfigClockSource+0x66>
 800469a:	2b00      	cmp	r3, #0
 800469c:	d06f      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800469e:	e078      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d06c      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x144>
 80046a4:	2b30      	cmp	r3, #48	; 0x30
 80046a6:	d06a      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x144>
      break;
 80046a8:	e073      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80046aa:	2b70      	cmp	r3, #112	; 0x70
 80046ac:	d00d      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x90>
 80046ae:	2b70      	cmp	r3, #112	; 0x70
 80046b0:	d804      	bhi.n	80046bc <HAL_TIM_ConfigClockSource+0x82>
 80046b2:	2b50      	cmp	r3, #80	; 0x50
 80046b4:	d033      	beq.n	800471e <HAL_TIM_ConfigClockSource+0xe4>
 80046b6:	2b60      	cmp	r3, #96	; 0x60
 80046b8:	d041      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x104>
      break;
 80046ba:	e06a      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c0:	d066      	beq.n	8004790 <HAL_TIM_ConfigClockSource+0x156>
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c6:	d017      	beq.n	80046f8 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80046c8:	e063      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6899      	ldr	r1, [r3, #8]
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f000 f981 	bl	80049e0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046ec:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	609a      	str	r2, [r3, #8]
      break;
 80046f6:	e04c      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6899      	ldr	r1, [r3, #8]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f000 f96a 	bl	80049e0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800471a:	609a      	str	r2, [r3, #8]
      break;
 800471c:	e039      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	461a      	mov	r2, r3
 800472c:	f000 f8de 	bl	80048ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2150      	movs	r1, #80	; 0x50
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f937 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 800473c:	e029      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	461a      	mov	r2, r3
 800474c:	f000 f8fd 	bl	800494a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2160      	movs	r1, #96	; 0x60
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f927 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 800475c:	e019      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	461a      	mov	r2, r3
 800476c:	f000 f8be 	bl	80048ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2140      	movs	r1, #64	; 0x40
 8004776:	4618      	mov	r0, r3
 8004778:	f000 f917 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 800477c:	e009      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f000 f90e 	bl	80049aa <TIM_ITRx_SetConfig>
      break;
 800478e:	e000      	b.n	8004792 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8004790:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a32      	ldr	r2, [pc, #200]	; (80048d8 <TIM_Base_SetConfig+0xdc>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d007      	beq.n	8004824 <TIM_Base_SetConfig+0x28>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481a:	d003      	beq.n	8004824 <TIM_Base_SetConfig+0x28>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a2f      	ldr	r2, [pc, #188]	; (80048dc <TIM_Base_SetConfig+0xe0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d108      	bne.n	8004836 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a27      	ldr	r2, [pc, #156]	; (80048d8 <TIM_Base_SetConfig+0xdc>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <TIM_Base_SetConfig+0x6a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004844:	d00f      	beq.n	8004866 <TIM_Base_SetConfig+0x6a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a24      	ldr	r2, [pc, #144]	; (80048dc <TIM_Base_SetConfig+0xe0>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00b      	beq.n	8004866 <TIM_Base_SetConfig+0x6a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <TIM_Base_SetConfig+0xe4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d007      	beq.n	8004866 <TIM_Base_SetConfig+0x6a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a22      	ldr	r2, [pc, #136]	; (80048e4 <TIM_Base_SetConfig+0xe8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_Base_SetConfig+0x6a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a21      	ldr	r2, [pc, #132]	; (80048e8 <TIM_Base_SetConfig+0xec>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a0e      	ldr	r2, [pc, #56]	; (80048d8 <TIM_Base_SetConfig+0xdc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00b      	beq.n	80048bc <TIM_Base_SetConfig+0xc0>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a0e      	ldr	r2, [pc, #56]	; (80048e0 <TIM_Base_SetConfig+0xe4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d007      	beq.n	80048bc <TIM_Base_SetConfig+0xc0>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a0d      	ldr	r2, [pc, #52]	; (80048e4 <TIM_Base_SetConfig+0xe8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d003      	beq.n	80048bc <TIM_Base_SetConfig+0xc0>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a0c      	ldr	r2, [pc, #48]	; (80048e8 <TIM_Base_SetConfig+0xec>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d103      	bne.n	80048c4 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	691a      	ldr	r2, [r3, #16]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	615a      	str	r2, [r3, #20]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40014400 	.word	0x40014400
 80048e8:	40014800 	.word	0x40014800

080048ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	f023 0201 	bic.w	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f023 030a 	bic.w	r3, r3, #10
 8004928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	621a      	str	r2, [r3, #32]
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800494a:	b480      	push	{r7}
 800494c:	b087      	sub	sp, #28
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	f023 0210 	bic.w	r2, r3, #16
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004974:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	031b      	lsls	r3, r3, #12
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004986:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4313      	orrs	r3, r2
 8004990:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	621a      	str	r2, [r3, #32]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049aa:	b480      	push	{r7}
 80049ac:	b085      	sub	sp, #20
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f043 0307 	orr.w	r3, r3, #7
 80049cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	609a      	str	r2, [r3, #8]
}
 80049d4:	bf00      	nop
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	021a      	lsls	r2, r3, #8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	431a      	orrs	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	609a      	str	r2, [r3, #8]
}
 8004a14:	bf00      	nop
 8004a16:	371c      	adds	r7, #28
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d101      	bne.n	8004a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a34:	2302      	movs	r3, #2
 8004a36:	e054      	b.n	8004ae2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a24      	ldr	r2, [pc, #144]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d108      	bne.n	8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a17      	ldr	r2, [pc, #92]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00e      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa0:	d009      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a13      	ldr	r2, [pc, #76]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d10c      	bne.n	8004ad0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004abc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3714      	adds	r7, #20
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40014000 	.word	0x40014000

08004afc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <__libc_init_array>:
 8004b38:	b570      	push	{r4, r5, r6, lr}
 8004b3a:	4e0d      	ldr	r6, [pc, #52]	; (8004b70 <__libc_init_array+0x38>)
 8004b3c:	4c0d      	ldr	r4, [pc, #52]	; (8004b74 <__libc_init_array+0x3c>)
 8004b3e:	1ba4      	subs	r4, r4, r6
 8004b40:	10a4      	asrs	r4, r4, #2
 8004b42:	2500      	movs	r5, #0
 8004b44:	42a5      	cmp	r5, r4
 8004b46:	d109      	bne.n	8004b5c <__libc_init_array+0x24>
 8004b48:	4e0b      	ldr	r6, [pc, #44]	; (8004b78 <__libc_init_array+0x40>)
 8004b4a:	4c0c      	ldr	r4, [pc, #48]	; (8004b7c <__libc_init_array+0x44>)
 8004b4c:	f000 f820 	bl	8004b90 <_init>
 8004b50:	1ba4      	subs	r4, r4, r6
 8004b52:	10a4      	asrs	r4, r4, #2
 8004b54:	2500      	movs	r5, #0
 8004b56:	42a5      	cmp	r5, r4
 8004b58:	d105      	bne.n	8004b66 <__libc_init_array+0x2e>
 8004b5a:	bd70      	pop	{r4, r5, r6, pc}
 8004b5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b60:	4798      	blx	r3
 8004b62:	3501      	adds	r5, #1
 8004b64:	e7ee      	b.n	8004b44 <__libc_init_array+0xc>
 8004b66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004b6a:	4798      	blx	r3
 8004b6c:	3501      	adds	r5, #1
 8004b6e:	e7f2      	b.n	8004b56 <__libc_init_array+0x1e>
 8004b70:	08004bd8 	.word	0x08004bd8
 8004b74:	08004bd8 	.word	0x08004bd8
 8004b78:	08004bd8 	.word	0x08004bd8
 8004b7c:	08004bdc 	.word	0x08004bdc

08004b80 <memset>:
 8004b80:	4402      	add	r2, r0
 8004b82:	4603      	mov	r3, r0
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d100      	bne.n	8004b8a <memset+0xa>
 8004b88:	4770      	bx	lr
 8004b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b8e:	e7f9      	b.n	8004b84 <memset+0x4>

08004b90 <_init>:
 8004b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b92:	bf00      	nop
 8004b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b96:	bc08      	pop	{r3}
 8004b98:	469e      	mov	lr, r3
 8004b9a:	4770      	bx	lr

08004b9c <_fini>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	bf00      	nop
 8004ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ba2:	bc08      	pop	{r3}
 8004ba4:	469e      	mov	lr, r3
 8004ba6:	4770      	bx	lr
