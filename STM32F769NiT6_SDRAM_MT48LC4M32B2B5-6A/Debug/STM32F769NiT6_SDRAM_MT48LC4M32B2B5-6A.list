
STM32F769NiT6_SDRAM_MT48LC4M32B2B5-6A.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a68  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004c68  08004c68  00014c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cdc  08004cdc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce4  08004ce4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000070  08004d5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20000574  08004d5c  00020574  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013955  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a42  00000000  00000000  000339f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cd8  00000000  00000000  00036438  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  00037110  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f096  00000000  00000000  00037c90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d992  00000000  00000000  00066d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114020  00000000  00000000  000746b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001886d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036b8  00000000  00000000  00188754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004c50 	.word	0x08004c50

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004c50 	.word	0x08004c50

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MT48LC4M32B2_Init>:
#include "MT48LC4M32B2.h"

FMC_SDRAM_CommandTypeDef command;
HAL_StatusTypeDef hal_status;

void MT48LC4M32B2_Init(SDRAM_HandleTypeDef *sdram) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmrmd = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]

	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80005fc:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 80005fe:	2201      	movs	r2, #1
 8000600:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000602:	4b35      	ldr	r3, [pc, #212]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 8000604:	2210      	movs	r2, #16
 8000606:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8000608:	4b33      	ldr	r3, [pc, #204]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 800060a:	2201      	movs	r2, #1
 800060c:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800060e:	4b32      	ldr	r3, [pc, #200]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 8000610:	2200      	movs	r2, #0
 8000612:	60da      	str	r2, [r3, #12]
	hal_status = HAL_SDRAM_SendCommand(sdram, &command, SDRAM_TIMEOUT);
 8000614:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000618:	492f      	ldr	r1, [pc, #188]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f002 fd66 	bl	80030ec <HAL_SDRAM_SendCommand>
 8000620:	4603      	mov	r3, r0
 8000622:	461a      	mov	r2, r3
 8000624:	4b2d      	ldr	r3, [pc, #180]	; (80006dc <MT48LC4M32B2_Init+0xec>)
 8000626:	701a      	strb	r2, [r3, #0]
	HAL_Delay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f001 f8f1 	bl	8001810 <HAL_Delay>

	command.CommandMode = FMC_SDRAM_CMD_PALL;
 800062e:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 8000630:	2202      	movs	r2, #2
 8000632:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000634:	4b28      	ldr	r3, [pc, #160]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 8000636:	2210      	movs	r2, #16
 8000638:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 800063a:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 800063c:	2201      	movs	r2, #1
 800063e:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 8000642:	2200      	movs	r2, #0
 8000644:	60da      	str	r2, [r3, #12]
	hal_status = HAL_SDRAM_SendCommand(sdram, &command, SDRAM_TIMEOUT);
 8000646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800064a:	4923      	ldr	r1, [pc, #140]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 800064c:	6878      	ldr	r0, [r7, #4]
 800064e:	f002 fd4d 	bl	80030ec <HAL_SDRAM_SendCommand>
 8000652:	4603      	mov	r3, r0
 8000654:	461a      	mov	r2, r3
 8000656:	4b21      	ldr	r3, [pc, #132]	; (80006dc <MT48LC4M32B2_Init+0xec>)
 8000658:	701a      	strb	r2, [r3, #0]

	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 800065c:	2203      	movs	r2, #3
 800065e:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000660:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 8000662:	2210      	movs	r2, #16
 8000664:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 8000668:	2208      	movs	r2, #8
 800066a:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
	hal_status = HAL_SDRAM_SendCommand(sdram, &command, SDRAM_TIMEOUT);
 8000672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000676:	4918      	ldr	r1, [pc, #96]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f002 fd37 	bl	80030ec <HAL_SDRAM_SendCommand>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <MT48LC4M32B2_Init+0xec>)
 8000684:	701a      	strb	r2, [r3, #0]

	tmrmd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1 |
 8000686:	f44f 7308 	mov.w	r3, #544	; 0x220
 800068a:	60fb      	str	r3, [r7, #12]
	SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
	SDRAM_MODEREG_CAS_LATENCY_2 |
	SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 800068e:	2204      	movs	r2, #4
 8000690:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 8000694:	2210      	movs	r2, #16
 8000696:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 800069a:	2201      	movs	r2, #1
 800069c:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmrmd;
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 80006a2:	60d3      	str	r3, [r2, #12]
	hal_status = HAL_SDRAM_SendCommand(sdram, &command, SDRAM_TIMEOUT);
 80006a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a8:	490b      	ldr	r1, [pc, #44]	; (80006d8 <MT48LC4M32B2_Init+0xe8>)
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f002 fd1e 	bl	80030ec <HAL_SDRAM_SendCommand>
 80006b0:	4603      	mov	r3, r0
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MT48LC4M32B2_Init+0xec>)
 80006b6:	701a      	strb	r2, [r3, #0]

	sdram->Instance->SDRTR |= ((uint32_t) ((1292) << 1));
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	6959      	ldr	r1, [r3, #20]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	f640 2318 	movw	r3, #2584	; 0xa18
 80006c6:	430b      	orrs	r3, r1
 80006c8:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 80006ca:	2001      	movs	r0, #1
 80006cc:	f001 f8a0 	bl	8001810 <HAL_Delay>

}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	200000a0 	.word	0x200000a0
 80006dc:	200000b0 	.word	0x200000b0

080006e0 <MT48LC4M32B2_WriteBuffer>:

void MT48LC4M32B2_WriteBuffer(uint32_t *Buffer, uint32_t WRITE_ADDR,
		uint32_t WRITE_LENGTH) {
 80006e0:	b480      	push	{r7}
 80006e2:	b087      	sub	sp, #28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
	uint32_t uwIndex = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
	/* Функція запису буферу у пам'ять */
	for (uwIndex = 0; uwIndex < WRITE_LENGTH; uwIndex++) {
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	e00c      	b.n	8000710 <MT48LC4M32B2_WriteBuffer+0x30>
		*(__IO uint32_t*) (WRITE_ADDR + 4 * uwIndex) = Buffer[uwIndex];
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	009b      	lsls	r3, r3, #2
 80006fa:	68fa      	ldr	r2, [r7, #12]
 80006fc:	4413      	add	r3, r2
 80006fe:	697a      	ldr	r2, [r7, #20]
 8000700:	0091      	lsls	r1, r2, #2
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	440a      	add	r2, r1
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6013      	str	r3, [r2, #0]
	for (uwIndex = 0; uwIndex < WRITE_LENGTH; uwIndex++) {
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	d3ee      	bcc.n	80006f6 <MT48LC4M32B2_WriteBuffer+0x16>
	}
}
 8000718:	bf00      	nop
 800071a:	371c      	adds	r7, #28
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr

08000724 <MT48LC4M32B2_ReadToBuffer>:

void MT48LC4M32B2_ReadToBuffer(uint32_t *dstBuffer, uint32_t Read_ADDR,
		uint32_t READ_LENGTH) {
 8000724:	b480      	push	{r7}
 8000726:	b087      	sub	sp, #28
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
	uint32_t uwIndex = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
	/* Функція запису буферу у пам'ять */
	for (uwIndex = 0; uwIndex < READ_LENGTH; uwIndex++) {
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	e00d      	b.n	8000756 <MT48LC4M32B2_ReadToBuffer+0x32>
		dstBuffer[uwIndex] = *(__IO uint32_t*) (Read_ADDR + 4 * uwIndex);
 800073a:	697b      	ldr	r3, [r7, #20]
 800073c:	009a      	lsls	r2, r3, #2
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	4413      	add	r3, r2
 8000742:	4619      	mov	r1, r3
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	680a      	ldr	r2, [r1, #0]
 800074e:	601a      	str	r2, [r3, #0]
	for (uwIndex = 0; uwIndex < READ_LENGTH; uwIndex++) {
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	3301      	adds	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
 8000756:	697a      	ldr	r2, [r7, #20]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	429a      	cmp	r2, r3
 800075c:	d3ed      	bcc.n	800073a <MT48LC4M32B2_ReadToBuffer+0x16>
	}
}
 800075e:	bf00      	nop
 8000760:	371c      	adds	r7, #28
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
	...

0800076c <ST7789_Init>:
uint8_t lcd_clear_frame_buffer[115200] = { 0x00, };
#endif
//------------------------------------------------------------------------------------------------//
uint8_t ST7789_Width, ST7789_Height;
//------------------------------------------------------------------------------------------------//
void ST7789_Init(uint8_t Width, uint8_t Height) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	71bb      	strb	r3, [r7, #6]
	//vIPSSelectAllIps(); /* Перед ініціалізацією треба заселектити всі IPS-екрани */
	ST7789_Width = Width;
 800077c:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <ST7789_Init+0x74>)
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	7013      	strb	r3, [r2, #0]
	ST7789_Height = Height;
 8000782:	4a18      	ldr	r2, [pc, #96]	; (80007e4 <ST7789_Init+0x78>)
 8000784:	79bb      	ldrb	r3, [r7, #6]
 8000786:	7013      	strb	r3, [r2, #0]

	ST7789_HardReset();
 8000788:	f000 f82e 	bl	80007e8 <ST7789_HardReset>
	ST7789_SoftReset();
 800078c:	f000 f842 	bl	8000814 <ST7789_SoftReset>
	ST7789_SleepModeExit();
 8000790:	f000 f87e 	bl	8000890 <ST7789_SleepModeExit>

	ST7789_ColorModeSet(ST7789_ColorMode_65K | ST7789_ColorMode_16bit);
 8000794:	2055      	movs	r0, #85	; 0x55
 8000796:	f000 f886 	bl	80008a6 <ST7789_ColorModeSet>
	HAL_Delay(10);
 800079a:	200a      	movs	r0, #10
 800079c:	f001 f838 	bl	8001810 <HAL_Delay>
	ST7789_MemAccessModeSet(4, 1, 1, 0);
 80007a0:	2300      	movs	r3, #0
 80007a2:	2201      	movs	r2, #1
 80007a4:	2101      	movs	r1, #1
 80007a6:	2004      	movs	r0, #4
 80007a8:	f000 f890 	bl	80008cc <ST7789_MemAccessModeSet>
	HAL_Delay(10);
 80007ac:	200a      	movs	r0, #10
 80007ae:	f001 f82f 	bl	8001810 <HAL_Delay>
	ST7789_InversionMode(1);
 80007b2:	2001      	movs	r0, #1
 80007b4:	f000 f8e8 	bl	8000988 <ST7789_InversionMode>
	HAL_Delay(10);
 80007b8:	200a      	movs	r0, #10
 80007ba:	f001 f829 	bl	8001810 <HAL_Delay>
	ST7789_FillScreen(0);
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 f8f6 	bl	80009b0 <ST7789_FillScreen>
	ST7789_SetBL(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f000 fa2d 	bl	8000c24 <ST7789_SetBL>
	ST7789_DisplayPower(1);
 80007ca:	2001      	movs	r0, #1
 80007cc:	f000 fa3a 	bl	8000c44 <ST7789_DisplayPower>
	HAL_Delay(100);
 80007d0:	2064      	movs	r0, #100	; 0x64
 80007d2:	f001 f81d 	bl	8001810 <HAL_Delay>
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000b1 	.word	0x200000b1
 80007e4:	200000b2 	.word	0x200000b2

080007e8 <ST7789_HardReset>:
//------------------------------------------------------------------------------------------------//
void ST7789_HardReset(void) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2140      	movs	r1, #64	; 0x40
 80007f0:	4807      	ldr	r0, [pc, #28]	; (8000810 <ST7789_HardReset+0x28>)
 80007f2:	f001 fb37 	bl	8001e64 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80007f6:	200a      	movs	r0, #10
 80007f8:	f001 f80a 	bl	8001810 <HAL_Delay>
	HAL_GPIO_WritePin(RES_GPIO_Port, RES_Pin, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2140      	movs	r1, #64	; 0x40
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <ST7789_HardReset+0x28>)
 8000802:	f001 fb2f 	bl	8001e64 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8000806:	2096      	movs	r0, #150	; 0x96
 8000808:	f001 f802 	bl	8001810 <HAL_Delay>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40020800 	.word	0x40020800

08000814 <ST7789_SoftReset>:
//------------------------------------------------------------------------------------------------//
void ST7789_SoftReset(void) {
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	ST7789_SendCmd(ST7789_Cmd_SWRESET);
 8000818:	2001      	movs	r0, #1
 800081a:	f000 f805 	bl	8000828 <ST7789_SendCmd>
	HAL_Delay(130);
 800081e:	2082      	movs	r0, #130	; 0x82
 8000820:	f000 fff6 	bl	8001810 <HAL_Delay>
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}

08000828 <ST7789_SendCmd>:
//------------------------------------------------------------------------------------------------//
void ST7789_SendCmd(uint8_t Cmd) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	4809      	ldr	r0, [pc, #36]	; (800085c <ST7789_SendCmd+0x34>)
 8000838:	f001 fb14 	bl	8001e64 <HAL_GPIO_WritePin>

	/* Several data should be sent in a raw */
	/* Direct SPI accesses for optimization */

	if (HAL_SPI_Transmit(&hspi5, &Cmd, 1, 100) != HAL_OK) {
 800083c:	1df9      	adds	r1, r7, #7
 800083e:	2364      	movs	r3, #100	; 0x64
 8000840:	2201      	movs	r2, #1
 8000842:	4807      	ldr	r0, [pc, #28]	; (8000860 <ST7789_SendCmd+0x38>)
 8000844:	f002 fd0f 	bl	8003266 <HAL_SPI_Transmit>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <ST7789_SendCmd+0x2a>

		Error_Handler();
 800084e:	f000 fd47 	bl	80012e0 <Error_Handler>
	}

}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40020800 	.word	0x40020800
 8000860:	20000408 	.word	0x20000408

08000864 <ST7789_SendData>:
//------------------------------------------------------------------------------------------------//
void ST7789_SendData(uint8_t Data) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DC_GPIO_Port, DC_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2180      	movs	r1, #128	; 0x80
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <ST7789_SendData+0x24>)
 8000874:	f001 faf6 	bl	8001e64 <HAL_GPIO_WritePin>

	 Error_Handler();
	 }
	 */
	/*³������� ����� ����� CMSIS*/
	*((__IO uint8_t*) &SPI5->DR) = Data;
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <ST7789_SendData+0x28>)
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	7013      	strb	r3, [r2, #0]
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40020800 	.word	0x40020800
 800088c:	4001500c 	.word	0x4001500c

08000890 <ST7789_SleepModeExit>:
void ST7789_SleepModeEnter(void) {
	ST7789_SendCmd(ST7789_Cmd_SLPIN);
	HAL_Delay(500);
}
//------------------------------------------------------------------------------------------------//
void ST7789_SleepModeExit(void) {
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
	ST7789_SendCmd(ST7789_Cmd_SLPOUT);
 8000894:	2011      	movs	r0, #17
 8000896:	f7ff ffc7 	bl	8000828 <ST7789_SendCmd>
	HAL_Delay(500);
 800089a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800089e:	f000 ffb7 	bl	8001810 <HAL_Delay>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <ST7789_ColorModeSet>:
//------------------------------------------------------------------------------------------------//
void ST7789_ColorModeSet(uint8_t ColorMode) {
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b082      	sub	sp, #8
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	4603      	mov	r3, r0
 80008ae:	71fb      	strb	r3, [r7, #7]
	ST7789_SendCmd(ST7789_Cmd_COLMOD);
 80008b0:	203a      	movs	r0, #58	; 0x3a
 80008b2:	f7ff ffb9 	bl	8000828 <ST7789_SendCmd>
	ST7789_SendData(ColorMode & 0x77);
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	f003 0377 	and.w	r3, r3, #119	; 0x77
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ffd0 	bl	8000864 <ST7789_SendData>
}
 80008c4:	bf00      	nop
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <ST7789_MemAccessModeSet>:
//------------------------------------------------------------------------------------------------//
void ST7789_MemAccessModeSet(uint8_t Rotation, uint8_t VertMirror,
		uint8_t HorizMirror, uint8_t IsBGR) {
 80008cc:	b590      	push	{r4, r7, lr}
 80008ce:	b085      	sub	sp, #20
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4604      	mov	r4, r0
 80008d4:	4608      	mov	r0, r1
 80008d6:	4611      	mov	r1, r2
 80008d8:	461a      	mov	r2, r3
 80008da:	4623      	mov	r3, r4
 80008dc:	71fb      	strb	r3, [r7, #7]
 80008de:	4603      	mov	r3, r0
 80008e0:	71bb      	strb	r3, [r7, #6]
 80008e2:	460b      	mov	r3, r1
 80008e4:	717b      	strb	r3, [r7, #5]
 80008e6:	4613      	mov	r3, r2
 80008e8:	713b      	strb	r3, [r7, #4]
	uint8_t Value;
	Rotation &= 7;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 0307 	and.w	r3, r3, #7
 80008f0:	71fb      	strb	r3, [r7, #7]

	ST7789_SendCmd(ST7789_Cmd_MADCTL);
 80008f2:	2036      	movs	r0, #54	; 0x36
 80008f4:	f7ff ff98 	bl	8000828 <ST7789_SendCmd>

	switch (Rotation) {
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b07      	cmp	r3, #7
 80008fc:	d82a      	bhi.n	8000954 <ST7789_MemAccessModeSet+0x88>
 80008fe:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <ST7789_MemAccessModeSet+0x38>)
 8000900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000904:	08000925 	.word	0x08000925
 8000908:	0800092b 	.word	0x0800092b
 800090c:	08000931 	.word	0x08000931
 8000910:	08000937 	.word	0x08000937
 8000914:	0800093d 	.word	0x0800093d
 8000918:	08000943 	.word	0x08000943
 800091c:	08000949 	.word	0x08000949
 8000920:	0800094f 	.word	0x0800094f
	case 0:
		Value = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]
		break;
 8000928:	e014      	b.n	8000954 <ST7789_MemAccessModeSet+0x88>
	case 1:
		Value = ST7789_MADCTL_MX;
 800092a:	2340      	movs	r3, #64	; 0x40
 800092c:	73fb      	strb	r3, [r7, #15]
		break;
 800092e:	e011      	b.n	8000954 <ST7789_MemAccessModeSet+0x88>
	case 2:
		Value = ST7789_MADCTL_MY;
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	73fb      	strb	r3, [r7, #15]
		break;
 8000934:	e00e      	b.n	8000954 <ST7789_MemAccessModeSet+0x88>
	case 3:
		Value = ST7789_MADCTL_MX | ST7789_MADCTL_MY;
 8000936:	23c0      	movs	r3, #192	; 0xc0
 8000938:	73fb      	strb	r3, [r7, #15]
		break;
 800093a:	e00b      	b.n	8000954 <ST7789_MemAccessModeSet+0x88>
	case 4:
		Value = ST7789_MADCTL_MV;
 800093c:	2320      	movs	r3, #32
 800093e:	73fb      	strb	r3, [r7, #15]
		break;
 8000940:	e008      	b.n	8000954 <ST7789_MemAccessModeSet+0x88>
	case 5:
		Value = ST7789_MADCTL_MV | ST7789_MADCTL_MX;
 8000942:	2360      	movs	r3, #96	; 0x60
 8000944:	73fb      	strb	r3, [r7, #15]
		break;
 8000946:	e005      	b.n	8000954 <ST7789_MemAccessModeSet+0x88>
	case 6:
		Value = ST7789_MADCTL_MV | ST7789_MADCTL_MY;
 8000948:	23a0      	movs	r3, #160	; 0xa0
 800094a:	73fb      	strb	r3, [r7, #15]
		break;
 800094c:	e002      	b.n	8000954 <ST7789_MemAccessModeSet+0x88>
	case 7:
		Value = ST7789_MADCTL_MV | ST7789_MADCTL_MX | ST7789_MADCTL_MY;
 800094e:	23e0      	movs	r3, #224	; 0xe0
 8000950:	73fb      	strb	r3, [r7, #15]
		break;
 8000952:	bf00      	nop
	}

	if (VertMirror)
 8000954:	79bb      	ldrb	r3, [r7, #6]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <ST7789_MemAccessModeSet+0x92>
		Value = ST7789_MADCTL_ML;
 800095a:	2310      	movs	r3, #16
 800095c:	73fb      	strb	r3, [r7, #15]
	if (HorizMirror)
 800095e:	797b      	ldrb	r3, [r7, #5]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <ST7789_MemAccessModeSet+0x9c>
		Value = ST7789_MADCTL_MH;
 8000964:	2304      	movs	r3, #4
 8000966:	73fb      	strb	r3, [r7, #15]

	if (IsBGR)
 8000968:	793b      	ldrb	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <ST7789_MemAccessModeSet+0xaa>
		Value |= ST7789_MADCTL_BGR;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	f043 0308 	orr.w	r3, r3, #8
 8000974:	73fb      	strb	r3, [r7, #15]

	ST7789_SendData(Value);
 8000976:	7bfb      	ldrb	r3, [r7, #15]
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ff73 	bl	8000864 <ST7789_SendData>
}
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	bf00      	nop

08000988 <ST7789_InversionMode>:
//------------------------------------------------------------------------------------------------//
void ST7789_InversionMode(uint8_t Mode) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
	if (Mode)
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d003      	beq.n	80009a0 <ST7789_InversionMode+0x18>
		ST7789_SendCmd(ST7789_Cmd_INVON);
 8000998:	2021      	movs	r0, #33	; 0x21
 800099a:	f7ff ff45 	bl	8000828 <ST7789_SendCmd>
	else
		ST7789_SendCmd(ST7789_Cmd_INVOFF);
}
 800099e:	e002      	b.n	80009a6 <ST7789_InversionMode+0x1e>
		ST7789_SendCmd(ST7789_Cmd_INVOFF);
 80009a0:	2020      	movs	r0, #32
 80009a2:	f7ff ff41 	bl	8000828 <ST7789_SendCmd>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
	...

080009b0 <ST7789_FillScreen>:
//------------------------------------------------------------------------------------------------//
void ST7789_FillScreen(uint16_t color) {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af02      	add	r7, sp, #8
 80009b6:	4603      	mov	r3, r0
 80009b8:	80fb      	strh	r3, [r7, #6]
	ST7789_FillRect(0, 0, ST7789_Width, ST7789_Height, color);
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <ST7789_FillScreen+0x2c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	b21a      	sxth	r2, r3
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <ST7789_FillScreen+0x30>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b219      	sxth	r1, r3
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	9300      	str	r3, [sp, #0]
 80009ca:	460b      	mov	r3, r1
 80009cc:	2100      	movs	r1, #0
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f808 	bl	80009e4 <ST7789_FillRect>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000b1 	.word	0x200000b1
 80009e0:	200000b2 	.word	0x200000b2

080009e4 <ST7789_FillRect>:
//------------------------------------------------------------------------------------------------//
void ST7789_FillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color) {
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4604      	mov	r4, r0
 80009ec:	4608      	mov	r0, r1
 80009ee:	4611      	mov	r1, r2
 80009f0:	461a      	mov	r2, r3
 80009f2:	4623      	mov	r3, r4
 80009f4:	80fb      	strh	r3, [r7, #6]
 80009f6:	4603      	mov	r3, r0
 80009f8:	80bb      	strh	r3, [r7, #4]
 80009fa:	460b      	mov	r3, r1
 80009fc:	807b      	strh	r3, [r7, #2]
 80009fe:	4613      	mov	r3, r2
 8000a00:	803b      	strh	r3, [r7, #0]
	// 0 120 239 120
	if ((x >= ST7789_Width) || (y >= ST7789_Height))
 8000a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a06:	4a2d      	ldr	r2, [pc, #180]	; (8000abc <ST7789_FillRect+0xd8>)
 8000a08:	7812      	ldrb	r2, [r2, #0]
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	da52      	bge.n	8000ab4 <ST7789_FillRect+0xd0>
 8000a0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a12:	4a2b      	ldr	r2, [pc, #172]	; (8000ac0 <ST7789_FillRect+0xdc>)
 8000a14:	7812      	ldrb	r2, [r2, #0]
 8000a16:	4293      	cmp	r3, r2
 8000a18:	da4c      	bge.n	8000ab4 <ST7789_FillRect+0xd0>
		return;
	if ((x + w) > ST7789_Width)
 8000a1a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a25      	ldr	r2, [pc, #148]	; (8000abc <ST7789_FillRect+0xd8>)
 8000a26:	7812      	ldrb	r2, [r2, #0]
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	dd06      	ble.n	8000a3a <ST7789_FillRect+0x56>
		w = ST7789_Width - x;
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <ST7789_FillRect+0xd8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	b29b      	uxth	r3, r3
 8000a38:	807b      	strh	r3, [r7, #2]
	if ((y + h) > ST7789_Height)
 8000a3a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a3e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a42:	4413      	add	r3, r2
 8000a44:	4a1e      	ldr	r2, [pc, #120]	; (8000ac0 <ST7789_FillRect+0xdc>)
 8000a46:	7812      	ldrb	r2, [r2, #0]
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	dd06      	ble.n	8000a5a <ST7789_FillRect+0x76>
		h = ST7789_Height - y;
 8000a4c:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <ST7789_FillRect+0xdc>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	88bb      	ldrh	r3, [r7, #4]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	803b      	strh	r3, [r7, #0]
	ST7789_SetWindow(x, y, x + w - 1, y + h - 1);
 8000a5a:	88fb      	ldrh	r3, [r7, #6]
 8000a5c:	b2d8      	uxtb	r0, r3
 8000a5e:	88bb      	ldrh	r3, [r7, #4]
 8000a60:	b2d9      	uxtb	r1, r3
 8000a62:	88fb      	ldrh	r3, [r7, #6]
 8000a64:	b2da      	uxtb	r2, r3
 8000a66:	887b      	ldrh	r3, [r7, #2]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	4413      	add	r3, r2
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	3b01      	subs	r3, #1
 8000a70:	b2dc      	uxtb	r4, r3
 8000a72:	88bb      	ldrh	r3, [r7, #4]
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	883b      	ldrh	r3, [r7, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	4622      	mov	r2, r4
 8000a84:	f000 f81e 	bl	8000ac4 <ST7789_SetWindow>
	for (uint32_t i = 0; i < (h * w); i++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	e007      	b.n	8000a9e <ST7789_FillRect+0xba>
		ST7789_RamWrite(&color, 1);
 8000a8e:	2101      	movs	r1, #1
 8000a90:	f107 0020 	add.w	r0, r7, #32
 8000a94:	f000 f83c 	bl	8000b10 <ST7789_RamWrite>
	for (uint32_t i = 0; i < (h * w); i++)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000aa2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000aa6:	fb02 f303 	mul.w	r3, r2, r3
 8000aaa:	461a      	mov	r2, r3
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d3ed      	bcc.n	8000a8e <ST7789_FillRect+0xaa>
 8000ab2:	e000      	b.n	8000ab6 <ST7789_FillRect+0xd2>
		return;
 8000ab4:	bf00      	nop
}
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	200000b1 	.word	0x200000b1
 8000ac0:	200000b2 	.word	0x200000b2

08000ac4 <ST7789_SetWindow>:
//------------------------------------------------------------------------------------------------//
void ST7789_SetWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8000ac4:	b590      	push	{r4, r7, lr}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4604      	mov	r4, r0
 8000acc:	4608      	mov	r0, r1
 8000ace:	4611      	mov	r1, r2
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4623      	mov	r3, r4
 8000ad4:	71fb      	strb	r3, [r7, #7]
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71bb      	strb	r3, [r7, #6]
 8000ada:	460b      	mov	r3, r1
 8000adc:	717b      	strb	r3, [r7, #5]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	713b      	strb	r3, [r7, #4]
	ST7789_ColumnSet(x0, x1);
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	797a      	ldrb	r2, [r7, #5]
 8000ae8:	b292      	uxth	r2, r2
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 f82d 	bl	8000b4c <ST7789_ColumnSet>
	ST7789_RowSet(y0, y1);
 8000af2:	79bb      	ldrb	r3, [r7, #6]
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	793a      	ldrb	r2, [r7, #4]
 8000af8:	b292      	uxth	r2, r2
 8000afa:	4611      	mov	r1, r2
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f85b 	bl	8000bb8 <ST7789_RowSet>
	ST7789_SendCmd(ST7789_Cmd_RAMWR);
 8000b02:	202c      	movs	r0, #44	; 0x2c
 8000b04:	f7ff fe90 	bl	8000828 <ST7789_SendCmd>
}
 8000b08:	bf00      	nop
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bd90      	pop	{r4, r7, pc}

08000b10 <ST7789_RamWrite>:
//------------------------------------------------------------------------------------------------//
void ST7789_RamWrite(uint16_t *pBuff, uint16_t Len) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	807b      	strh	r3, [r7, #2]
	while (Len--) {
 8000b1c:	e00d      	b.n	8000b3a <ST7789_RamWrite+0x2a>
		ST7789_SendData(*pBuff >> 8);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	881b      	ldrh	r3, [r3, #0]
 8000b22:	0a1b      	lsrs	r3, r3, #8
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff fe9b 	bl	8000864 <ST7789_SendData>
		ST7789_SendData(*pBuff & 0xFF);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	881b      	ldrh	r3, [r3, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fe95 	bl	8000864 <ST7789_SendData>
	while (Len--) {
 8000b3a:	887b      	ldrh	r3, [r7, #2]
 8000b3c:	1e5a      	subs	r2, r3, #1
 8000b3e:	807a      	strh	r2, [r7, #2]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1ec      	bne.n	8000b1e <ST7789_RamWrite+0xe>
	}
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <ST7789_ColumnSet>:
//------------------------------------------------------------------------------------------------//
void ST7789_ColumnSet(uint16_t ColumnStart, uint16_t ColumnEnd) {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	460a      	mov	r2, r1
 8000b56:	80fb      	strh	r3, [r7, #6]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	80bb      	strh	r3, [r7, #4]
	if (ColumnStart > ColumnEnd)
 8000b5c:	88fa      	ldrh	r2, [r7, #6]
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d821      	bhi.n	8000ba8 <ST7789_ColumnSet+0x5c>
		return;
	if (ColumnEnd > ST7789_Width)
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <ST7789_ColumnSet+0x68>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	88ba      	ldrh	r2, [r7, #4]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d81d      	bhi.n	8000bac <ST7789_ColumnSet+0x60>
		return;

	ColumnStart += ST7789_X_Start;
	ColumnEnd += ST7789_X_Start;

	ST7789_SendCmd(ST7789_Cmd_CASET);
 8000b70:	202a      	movs	r0, #42	; 0x2a
 8000b72:	f7ff fe59 	bl	8000828 <ST7789_SendCmd>
	ST7789_SendData(ColumnStart >> 8);
 8000b76:	88fb      	ldrh	r3, [r7, #6]
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff fe70 	bl	8000864 <ST7789_SendData>
	ST7789_SendData(ColumnStart & 0xFF);
 8000b84:	88fb      	ldrh	r3, [r7, #6]
 8000b86:	b2db      	uxtb	r3, r3
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fe6b 	bl	8000864 <ST7789_SendData>
	ST7789_SendData(ColumnEnd >> 8);
 8000b8e:	88bb      	ldrh	r3, [r7, #4]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe64 	bl	8000864 <ST7789_SendData>
	ST7789_SendData(ColumnEnd & 0xFF);
 8000b9c:	88bb      	ldrh	r3, [r7, #4]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fe5f 	bl	8000864 <ST7789_SendData>
 8000ba6:	e002      	b.n	8000bae <ST7789_ColumnSet+0x62>
		return;
 8000ba8:	bf00      	nop
 8000baa:	e000      	b.n	8000bae <ST7789_ColumnSet+0x62>
		return;
 8000bac:	bf00      	nop
}
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	200000b1 	.word	0x200000b1

08000bb8 <ST7789_RowSet>:
//------------------------------------------------------------------------------------------------//
void ST7789_RowSet(uint16_t RowStart, uint16_t RowEnd) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	460a      	mov	r2, r1
 8000bc2:	80fb      	strh	r3, [r7, #6]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	80bb      	strh	r3, [r7, #4]
	if (RowStart > RowEnd)
 8000bc8:	88fa      	ldrh	r2, [r7, #6]
 8000bca:	88bb      	ldrh	r3, [r7, #4]
 8000bcc:	429a      	cmp	r2, r3
 8000bce:	d821      	bhi.n	8000c14 <ST7789_RowSet+0x5c>
		return;
	if (RowEnd > ST7789_Height)
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <ST7789_RowSet+0x68>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	88ba      	ldrh	r2, [r7, #4]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d81d      	bhi.n	8000c18 <ST7789_RowSet+0x60>
		return;

	RowStart += ST7789_Y_Start;
	RowEnd += ST7789_Y_Start;

	ST7789_SendCmd(ST7789_Cmd_RASET);
 8000bdc:	202b      	movs	r0, #43	; 0x2b
 8000bde:	f7ff fe23 	bl	8000828 <ST7789_SendCmd>
	ST7789_SendData(RowStart >> 8);
 8000be2:	88fb      	ldrh	r3, [r7, #6]
 8000be4:	0a1b      	lsrs	r3, r3, #8
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fe3a 	bl	8000864 <ST7789_SendData>
	ST7789_SendData(RowStart & 0xFF);
 8000bf0:	88fb      	ldrh	r3, [r7, #6]
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff fe35 	bl	8000864 <ST7789_SendData>
	ST7789_SendData(RowEnd >> 8);
 8000bfa:	88bb      	ldrh	r3, [r7, #4]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff fe2e 	bl	8000864 <ST7789_SendData>
	ST7789_SendData(RowEnd & 0xFF);
 8000c08:	88bb      	ldrh	r3, [r7, #4]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fe29 	bl	8000864 <ST7789_SendData>
 8000c12:	e002      	b.n	8000c1a <ST7789_RowSet+0x62>
		return;
 8000c14:	bf00      	nop
 8000c16:	e000      	b.n	8000c1a <ST7789_RowSet+0x62>
		return;
 8000c18:	bf00      	nop
}
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200000b2 	.word	0x200000b2

08000c24 <ST7789_SetBL>:
//------------------------------------------------------------------------------------------------//
void ST7789_SetBL(uint8_t Value) {
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	if (Value > 100)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b64      	cmp	r3, #100	; 0x64
 8000c32:	d901      	bls.n	8000c38 <ST7789_SetBL+0x14>
		Value = 100;
 8000c34:	2364      	movs	r3, #100	; 0x64
 8000c36:	71fb      	strb	r3, [r7, #7]

}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <ST7789_DisplayPower>:
//------------------------------------------------------------------------------------------------//
void ST7789_DisplayPower(uint8_t On) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	if (On)
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <ST7789_DisplayPower+0x18>
		ST7789_SendCmd(ST7789_Cmd_DISPON);
 8000c54:	2029      	movs	r0, #41	; 0x29
 8000c56:	f7ff fde7 	bl	8000828 <ST7789_SendCmd>
	else
		ST7789_SendCmd(ST7789_Cmd_DISPOFF);
}
 8000c5a:	e002      	b.n	8000c62 <ST7789_DisplayPower+0x1e>
		ST7789_SendCmd(ST7789_Cmd_DISPOFF);
 8000c5c:	2028      	movs	r0, #40	; 0x28
 8000c5e:	f7ff fde3 	bl	8000828 <ST7789_SendCmd>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_FMC_Init+0x98>)
 8000c86:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <MX_FMC_Init+0x9c>)
 8000c88:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_FMC_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_FMC_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c96:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_FMC_Init+0x98>)
 8000c98:	2204      	movs	r2, #4
 8000c9a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_FMC_Init+0x98>)
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_FMC_Init+0x98>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_FMC_Init+0x98>)
 8000caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_FMC_Init+0x98>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000cb6:	4b13      	ldr	r3, [pc, #76]	; (8000d04 <MX_FMC_Init+0x98>)
 8000cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cbc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_FMC_Init+0x98>)
 8000cc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cc4:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_FMC_Init+0x98>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8000cd0:	2306      	movs	r3, #6
 8000cd2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_FMC_Init+0x98>)
 8000cee:	f002 f9c9 	bl	8003084 <HAL_SDRAM_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000cf8:	f000 faf2 	bl	80012e0 <Error_Handler>
  }

}
 8000cfc:	bf00      	nop
 8000cfe:	3720      	adds	r7, #32
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	200000b4 	.word	0x200000b4
 8000d08:	a0000140 	.word	0xa0000140

08000d0c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000d20:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <HAL_FMC_MspInit+0xe4>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d15e      	bne.n	8000de6 <HAL_FMC_MspInit+0xda>
    return;
  }
  FMC_Initialized = 1;
 8000d28:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <HAL_FMC_MspInit+0xe4>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000d2e:	4b31      	ldr	r3, [pc, #196]	; (8000df4 <HAL_FMC_MspInit+0xe8>)
 8000d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d32:	4a30      	ldr	r2, [pc, #192]	; (8000df4 <HAL_FMC_MspInit+0xe8>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6393      	str	r3, [r2, #56]	; 0x38
 8000d3a:	4b2e      	ldr	r3, [pc, #184]	; (8000df4 <HAL_FMC_MspInit+0xe8>)
 8000d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 8000d46:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000d4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10 
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d58:	230c      	movs	r3, #12
 8000d5a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d5c:	1d3b      	adds	r3, r7, #4
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4825      	ldr	r0, [pc, #148]	; (8000df8 <HAL_FMC_MspInit+0xec>)
 8000d62:	f000 fed5 	bl	8001b10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 8000d66:	f248 1313 	movw	r3, #33043	; 0x8113
 8000d6a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d78:	230c      	movs	r3, #12
 8000d7a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4619      	mov	r1, r3
 8000d80:	481e      	ldr	r0, [pc, #120]	; (8000dfc <HAL_FMC_MspInit+0xf0>)
 8000d82:	f000 fec5 	bl	8001b10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8000d86:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000d8a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d98:	230c      	movs	r3, #12
 8000d9a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4817      	ldr	r0, [pc, #92]	; (8000e00 <HAL_FMC_MspInit+0xf4>)
 8000da2:	f000 feb5 	bl	8001b10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8000da6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000daa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15 
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	2302      	movs	r3, #2
 8000dae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000db8:	230c      	movs	r3, #12
 8000dba:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4810      	ldr	r0, [pc, #64]	; (8000e04 <HAL_FMC_MspInit+0xf8>)
 8000dc2:	f000 fea5 	bl	8001b10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_2;
 8000dc6:	232c      	movs	r3, #44	; 0x2c
 8000dc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dd6:	230c      	movs	r3, #12
 8000dd8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480a      	ldr	r0, [pc, #40]	; (8000e08 <HAL_FMC_MspInit+0xfc>)
 8000de0:	f000 fe96 	bl	8001b10 <HAL_GPIO_Init>
 8000de4:	e000      	b.n	8000de8 <HAL_FMC_MspInit+0xdc>
    return;
 8000de6:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000de8:	3718      	adds	r7, #24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	2000008c 	.word	0x2000008c
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40021800 	.word	0x40021800
 8000e00:	40020c00 	.word	0x40020c00
 8000e04:	40021400 	.word	0x40021400
 8000e08:	40021c00 	.word	0x40021c00

08000e0c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000e14:	f7ff ff7a 	bl	8000d0c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000e18:	bf00      	nop
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	f107 031c 	add.w	r3, r7, #28
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e36:	4b35      	ldr	r3, [pc, #212]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a34      	ldr	r2, [pc, #208]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e3c:	f043 0310 	orr.w	r3, r3, #16
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b32      	ldr	r3, [pc, #200]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	61bb      	str	r3, [r7, #24]
 8000e4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a2e      	ldr	r2, [pc, #184]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e54:	f043 0301 	orr.w	r3, r3, #1
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0301 	and.w	r3, r3, #1
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e66:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a28      	ldr	r2, [pc, #160]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7a:	613b      	str	r3, [r7, #16]
 8000e7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7e:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000e9c:	f043 0320 	orr.w	r3, r3, #32
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0320 	and.w	r3, r3, #32
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_GPIO_Init+0xec>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	21c0      	movs	r1, #192	; 0xc0
 8000ee2:	480b      	ldr	r0, [pc, #44]	; (8000f10 <MX_GPIO_Init+0xf0>)
 8000ee4:	f000 ffbe 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC7 PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000ee8:	23c0      	movs	r3, #192	; 0xc0
 8000eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	4619      	mov	r1, r3
 8000efe:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_GPIO_Init+0xf0>)
 8000f00:	f000 fe06 	bl	8001b10 <HAL_GPIO_Init>

}
 8000f04:	bf00      	nop
 8000f06:	3730      	adds	r7, #48	; 0x30
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020800 	.word	0x40020800

08000f14 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f18:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f1c:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <SCB_EnableICache+0x3c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f2c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <SCB_EnableICache+0x3c>)
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <SCB_EnableICache+0x3c>)
 8000f36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000f40:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <SCB_EnableDCache+0x7c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000f62:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <SCB_EnableDCache+0x7c>)
 8000f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f6c:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	0b5b      	lsrs	r3, r3, #13
 8000f72:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000f76:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	08db      	lsrs	r3, r3, #3
 8000f7c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f80:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	015a      	lsls	r2, r3, #5
 8000f86:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000f8a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000f8c:	68ba      	ldr	r2, [r7, #8]
 8000f8e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000f90:	490f      	ldr	r1, [pc, #60]	; (8000fd0 <SCB_EnableDCache+0x7c>)
 8000f92:	4313      	orrs	r3, r2
 8000f94:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	1e5a      	subs	r2, r3, #1
 8000f9c:	60ba      	str	r2, [r7, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1ef      	bne.n	8000f82 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	60fa      	str	r2, [r7, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1e5      	bne.n	8000f78 <SCB_EnableDCache+0x24>
 8000fac:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000fb0:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <SCB_EnableDCache+0x7c>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <SCB_EnableDCache+0x7c>)
 8000fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fba:	6153      	str	r3, [r2, #20]
 8000fbc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000fc0:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <Fill_Buffer>:
static void MPU_Config(void);
/* USER CODE BEGIN PFP */
void UART_Printf(const char *fmt, ...);

static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLength,
		uint32_t uwOffset) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	b087      	sub	sp, #28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
	for (uint32_t tmpIndex = 0; tmpIndex <= uwBufferLength; tmpIndex++) {
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	e00a      	b.n	8000ffc <Fill_Buffer+0x28>
		pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	68fa      	ldr	r2, [r7, #12]
 8000fec:	4413      	add	r3, r2
 8000fee:	6979      	ldr	r1, [r7, #20]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	440a      	add	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
	for (uint32_t tmpIndex = 0; tmpIndex <= uwBufferLength; tmpIndex++) {
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	429a      	cmp	r2, r3
 8001002:	d9f0      	bls.n	8000fe6 <Fill_Buffer+0x12>
	}
}
 8001004:	bf00      	nop
 8001006:	371c      	adds	r7, #28
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b091      	sub	sp, #68	; 0x44
 8001014:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	char str1[50] = { 0, };
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2232      	movs	r2, #50	; 0x32
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f003 f9cf 	bl	80043c0 <memset>
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8001022:	f000 f92f 	bl	8001284 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8001026:	f7ff ff75 	bl	8000f14 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 800102a:	f7ff ff93 	bl	8000f54 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800102e:	f000 fb92 	bl	8001756 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001032:	f000 f869 	bl	8001108 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001036:	f7ff fef3 	bl	8000e20 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 800103a:	f000 fa8d 	bl	8001558 <MX_USART1_UART_Init>
	MX_FMC_Init();
 800103e:	f7ff fe15 	bl	8000c6c <MX_FMC_Init>
	MX_USART2_UART_Init();
 8001042:	f000 fab9 	bl	80015b8 <MX_USART2_UART_Init>
	MX_SPI5_Init();
 8001046:	f000 f953 	bl	80012f0 <MX_SPI5_Init>
	/* USER CODE BEGIN 2 */
	UART_Printf("Hello\n");
 800104a:	4826      	ldr	r0, [pc, #152]	; (80010e4 <main+0xd4>)
 800104c:	f000 f8ee 	bl	800122c <UART_Printf>

	MT48LC4M32B2_Init(&hsdram1);
 8001050:	4825      	ldr	r0, [pc, #148]	; (80010e8 <main+0xd8>)
 8001052:	f7ff facd 	bl	80005f0 <MT48LC4M32B2_Init>

	ST7789_Init(240, 240);
 8001056:	21f0      	movs	r1, #240	; 0xf0
 8001058:	20f0      	movs	r0, #240	; 0xf0
 800105a:	f7ff fb87 	bl	800076c <ST7789_Init>

	ST7789_FillScreen(BLACK);
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fca6 	bl	80009b0 <ST7789_FillScreen>

	/*Заповнимо буфер будь якими числами*/
	Fill_Buffer(aTxBuffer, BUFFER_SIZE, 0x37BA0F68);
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <main+0xdc>)
 8001066:	2164      	movs	r1, #100	; 0x64
 8001068:	4821      	ldr	r0, [pc, #132]	; (80010f0 <main+0xe0>)
 800106a:	f7ff ffb3 	bl	8000fd4 <Fill_Buffer>
	/*Запишемо aTxBuffer в SDRAM, за адресою: SDRAM_BANK_ADDR + WRITE_READ_ADDR = 0xC0000000 + 0x0800 = 0xC0008000
	 *Сумується адреса банка пам'яті і адреса в самому банку, куди ми пишемо дані */
	MT48LC4M32B2_WriteBuffer(aTxBuffer, SDRAM_BANK_ADDR + WRITE_READ_ADDR,
 800106e:	2264      	movs	r2, #100	; 0x64
 8001070:	4920      	ldr	r1, [pc, #128]	; (80010f4 <main+0xe4>)
 8001072:	481f      	ldr	r0, [pc, #124]	; (80010f0 <main+0xe0>)
 8001074:	f7ff fb34 	bl	80006e0 <MT48LC4M32B2_WriteBuffer>
			BUFFER_SIZE);
	/*Зчитаємо в aRxBuffer з SDRAM, починаючи з адреси: SDRAM_BANK_ADDR + WRITE_READ_ADDR = 0xC0000000 + 0x0800 = 0xC0008000
	 *Сумується адреса банка пам'яті і адреса в самому банку, куди ми пишемо дані */
	MT48LC4M32B2_ReadToBuffer(aRxBuffer, SDRAM_BANK_ADDR + WRITE_READ_ADDR,
 8001078:	2264      	movs	r2, #100	; 0x64
 800107a:	491e      	ldr	r1, [pc, #120]	; (80010f4 <main+0xe4>)
 800107c:	481e      	ldr	r0, [pc, #120]	; (80010f8 <main+0xe8>)
 800107e:	f7ff fb51 	bl	8000724 <MT48LC4M32B2_ReadToBuffer>
			BUFFER_SIZE);
    /*Виведемо в USART вичитані з SDRAM дані.*/
	for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++) {
 8001082:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <main+0xec>)
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e026      	b.n	80010d8 <main+0xc8>

		sprintf(str1, "%03ld: 0x%08lX, addr: 0x%08lX\n",
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <main+0xec>)
 800108c:	6819      	ldr	r1, [r3, #0]
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <main+0xec>)
 8001090:	681b      	ldr	r3, [r3, #0]
				(unsigned long) uwIndex, (unsigned long) aRxBuffer[uwIndex],
 8001092:	4a19      	ldr	r2, [pc, #100]	; (80010f8 <main+0xe8>)
 8001094:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
				(unsigned long) &aRxBuffer[uwIndex]);
 8001098:	4b18      	ldr	r3, [pc, #96]	; (80010fc <main+0xec>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	4a16      	ldr	r2, [pc, #88]	; (80010f8 <main+0xe8>)
 80010a0:	4413      	add	r3, r2
		sprintf(str1, "%03ld: 0x%08lX, addr: 0x%08lX\n",
 80010a2:	1d38      	adds	r0, r7, #4
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	4623      	mov	r3, r4
 80010a8:	460a      	mov	r2, r1
 80010aa:	4915      	ldr	r1, [pc, #84]	; (8001100 <main+0xf0>)
 80010ac:	f003 f990 	bl	80043d0 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) str1, strlen(str1),
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f8c4 	bl	8000240 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	1d39      	adds	r1, r7, #4
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	4810      	ldr	r0, [pc, #64]	; (8001104 <main+0xf4>)
 80010c4:	f002 fba0 	bl	8003808 <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		HAL_Delay(100);
 80010c8:	2064      	movs	r0, #100	; 0x64
 80010ca:	f000 fba1 	bl	8001810 <HAL_Delay>
	for (uwIndex = 0; uwIndex < BUFFER_SIZE; uwIndex++) {
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <main+0xec>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	3301      	adds	r3, #1
 80010d4:	4a09      	ldr	r2, [pc, #36]	; (80010fc <main+0xec>)
 80010d6:	6013      	str	r3, [r2, #0]
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <main+0xec>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b63      	cmp	r3, #99	; 0x63
 80010de:	d9d4      	bls.n	800108a <main+0x7a>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80010e0:	e7fe      	b.n	80010e0 <main+0xd0>
 80010e2:	bf00      	nop
 80010e4:	08004c68 	.word	0x08004c68
 80010e8:	200000b4 	.word	0x200000b4
 80010ec:	37ba0f68 	.word	0x37ba0f68
 80010f0:	20000278 	.word	0x20000278
 80010f4:	c0000800 	.word	0xc0000800
 80010f8:	200000e8 	.word	0x200000e8
 80010fc:	20000090 	.word	0x20000090
 8001100:	08004c70 	.word	0x08004c70
 8001104:	2000046c 	.word	0x2000046c

08001108 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b0b8      	sub	sp, #224	; 0xe0
 800110c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800110e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001112:	2234      	movs	r2, #52	; 0x34
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f003 f952 	bl	80043c0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800111c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800112c:	f107 0308 	add.w	r3, r7, #8
 8001130:	2290      	movs	r2, #144	; 0x90
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f003 f943 	bl	80043c0 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b3a      	ldr	r3, [pc, #232]	; (8001224 <SystemClock_Config+0x11c>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a39      	ldr	r2, [pc, #228]	; (8001224 <SystemClock_Config+0x11c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <SystemClock_Config+0x11c>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001152:	4b35      	ldr	r3, [pc, #212]	; (8001228 <SystemClock_Config+0x120>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a34      	ldr	r2, [pc, #208]	; (8001228 <SystemClock_Config+0x120>)
 8001158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b32      	ldr	r3, [pc, #200]	; (8001228 <SystemClock_Config+0x120>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	2301      	movs	r3, #1
 8001172:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2310      	movs	r3, #16
 8001178:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117c:	2302      	movs	r3, #2
 800117e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001188:	2308      	movs	r3, #8
 800118a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	RCC_OscInitStruct.PLL.PLLN = 216;
 800118e:	23d8      	movs	r3, #216	; 0xd8
 8001190:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001194:	2302      	movs	r3, #2
 8001196:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80011a4:	4618      	mov	r0, r3
 80011a6:	f000 fec7 	bl	8001f38 <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0xac>
		Error_Handler();
 80011b0:	f000 f896 	bl	80012e0 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80011b4:	f000 fe70 	bl	8001e98 <HAL_PWREx_EnableOverDrive>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0xba>
		Error_Handler();
 80011be:	f000 f88f 	bl	80012e0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2302      	movs	r3, #2
 80011ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 80011e4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011e8:	2107      	movs	r1, #7
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 f952 	bl	8002494 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xf2>
		Error_Handler();
 80011f6:	f000 f873 	bl	80012e0 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80011fa:	23c0      	movs	r3, #192	; 0xc0
 80011fc:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART2;
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011fe:	2300      	movs	r3, #0
 8001200:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001202:	2300      	movs	r3, #0
 8001204:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001206:	f107 0308 	add.w	r3, r7, #8
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fb14 	bl	8002838 <HAL_RCCEx_PeriphCLKConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <SystemClock_Config+0x112>
		Error_Handler();
 8001216:	f000 f863 	bl	80012e0 <Error_Handler>
	}
}
 800121a:	bf00      	nop
 800121c:	37e0      	adds	r7, #224	; 0xe0
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40007000 	.word	0x40007000

0800122c <UART_Printf>:

/* USER CODE BEGIN 4 */
void UART_Printf(const char *fmt, ...) {
 800122c:	b40f      	push	{r0, r1, r2, r3}
 800122e:	b580      	push	{r7, lr}
 8001230:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001234:	af00      	add	r7, sp, #0
	/* На STM32F769NI DISCO треба ремапити USART1 на піни PA9 i PA10 */
	char buff[512];
	va_list args;
	va_start(args, fmt);
 8001236:	f507 7205 	add.w	r2, r7, #532	; 0x214
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	601a      	str	r2, [r3, #0]
	vsnprintf(buff, sizeof(buff), fmt, args);
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	f107 0008 	add.w	r0, r7, #8
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800124a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800124e:	f003 f90b 	bl	8004468 <vsniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*) buff, strlen(buff),
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	4618      	mov	r0, r3
 8001258:	f7fe fff2 	bl	8000240 <strlen>
 800125c:	4603      	mov	r3, r0
 800125e:	b29a      	uxth	r2, r3
 8001260:	f107 0108 	add.w	r1, r7, #8
 8001264:	f04f 33ff 	mov.w	r3, #4294967295
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <UART_Printf+0x54>)
 800126a:	f002 facd 	bl	8003808 <HAL_UART_Transmit>
	HAL_MAX_DELAY);
	va_end(args);
}
 800126e:	bf00      	nop
 8001270:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001274:	46bd      	mov	sp, r7
 8001276:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800127a:	b004      	add	sp, #16
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	2000046c 	.word	0x2000046c

08001284 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = { 0 };
 800128a:	463b      	mov	r3, r7
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8001296:	f000 fbc3 	bl	8001a20 <HAL_MPU_Disable>
	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800129a:	2301      	movs	r3, #1
 800129c:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800129e:	2300      	movs	r3, #0
 80012a0:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x20010000;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MPU_Config+0x58>)
 80012a4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 80012a6:	2307      	movs	r3, #7
 80012a8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80012b2:	2303      	movs	r3, #3
 80012b4:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80012be:	2301      	movs	r3, #1
 80012c0:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80012c6:	463b      	mov	r3, r7
 80012c8:	4618      	mov	r0, r3
 80012ca:	f000 fbdd 	bl	8001a88 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80012ce:	2004      	movs	r0, #4
 80012d0:	f000 fbbc 	bl	8001a4c <HAL_MPU_Enable>

}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20010000 	.word	0x20010000

080012e0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MX_SPI5_Init+0x74>)
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <MX_SPI5_Init+0x78>)
 80012f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_SPI5_Init+0x74>)
 80012fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001300:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8001302:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_SPI5_Init+0x74>)
 8001304:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001308:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_SPI5_Init+0x74>)
 800130c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001310:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_SPI5_Init+0x74>)
 8001314:	2202      	movs	r2, #2
 8001316:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_SPI5_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_SPI5_Init+0x74>)
 8001320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001324:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001326:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_SPI5_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <MX_SPI5_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_SPI5_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_SPI5_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_SPI5_Init+0x74>)
 8001340:	2207      	movs	r2, #7
 8001342:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <MX_SPI5_Init+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_SPI5_Init+0x74>)
 800134c:	2208      	movs	r2, #8
 800134e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_SPI5_Init+0x74>)
 8001352:	f001 fef6 	bl	8003142 <HAL_SPI_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_SPI5_Init+0x70>
  {
    Error_Handler();
 800135c:	f7ff ffc0 	bl	80012e0 <Error_Handler>
  }

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000408 	.word	0x20000408
 8001368:	40015000 	.word	0x40015000

0800136c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a25      	ldr	r2, [pc, #148]	; (8001420 <HAL_SPI_MspInit+0xb4>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d144      	bne.n	8001418 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800138e:	4b25      	ldr	r3, [pc, #148]	; (8001424 <HAL_SPI_MspInit+0xb8>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	4a24      	ldr	r2, [pc, #144]	; (8001424 <HAL_SPI_MspInit+0xb8>)
 8001394:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001398:	6453      	str	r3, [r2, #68]	; 0x44
 800139a:	4b22      	ldr	r3, [pc, #136]	; (8001424 <HAL_SPI_MspInit+0xb8>)
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <HAL_SPI_MspInit+0xb8>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <HAL_SPI_MspInit+0xb8>)
 80013ac:	f043 0320 	orr.w	r3, r3, #32
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_SPI_MspInit+0xb8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0320 	and.w	r3, r3, #32
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80013be:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_SPI_MspInit+0xb8>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_SPI_MspInit+0xb8>)
 80013c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_SPI_MspInit+0xb8>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration    
    PF9     ------> SPI5_MOSI
    PH6     ------> SPI5_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	2303      	movs	r3, #3
 80013e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013e8:	2305      	movs	r3, #5
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	480d      	ldr	r0, [pc, #52]	; (8001428 <HAL_SPI_MspInit+0xbc>)
 80013f4:	f000 fb8c 	bl	8001b10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013f8:	2340      	movs	r3, #64	; 0x40
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001408:	2305      	movs	r3, #5
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <HAL_SPI_MspInit+0xc0>)
 8001414:	f000 fb7c 	bl	8001b10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001418:	bf00      	nop
 800141a:	3728      	adds	r7, #40	; 0x28
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40015000 	.word	0x40015000
 8001424:	40023800 	.word	0x40023800
 8001428:	40021400 	.word	0x40021400
 800142c:	40021c00 	.word	0x40021c00

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_MspInit+0x44>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_MspInit+0x44>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_MspInit+0x44>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x44>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x44>)
 8001454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001458:	6453      	str	r3, [r2, #68]	; 0x44
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x44>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 f980 	bl	80017d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <_sbrk+0x50>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <_sbrk+0x16>
		heap_end = &end;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <_sbrk+0x50>)
 80014e6:	4a10      	ldr	r2, [pc, #64]	; (8001528 <_sbrk+0x54>)
 80014e8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <_sbrk+0x50>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <_sbrk+0x50>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4413      	add	r3, r2
 80014f8:	466a      	mov	r2, sp
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d907      	bls.n	800150e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80014fe:	f002 ff35 	bl	800436c <__errno>
 8001502:	4602      	mov	r2, r0
 8001504:	230c      	movs	r3, #12
 8001506:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001508:	f04f 33ff 	mov.w	r3, #4294967295
 800150c:	e006      	b.n	800151c <_sbrk+0x48>
	}

	heap_end += incr;
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <_sbrk+0x50>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	4a03      	ldr	r2, [pc, #12]	; (8001524 <_sbrk+0x50>)
 8001518:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000094 	.word	0x20000094
 8001528:	20000578 	.word	0x20000578

0800152c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <SystemInit+0x28>)
 8001532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001536:	4a07      	ldr	r2, [pc, #28]	; (8001554 <SystemInit+0x28>)
 8001538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800153c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <SystemInit+0x28>)
 8001542:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001546:	609a      	str	r2, [r3, #8]
#endif
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800155c:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_USART1_UART_Init+0x58>)
 800155e:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <MX_USART1_UART_Init+0x5c>)
 8001560:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_USART1_UART_Init+0x58>)
 8001564:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001568:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_USART1_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_USART1_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <MX_USART1_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <MX_USART1_UART_Init+0x58>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <MX_USART1_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <MX_USART1_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <MX_USART1_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <MX_USART1_UART_Init+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_USART1_UART_Init+0x58>)
 800159c:	f002 f8e6 	bl	800376c <HAL_UART_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015a6:	f7ff fe9b 	bl	80012e0 <Error_Handler>
  }

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000046c 	.word	0x2000046c
 80015b4:	40011000 	.word	0x40011000

080015b8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_USART2_UART_Init+0x58>)
 80015be:	4a15      	ldr	r2, [pc, #84]	; (8001614 <MX_USART2_UART_Init+0x5c>)
 80015c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <MX_USART2_UART_Init+0x58>)
 80015c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_USART2_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_USART2_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <MX_USART2_UART_Init+0x58>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015dc:	4b0c      	ldr	r3, [pc, #48]	; (8001610 <MX_USART2_UART_Init+0x58>)
 80015de:	220c      	movs	r2, #12
 80015e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <MX_USART2_UART_Init+0x58>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <MX_USART2_UART_Init+0x58>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <MX_USART2_UART_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <MX_USART2_UART_Init+0x58>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_USART2_UART_Init+0x58>)
 80015fc:	f002 f8b6 	bl	800376c <HAL_UART_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001606:	f7ff fe6b 	bl	80012e0 <Error_Handler>
  }

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	200004ec 	.word	0x200004ec
 8001614:	40004400 	.word	0x40004400

08001618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08c      	sub	sp, #48	; 0x30
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 031c 	add.w	r3, r7, #28
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a2e      	ldr	r2, [pc, #184]	; (80016f0 <HAL_UART_MspInit+0xd8>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d129      	bne.n	800168e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800163a:	4b2e      	ldr	r3, [pc, #184]	; (80016f4 <HAL_UART_MspInit+0xdc>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a2d      	ldr	r2, [pc, #180]	; (80016f4 <HAL_UART_MspInit+0xdc>)
 8001640:	f043 0310 	orr.w	r3, r3, #16
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_UART_MspInit+0xdc>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f003 0310 	and.w	r3, r3, #16
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <HAL_UART_MspInit+0xdc>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <HAL_UART_MspInit+0xdc>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4b25      	ldr	r3, [pc, #148]	; (80016f4 <HAL_UART_MspInit+0xdc>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 800166a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800166e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001670:	2302      	movs	r3, #2
 8001672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001678:	2303      	movs	r3, #3
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800167c:	2307      	movs	r3, #7
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	4619      	mov	r1, r3
 8001686:	481c      	ldr	r0, [pc, #112]	; (80016f8 <HAL_UART_MspInit+0xe0>)
 8001688:	f000 fa42 	bl	8001b10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800168c:	e02c      	b.n	80016e8 <HAL_UART_MspInit+0xd0>
  else if(uartHandle->Instance==USART2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <HAL_UART_MspInit+0xe4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d127      	bne.n	80016e8 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_UART_MspInit+0xdc>)
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	4a15      	ldr	r2, [pc, #84]	; (80016f4 <HAL_UART_MspInit+0xdc>)
 800169e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a2:	6413      	str	r3, [r2, #64]	; 0x40
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_UART_MspInit+0xdc>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b0:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_UART_MspInit+0xdc>)
 80016b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b4:	4a0f      	ldr	r2, [pc, #60]	; (80016f4 <HAL_UART_MspInit+0xdc>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6313      	str	r3, [r2, #48]	; 0x30
 80016bc:	4b0d      	ldr	r3, [pc, #52]	; (80016f4 <HAL_UART_MspInit+0xdc>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5;
 80016c8:	2360      	movs	r3, #96	; 0x60
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d8:	2307      	movs	r3, #7
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	4619      	mov	r1, r3
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <HAL_UART_MspInit+0xe8>)
 80016e4:	f000 fa14 	bl	8001b10 <HAL_GPIO_Init>
}
 80016e8:	bf00      	nop
 80016ea:	3730      	adds	r7, #48	; 0x30
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40011000 	.word	0x40011000
 80016f4:	40023800 	.word	0x40023800
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40004400 	.word	0x40004400
 8001700:	40020c00 	.word	0x40020c00

08001704 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001704:	f8df d034 	ldr.w	sp, [pc, #52]	; 800173c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001708:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800170a:	e003      	b.n	8001714 <LoopCopyDataInit>

0800170c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800170e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001710:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001712:	3104      	adds	r1, #4

08001714 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001714:	480b      	ldr	r0, [pc, #44]	; (8001744 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001718:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800171a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800171c:	d3f6      	bcc.n	800170c <CopyDataInit>
  ldr  r2, =_sbss
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001720:	e002      	b.n	8001728 <LoopFillZerobss>

08001722 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001722:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001724:	f842 3b04 	str.w	r3, [r2], #4

08001728 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001728:	4b09      	ldr	r3, [pc, #36]	; (8001750 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800172a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800172c:	d3f9      	bcc.n	8001722 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800172e:	f7ff fefd 	bl	800152c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001732:	f002 fe21 	bl	8004378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001736:	f7ff fc6b 	bl	8001010 <main>
  bx  lr    
 800173a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800173c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001740:	08004cec 	.word	0x08004cec
  ldr  r0, =_sdata
 8001744:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001748:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800174c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001750:	20000574 	.word	0x20000574

08001754 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC_IRQHandler>

08001756 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800175a:	2003      	movs	r0, #3
 800175c:	f000 f92c 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001760:	2000      	movs	r0, #0
 8001762:	f000 f805 	bl	8001770 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001766:	f7ff fe63 	bl	8001430 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x54>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <HAL_InitTick+0x58>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001786:	fbb3 f3f1 	udiv	r3, r3, r1
 800178a:	fbb2 f3f3 	udiv	r3, r2, r3
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f939 	bl	8001a06 <HAL_SYSTICK_Config>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e00e      	b.n	80017bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b0f      	cmp	r3, #15
 80017a2:	d80a      	bhi.n	80017ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a4:	2200      	movs	r2, #0
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	f04f 30ff 	mov.w	r0, #4294967295
 80017ac:	f000 f90f 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017b0:	4a06      	ldr	r2, [pc, #24]	; (80017cc <HAL_InitTick+0x5c>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b6:	2300      	movs	r3, #0
 80017b8:	e000      	b.n	80017bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20000000 	.word	0x20000000
 80017c8:	20000008 	.word	0x20000008
 80017cc:	20000004 	.word	0x20000004

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x20>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_IncTick+0x24>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a04      	ldr	r2, [pc, #16]	; (80017f4 <HAL_IncTick+0x24>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000008 	.word	0x20000008
 80017f4:	2000056c 	.word	0x2000056c

080017f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return uwTick;
 80017fc:	4b03      	ldr	r3, [pc, #12]	; (800180c <HAL_GetTick+0x14>)
 80017fe:	681b      	ldr	r3, [r3, #0]
}
 8001800:	4618      	mov	r0, r3
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	2000056c 	.word	0x2000056c

08001810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001818:	f7ff ffee 	bl	80017f8 <HAL_GetTick>
 800181c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001828:	d005      	beq.n	8001836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_Delay+0x40>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	461a      	mov	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001836:	bf00      	nop
 8001838:	f7ff ffde 	bl	80017f8 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	429a      	cmp	r2, r3
 8001846:	d8f7      	bhi.n	8001838 <HAL_Delay+0x28>
  {
  }
}
 8001848:	bf00      	nop
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000008 	.word	0x20000008

08001854 <__NVIC_SetPriorityGrouping>:
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001864:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <__NVIC_SetPriorityGrouping+0x40>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001870:	4013      	ands	r3, r2
 8001872:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	4313      	orrs	r3, r2
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x40>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00
 8001898:	05fa0000 	.word	0x05fa0000

0800189c <__NVIC_GetPriorityGrouping>:
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_SetPriority>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff47 	bl	8001854 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff5c 	bl	800189c <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff8e 	bl	800190c <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5d 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffb0 	bl	8001974 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
	...

08001a20 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a24:	f3bf 8f5f 	dmb	sy
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_MPU_Disable+0x24>)
 8001a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2c:	4a05      	ldr	r2, [pc, #20]	; (8001a44 <HAL_MPU_Disable+0x24>)
 8001a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a32:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <HAL_MPU_Disable+0x28>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	605a      	str	r2, [r3, #4]
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00
 8001a48:	e000ed90 	.word	0xe000ed90

08001a4c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a54:	4a0a      	ldr	r2, [pc, #40]	; (8001a80 <HAL_MPU_Enable+0x34>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_MPU_Enable+0x38>)
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	4a08      	ldr	r2, [pc, #32]	; (8001a84 <HAL_MPU_Enable+0x38>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001a6e:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed90 	.word	0xe000ed90
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	785a      	ldrb	r2, [r3, #1]
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_MPU_ConfigRegion+0x84>)
 8001a96:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d029      	beq.n	8001af4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001aa0:	4a1a      	ldr	r2, [pc, #104]	; (8001b0c <HAL_MPU_ConfigRegion+0x84>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7b1b      	ldrb	r3, [r3, #12]
 8001aac:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	7adb      	ldrb	r3, [r3, #11]
 8001ab2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ab4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	7a9b      	ldrb	r3, [r3, #10]
 8001aba:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001abc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	7b5b      	ldrb	r3, [r3, #13]
 8001ac2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ac4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7b9b      	ldrb	r3, [r3, #14]
 8001aca:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001acc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	7bdb      	ldrb	r3, [r3, #15]
 8001ad2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ad4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7a5b      	ldrb	r3, [r3, #9]
 8001ada:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001adc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7a1b      	ldrb	r3, [r3, #8]
 8001ae2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ae4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	7812      	ldrb	r2, [r2, #0]
 8001aea:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001aec:	4a07      	ldr	r2, [pc, #28]	; (8001b0c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001aee:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001af0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001af2:	e005      	b.n	8001b00 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_MPU_ConfigRegion+0x84>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <HAL_MPU_ConfigRegion+0x84>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed90 	.word	0xe000ed90

08001b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b22:	2300      	movs	r3, #0
 8001b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e175      	b.n	8001e1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b30:	2201      	movs	r2, #1
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	4013      	ands	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f040 8164 	bne.w	8001e16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d00b      	beq.n	8001b6e <HAL_GPIO_Init+0x5e>
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d007      	beq.n	8001b6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b62:	2b11      	cmp	r3, #17
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b12      	cmp	r3, #18
 8001b6c:	d130      	bne.n	8001bd0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	005b      	lsls	r3, r3, #1
 8001b78:	2203      	movs	r2, #3
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	091b      	lsrs	r3, r3, #4
 8001bba:	f003 0201 	and.w	r2, r3, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	2203      	movs	r2, #3
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x100>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	2b12      	cmp	r3, #18
 8001c0e:	d123      	bne.n	8001c58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	08da      	lsrs	r2, r3, #3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	3208      	adds	r2, #8
 8001c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f003 0307 	and.w	r3, r3, #7
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4013      	ands	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f003 0307 	and.w	r3, r3, #7
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	69b9      	ldr	r1, [r7, #24]
 8001c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0203 	and.w	r2, r3, #3
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80be 	beq.w	8001e16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	4b65      	ldr	r3, [pc, #404]	; (8001e30 <HAL_GPIO_Init+0x320>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	4a64      	ldr	r2, [pc, #400]	; (8001e30 <HAL_GPIO_Init+0x320>)
 8001ca0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ca6:	4b62      	ldr	r3, [pc, #392]	; (8001e30 <HAL_GPIO_Init+0x320>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cb2:	4a60      	ldr	r2, [pc, #384]	; (8001e34 <HAL_GPIO_Init+0x324>)
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	220f      	movs	r2, #15
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a57      	ldr	r2, [pc, #348]	; (8001e38 <HAL_GPIO_Init+0x328>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d037      	beq.n	8001d4e <HAL_GPIO_Init+0x23e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a56      	ldr	r2, [pc, #344]	; (8001e3c <HAL_GPIO_Init+0x32c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d031      	beq.n	8001d4a <HAL_GPIO_Init+0x23a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a55      	ldr	r2, [pc, #340]	; (8001e40 <HAL_GPIO_Init+0x330>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d02b      	beq.n	8001d46 <HAL_GPIO_Init+0x236>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a54      	ldr	r2, [pc, #336]	; (8001e44 <HAL_GPIO_Init+0x334>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d025      	beq.n	8001d42 <HAL_GPIO_Init+0x232>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a53      	ldr	r2, [pc, #332]	; (8001e48 <HAL_GPIO_Init+0x338>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d01f      	beq.n	8001d3e <HAL_GPIO_Init+0x22e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a52      	ldr	r2, [pc, #328]	; (8001e4c <HAL_GPIO_Init+0x33c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d019      	beq.n	8001d3a <HAL_GPIO_Init+0x22a>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a51      	ldr	r2, [pc, #324]	; (8001e50 <HAL_GPIO_Init+0x340>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d013      	beq.n	8001d36 <HAL_GPIO_Init+0x226>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a50      	ldr	r2, [pc, #320]	; (8001e54 <HAL_GPIO_Init+0x344>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d00d      	beq.n	8001d32 <HAL_GPIO_Init+0x222>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a4f      	ldr	r2, [pc, #316]	; (8001e58 <HAL_GPIO_Init+0x348>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d007      	beq.n	8001d2e <HAL_GPIO_Init+0x21e>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a4e      	ldr	r2, [pc, #312]	; (8001e5c <HAL_GPIO_Init+0x34c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d101      	bne.n	8001d2a <HAL_GPIO_Init+0x21a>
 8001d26:	2309      	movs	r3, #9
 8001d28:	e012      	b.n	8001d50 <HAL_GPIO_Init+0x240>
 8001d2a:	230a      	movs	r3, #10
 8001d2c:	e010      	b.n	8001d50 <HAL_GPIO_Init+0x240>
 8001d2e:	2308      	movs	r3, #8
 8001d30:	e00e      	b.n	8001d50 <HAL_GPIO_Init+0x240>
 8001d32:	2307      	movs	r3, #7
 8001d34:	e00c      	b.n	8001d50 <HAL_GPIO_Init+0x240>
 8001d36:	2306      	movs	r3, #6
 8001d38:	e00a      	b.n	8001d50 <HAL_GPIO_Init+0x240>
 8001d3a:	2305      	movs	r3, #5
 8001d3c:	e008      	b.n	8001d50 <HAL_GPIO_Init+0x240>
 8001d3e:	2304      	movs	r3, #4
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x240>
 8001d42:	2303      	movs	r3, #3
 8001d44:	e004      	b.n	8001d50 <HAL_GPIO_Init+0x240>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_Init+0x240>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_GPIO_Init+0x240>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	f002 0203 	and.w	r2, r2, #3
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	4093      	lsls	r3, r2
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d60:	4934      	ldr	r1, [pc, #208]	; (8001e34 <HAL_GPIO_Init+0x324>)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6e:	4b3c      	ldr	r3, [pc, #240]	; (8001e60 <HAL_GPIO_Init+0x350>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d92:	4a33      	ldr	r2, [pc, #204]	; (8001e60 <HAL_GPIO_Init+0x350>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d98:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <HAL_GPIO_Init+0x350>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dbc:	4a28      	ldr	r2, [pc, #160]	; (8001e60 <HAL_GPIO_Init+0x350>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc2:	4b27      	ldr	r3, [pc, #156]	; (8001e60 <HAL_GPIO_Init+0x350>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001de6:	4a1e      	ldr	r2, [pc, #120]	; (8001e60 <HAL_GPIO_Init+0x350>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_GPIO_Init+0x350>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e10:	4a13      	ldr	r2, [pc, #76]	; (8001e60 <HAL_GPIO_Init+0x350>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b0f      	cmp	r3, #15
 8001e20:	f67f ae86 	bls.w	8001b30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e24:	bf00      	nop
 8001e26:	3724      	adds	r7, #36	; 0x24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40013800 	.word	0x40013800
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	40020400 	.word	0x40020400
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	40021400 	.word	0x40021400
 8001e50:	40021800 	.word	0x40021800
 8001e54:	40021c00 	.word	0x40021c00
 8001e58:	40022000 	.word	0x40022000
 8001e5c:	40022400 	.word	0x40022400
 8001e60:	40013c00 	.word	0x40013c00

08001e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e80:	e003      	b.n	8001e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e82:	887b      	ldrh	r3, [r7, #2]
 8001e84:	041a      	lsls	r2, r3, #16
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	619a      	str	r2, [r3, #24]
}
 8001e8a:	bf00      	nop
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
	...

08001e98 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	4a22      	ldr	r2, [pc, #136]	; (8001f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_PWREx_EnableOverDrive+0x98>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	603b      	str	r3, [r7, #0]
 8001eb8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001eba:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ec6:	f7ff fc97 	bl	80017f8 <HAL_GetTick>
 8001eca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ecc:	e009      	b.n	8001ee2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ece:	f7ff fc93 	bl	80017f8 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001edc:	d901      	bls.n	8001ee2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e022      	b.n	8001f28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001ee2:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eee:	d1ee      	bne.n	8001ece <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001ef0:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001efa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001efc:	f7ff fc7c 	bl	80017f8 <HAL_GetTick>
 8001f00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f02:	e009      	b.n	8001f18 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f04:	f7ff fc78 	bl	80017f8 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f12:	d901      	bls.n	8001f18 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e007      	b.n	8001f28 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f18:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f24:	d1ee      	bne.n	8001f04 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000

08001f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001f40:	2300      	movs	r3, #0
 8001f42:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e29b      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 8087 	beq.w	800206a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f5c:	4b96      	ldr	r3, [pc, #600]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b04      	cmp	r3, #4
 8001f66:	d00c      	beq.n	8001f82 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f68:	4b93      	ldr	r3, [pc, #588]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 030c 	and.w	r3, r3, #12
 8001f70:	2b08      	cmp	r3, #8
 8001f72:	d112      	bne.n	8001f9a <HAL_RCC_OscConfig+0x62>
 8001f74:	4b90      	ldr	r3, [pc, #576]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f80:	d10b      	bne.n	8001f9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f82:	4b8d      	ldr	r3, [pc, #564]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d06c      	beq.n	8002068 <HAL_RCC_OscConfig+0x130>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d168      	bne.n	8002068 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e275      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x7a>
 8001fa4:	4b84      	ldr	r3, [pc, #528]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a83      	ldr	r2, [pc, #524]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001faa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fae:	6013      	str	r3, [r2, #0]
 8001fb0:	e02e      	b.n	8002010 <HAL_RCC_OscConfig+0xd8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x9c>
 8001fba:	4b7f      	ldr	r3, [pc, #508]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a7e      	ldr	r2, [pc, #504]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b7c      	ldr	r3, [pc, #496]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7b      	ldr	r2, [pc, #492]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fcc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e01d      	b.n	8002010 <HAL_RCC_OscConfig+0xd8>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fdc:	d10c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0xc0>
 8001fde:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a75      	ldr	r2, [pc, #468]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b73      	ldr	r3, [pc, #460]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a72      	ldr	r2, [pc, #456]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	e00b      	b.n	8002010 <HAL_RCC_OscConfig+0xd8>
 8001ff8:	4b6f      	ldr	r3, [pc, #444]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a6e      	ldr	r2, [pc, #440]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002002:	6013      	str	r3, [r2, #0]
 8002004:	4b6c      	ldr	r3, [pc, #432]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a6b      	ldr	r2, [pc, #428]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 800200a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800200e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d013      	beq.n	8002040 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7ff fbee 	bl	80017f8 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7ff fbea 	bl	80017f8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e229      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	4b61      	ldr	r3, [pc, #388]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0xe8>
 800203e:	e014      	b.n	800206a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff fbda 	bl	80017f8 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002048:	f7ff fbd6 	bl	80017f8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e215      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x110>
 8002066:	e000      	b.n	800206a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d069      	beq.n	800214a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002076:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002082:	4b4d      	ldr	r3, [pc, #308]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 030c 	and.w	r3, r3, #12
 800208a:	2b08      	cmp	r3, #8
 800208c:	d11c      	bne.n	80020c8 <HAL_RCC_OscConfig+0x190>
 800208e:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d116      	bne.n	80020c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209a:	4b47      	ldr	r3, [pc, #284]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_RCC_OscConfig+0x17a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d001      	beq.n	80020b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e1e9      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	493d      	ldr	r1, [pc, #244]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	e040      	b.n	800214a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d023      	beq.n	8002118 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d0:	4b39      	ldr	r3, [pc, #228]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a38      	ldr	r2, [pc, #224]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7ff fb8c 	bl	80017f8 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e4:	f7ff fb88 	bl	80017f8 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e1c7      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f6:	4b30      	ldr	r3, [pc, #192]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002102:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4929      	ldr	r1, [pc, #164]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]
 8002116:	e018      	b.n	800214a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a26      	ldr	r2, [pc, #152]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff fb68 	bl	80017f8 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212c:	f7ff fb64 	bl	80017f8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b02      	cmp	r3, #2
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1a3      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f0      	bne.n	800212c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d038      	beq.n	80021c8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d019      	beq.n	8002192 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800215e:	4b16      	ldr	r3, [pc, #88]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002162:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216a:	f7ff fb45 	bl	80017f8 <HAL_GetTick>
 800216e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002172:	f7ff fb41 	bl	80017f8 <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e180      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002184:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0f0      	beq.n	8002172 <HAL_RCC_OscConfig+0x23a>
 8002190:	e01a      	b.n	80021c8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002196:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <HAL_RCC_OscConfig+0x280>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219e:	f7ff fb2b 	bl	80017f8 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a6:	f7ff fb27 	bl	80017f8 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d903      	bls.n	80021bc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e166      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
 80021b8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021bc:	4b92      	ldr	r3, [pc, #584]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80021be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ee      	bne.n	80021a6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 80a4 	beq.w	800231e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d6:	4b8c      	ldr	r3, [pc, #560]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10d      	bne.n	80021fe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80021e2:	4b89      	ldr	r3, [pc, #548]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a88      	ldr	r2, [pc, #544]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80021e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b86      	ldr	r3, [pc, #536]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021fa:	2301      	movs	r3, #1
 80021fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021fe:	4b83      	ldr	r3, [pc, #524]	; (800240c <HAL_RCC_OscConfig+0x4d4>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d118      	bne.n	800223c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800220a:	4b80      	ldr	r3, [pc, #512]	; (800240c <HAL_RCC_OscConfig+0x4d4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a7f      	ldr	r2, [pc, #508]	; (800240c <HAL_RCC_OscConfig+0x4d4>)
 8002210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002216:	f7ff faef 	bl	80017f8 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221e:	f7ff faeb 	bl	80017f8 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b64      	cmp	r3, #100	; 0x64
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e12a      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002230:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x4d4>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d106      	bne.n	8002252 <HAL_RCC_OscConfig+0x31a>
 8002244:	4b70      	ldr	r3, [pc, #448]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a6f      	ldr	r2, [pc, #444]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
 8002250:	e02d      	b.n	80022ae <HAL_RCC_OscConfig+0x376>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10c      	bne.n	8002274 <HAL_RCC_OscConfig+0x33c>
 800225a:	4b6b      	ldr	r3, [pc, #428]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	4a6a      	ldr	r2, [pc, #424]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	6713      	str	r3, [r2, #112]	; 0x70
 8002266:	4b68      	ldr	r3, [pc, #416]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	4a67      	ldr	r2, [pc, #412]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 800226c:	f023 0304 	bic.w	r3, r3, #4
 8002270:	6713      	str	r3, [r2, #112]	; 0x70
 8002272:	e01c      	b.n	80022ae <HAL_RCC_OscConfig+0x376>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b05      	cmp	r3, #5
 800227a:	d10c      	bne.n	8002296 <HAL_RCC_OscConfig+0x35e>
 800227c:	4b62      	ldr	r3, [pc, #392]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a61      	ldr	r2, [pc, #388]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
 8002288:	4b5f      	ldr	r3, [pc, #380]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228c:	4a5e      	ldr	r2, [pc, #376]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 800228e:	f043 0301 	orr.w	r3, r3, #1
 8002292:	6713      	str	r3, [r2, #112]	; 0x70
 8002294:	e00b      	b.n	80022ae <HAL_RCC_OscConfig+0x376>
 8002296:	4b5c      	ldr	r3, [pc, #368]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800229a:	4a5b      	ldr	r2, [pc, #364]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 800229c:	f023 0301 	bic.w	r3, r3, #1
 80022a0:	6713      	str	r3, [r2, #112]	; 0x70
 80022a2:	4b59      	ldr	r3, [pc, #356]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80022a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a6:	4a58      	ldr	r2, [pc, #352]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80022a8:	f023 0304 	bic.w	r3, r3, #4
 80022ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d015      	beq.n	80022e2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b6:	f7ff fa9f 	bl	80017f8 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7ff fa9b 	bl	80017f8 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e0d8      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d4:	4b4c      	ldr	r3, [pc, #304]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80022d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0ee      	beq.n	80022be <HAL_RCC_OscConfig+0x386>
 80022e0:	e014      	b.n	800230c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e2:	f7ff fa89 	bl	80017f8 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7ff fa85 	bl	80017f8 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0c2      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002300:	4b41      	ldr	r3, [pc, #260]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d1ee      	bne.n	80022ea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800230c:	7dfb      	ldrb	r3, [r7, #23]
 800230e:	2b01      	cmp	r3, #1
 8002310:	d105      	bne.n	800231e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002312:	4b3d      	ldr	r3, [pc, #244]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	4a3c      	ldr	r2, [pc, #240]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 80ae 	beq.w	8002484 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002328:	4b37      	ldr	r3, [pc, #220]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d06d      	beq.n	8002410 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d14b      	bne.n	80023d4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233c:	4b32      	ldr	r3, [pc, #200]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a31      	ldr	r2, [pc, #196]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002342:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff fa56 	bl	80017f8 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff fa52 	bl	80017f8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e091      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002362:	4b29      	ldr	r3, [pc, #164]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69da      	ldr	r2, [r3, #28]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237c:	019b      	lsls	r3, r3, #6
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	3b01      	subs	r3, #1
 8002388:	041b      	lsls	r3, r3, #16
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002390:	061b      	lsls	r3, r3, #24
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002398:	071b      	lsls	r3, r3, #28
 800239a:	491b      	ldr	r1, [pc, #108]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a0:	4b19      	ldr	r3, [pc, #100]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a18      	ldr	r2, [pc, #96]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80023a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff fa24 	bl	80017f8 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b4:	f7ff fa20 	bl	80017f8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e05f      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x47c>
 80023d2:	e057      	b.n	8002484 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80023da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023e0:	f7ff fa0a 	bl	80017f8 <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e8:	f7ff fa06 	bl	80017f8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e045      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fa:	4b03      	ldr	r3, [pc, #12]	; (8002408 <HAL_RCC_OscConfig+0x4d0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4b0>
 8002406:	e03d      	b.n	8002484 <HAL_RCC_OscConfig+0x54c>
 8002408:	40023800 	.word	0x40023800
 800240c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002410:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <HAL_RCC_OscConfig+0x558>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d030      	beq.n	8002480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002428:	429a      	cmp	r2, r3
 800242a:	d129      	bne.n	8002480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d122      	bne.n	8002480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002440:	4013      	ands	r3, r2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002446:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002448:	4293      	cmp	r3, r2
 800244a:	d119      	bne.n	8002480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	085b      	lsrs	r3, r3, #1
 8002458:	3b01      	subs	r3, #1
 800245a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800245c:	429a      	cmp	r2, r3
 800245e:	d10f      	bne.n	8002480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800246c:	429a      	cmp	r2, r3
 800246e:	d107      	bne.n	8002480 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e000      	b.n	8002486 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40023800 	.word	0x40023800

08002494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0d0      	b.n	800264e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ac:	4b6a      	ldr	r3, [pc, #424]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 030f 	and.w	r3, r3, #15
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d910      	bls.n	80024dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b67      	ldr	r3, [pc, #412]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f023 020f 	bic.w	r2, r3, #15
 80024c2:	4965      	ldr	r1, [pc, #404]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ca:	4b63      	ldr	r3, [pc, #396]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d001      	beq.n	80024dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e0b8      	b.n	800264e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d020      	beq.n	800252a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d005      	beq.n	8002500 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024f4:	4b59      	ldr	r3, [pc, #356]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4a58      	ldr	r2, [pc, #352]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 80024fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800250c:	4b53      	ldr	r3, [pc, #332]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	4a52      	ldr	r2, [pc, #328]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002512:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002516:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002518:	4b50      	ldr	r3, [pc, #320]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	494d      	ldr	r1, [pc, #308]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002526:	4313      	orrs	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d040      	beq.n	80025b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d107      	bne.n	800254e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800253e:	4b47      	ldr	r3, [pc, #284]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d115      	bne.n	8002576 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e07f      	b.n	800264e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d107      	bne.n	8002566 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002556:	4b41      	ldr	r3, [pc, #260]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e073      	b.n	800264e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002566:	4b3d      	ldr	r3, [pc, #244]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06b      	b.n	800264e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f023 0203 	bic.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	4936      	ldr	r1, [pc, #216]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	4313      	orrs	r3, r2
 8002586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7ff f936 	bl	80017f8 <HAL_GetTick>
 800258c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002590:	f7ff f932 	bl	80017f8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	; 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e053      	b.n	800264e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a6:	4b2d      	ldr	r3, [pc, #180]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 020c 	and.w	r2, r3, #12
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d1eb      	bne.n	8002590 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025b8:	4b27      	ldr	r3, [pc, #156]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d210      	bcs.n	80025e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b24      	ldr	r3, [pc, #144]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 020f 	bic.w	r2, r3, #15
 80025ce:	4922      	ldr	r1, [pc, #136]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b20      	ldr	r3, [pc, #128]	; (8002658 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e032      	b.n	800264e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d008      	beq.n	8002606 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025f4:	4b19      	ldr	r3, [pc, #100]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	4916      	ldr	r1, [pc, #88]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002602:	4313      	orrs	r3, r2
 8002604:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0308 	and.w	r3, r3, #8
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002612:	4b12      	ldr	r3, [pc, #72]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	691b      	ldr	r3, [r3, #16]
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	490e      	ldr	r1, [pc, #56]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 8002622:	4313      	orrs	r3, r2
 8002624:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002626:	f000 f821 	bl	800266c <HAL_RCC_GetSysClockFreq>
 800262a:	4601      	mov	r1, r0
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <HAL_RCC_ClockConfig+0x1c8>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	091b      	lsrs	r3, r3, #4
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <HAL_RCC_ClockConfig+0x1cc>)
 8002638:	5cd3      	ldrb	r3, [r2, r3]
 800263a:	fa21 f303 	lsr.w	r3, r1, r3
 800263e:	4a09      	ldr	r2, [pc, #36]	; (8002664 <HAL_RCC_ClockConfig+0x1d0>)
 8002640:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_ClockConfig+0x1d4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff f892 	bl	8001770 <HAL_InitTick>

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023c00 	.word	0x40023c00
 800265c:	40023800 	.word	0x40023800
 8002660:	08004c90 	.word	0x08004c90
 8002664:	20000000 	.word	0x20000000
 8002668:	20000004 	.word	0x20000004

0800266c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800266c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	2300      	movs	r3, #0
 800267c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002682:	4b50      	ldr	r3, [pc, #320]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b04      	cmp	r3, #4
 800268c:	d007      	beq.n	800269e <HAL_RCC_GetSysClockFreq+0x32>
 800268e:	2b08      	cmp	r3, #8
 8002690:	d008      	beq.n	80026a4 <HAL_RCC_GetSysClockFreq+0x38>
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 808d 	bne.w	80027b2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002698:	4b4b      	ldr	r3, [pc, #300]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800269a:	60bb      	str	r3, [r7, #8]
      break;
 800269c:	e08c      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800269e:	4b4b      	ldr	r3, [pc, #300]	; (80027cc <HAL_RCC_GetSysClockFreq+0x160>)
 80026a0:	60bb      	str	r3, [r7, #8]
      break;
 80026a2:	e089      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026a4:	4b47      	ldr	r3, [pc, #284]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026ac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80026ae:	4b45      	ldr	r3, [pc, #276]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d023      	beq.n	8002702 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ba:	4b42      	ldr	r3, [pc, #264]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x158>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	099b      	lsrs	r3, r3, #6
 80026c0:	f04f 0400 	mov.w	r4, #0
 80026c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	ea03 0501 	and.w	r5, r3, r1
 80026d0:	ea04 0602 	and.w	r6, r4, r2
 80026d4:	4a3d      	ldr	r2, [pc, #244]	; (80027cc <HAL_RCC_GetSysClockFreq+0x160>)
 80026d6:	fb02 f106 	mul.w	r1, r2, r6
 80026da:	2200      	movs	r2, #0
 80026dc:	fb02 f205 	mul.w	r2, r2, r5
 80026e0:	440a      	add	r2, r1
 80026e2:	493a      	ldr	r1, [pc, #232]	; (80027cc <HAL_RCC_GetSysClockFreq+0x160>)
 80026e4:	fba5 0101 	umull	r0, r1, r5, r1
 80026e8:	1853      	adds	r3, r2, r1
 80026ea:	4619      	mov	r1, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f04f 0400 	mov.w	r4, #0
 80026f2:	461a      	mov	r2, r3
 80026f4:	4623      	mov	r3, r4
 80026f6:	f7fd fdfb 	bl	80002f0 <__aeabi_uldivmod>
 80026fa:	4603      	mov	r3, r0
 80026fc:	460c      	mov	r4, r1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e049      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	099b      	lsrs	r3, r3, #6
 8002708:	f04f 0400 	mov.w	r4, #0
 800270c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002710:	f04f 0200 	mov.w	r2, #0
 8002714:	ea03 0501 	and.w	r5, r3, r1
 8002718:	ea04 0602 	and.w	r6, r4, r2
 800271c:	4629      	mov	r1, r5
 800271e:	4632      	mov	r2, r6
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	f04f 0400 	mov.w	r4, #0
 8002728:	0154      	lsls	r4, r2, #5
 800272a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800272e:	014b      	lsls	r3, r1, #5
 8002730:	4619      	mov	r1, r3
 8002732:	4622      	mov	r2, r4
 8002734:	1b49      	subs	r1, r1, r5
 8002736:	eb62 0206 	sbc.w	r2, r2, r6
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	f04f 0400 	mov.w	r4, #0
 8002742:	0194      	lsls	r4, r2, #6
 8002744:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002748:	018b      	lsls	r3, r1, #6
 800274a:	1a5b      	subs	r3, r3, r1
 800274c:	eb64 0402 	sbc.w	r4, r4, r2
 8002750:	f04f 0100 	mov.w	r1, #0
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	00e2      	lsls	r2, r4, #3
 800275a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800275e:	00d9      	lsls	r1, r3, #3
 8002760:	460b      	mov	r3, r1
 8002762:	4614      	mov	r4, r2
 8002764:	195b      	adds	r3, r3, r5
 8002766:	eb44 0406 	adc.w	r4, r4, r6
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	f04f 0200 	mov.w	r2, #0
 8002772:	02a2      	lsls	r2, r4, #10
 8002774:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002778:	0299      	lsls	r1, r3, #10
 800277a:	460b      	mov	r3, r1
 800277c:	4614      	mov	r4, r2
 800277e:	4618      	mov	r0, r3
 8002780:	4621      	mov	r1, r4
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f04f 0400 	mov.w	r4, #0
 8002788:	461a      	mov	r2, r3
 800278a:	4623      	mov	r3, r4
 800278c:	f7fd fdb0 	bl	80002f0 <__aeabi_uldivmod>
 8002790:	4603      	mov	r3, r0
 8002792:	460c      	mov	r4, r1
 8002794:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	0c1b      	lsrs	r3, r3, #16
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	3301      	adds	r3, #1
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ae:	60bb      	str	r3, [r7, #8]
      break;
 80027b0:	e002      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b2:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80027b4:	60bb      	str	r3, [r7, #8]
      break;
 80027b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b8:	68bb      	ldr	r3, [r7, #8]
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	00f42400 	.word	0x00f42400
 80027cc:	017d7840 	.word	0x017d7840

080027d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000

080027e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027ec:	f7ff fff0 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027f0:	4601      	mov	r1, r0
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0a9b      	lsrs	r3, r3, #10
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4a03      	ldr	r2, [pc, #12]	; (800280c <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fe:	5cd3      	ldrb	r3, [r2, r3]
 8002800:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	08004ca0 	.word	0x08004ca0

08002810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002814:	f7ff ffdc 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 8002818:	4601      	mov	r1, r0
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCC_GetPCLK2Freq+0x20>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	0b5b      	lsrs	r3, r3, #13
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4a03      	ldr	r2, [pc, #12]	; (8002834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002826:	5cd3      	ldrb	r3, [r2, r3]
 8002828:	fa21 f303 	lsr.w	r3, r1, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40023800 	.word	0x40023800
 8002834:	08004ca0 	.word	0x08004ca0

08002838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800284c:	2300      	movs	r3, #0
 800284e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002860:	4b69      	ldr	r3, [pc, #420]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a68      	ldr	r2, [pc, #416]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002866:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800286a:	6093      	str	r3, [r2, #8]
 800286c:	4b66      	ldr	r3, [pc, #408]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	4964      	ldr	r1, [pc, #400]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	2b00      	cmp	r3, #0
 8002880:	d101      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002882:	2301      	movs	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d017      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002892:	4b5d      	ldr	r3, [pc, #372]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a0:	4959      	ldr	r1, [pc, #356]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028b0:	d101      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80028b2:	2301      	movs	r3, #1
 80028b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80028be:	2301      	movs	r3, #1
 80028c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d017      	beq.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028ce:	4b4e      	ldr	r3, [pc, #312]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	494a      	ldr	r1, [pc, #296]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ec:	d101      	bne.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 808b 	beq.w	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800291c:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	4a39      	ldr	r2, [pc, #228]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002926:	6413      	str	r3, [r2, #64]	; 0x40
 8002928:	4b37      	ldr	r3, [pc, #220]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800292a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002934:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a34      	ldr	r2, [pc, #208]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800293a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800293e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002940:	f7fe ff5a 	bl	80017f8 <HAL_GetTick>
 8002944:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002946:	e008      	b.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002948:	f7fe ff56 	bl	80017f8 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b64      	cmp	r3, #100	; 0x64
 8002954:	d901      	bls.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e38d      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002966:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800296e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d035      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d02e      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002984:	4b20      	ldr	r3, [pc, #128]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800298e:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002992:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299e:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80029a6:	4a18      	ldr	r2, [pc, #96]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029ac:	4b16      	ldr	r3, [pc, #88]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d114      	bne.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b8:	f7fe ff1e 	bl	80017f8 <HAL_GetTick>
 80029bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fe ff1a 	bl	80017f8 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e34f      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ee      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ee:	d111      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80029f0:	4b05      	ldr	r3, [pc, #20]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029fc:	4b04      	ldr	r3, [pc, #16]	; (8002a10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80029fe:	400b      	ands	r3, r1
 8002a00:	4901      	ldr	r1, [pc, #4]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
 8002a06:	e00b      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	0ffffcff 	.word	0x0ffffcff
 8002a14:	4bb3      	ldr	r3, [pc, #716]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4ab2      	ldr	r2, [pc, #712]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a1e:	6093      	str	r3, [r2, #8]
 8002a20:	4bb0      	ldr	r3, [pc, #704]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a2c:	49ad      	ldr	r1, [pc, #692]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d010      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a3e:	4ba9      	ldr	r3, [pc, #676]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a44:	4aa7      	ldr	r2, [pc, #668]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a4e:	4ba5      	ldr	r3, [pc, #660]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a58:	49a2      	ldr	r1, [pc, #648]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00a      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a6c:	4b9d      	ldr	r3, [pc, #628]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a7a:	499a      	ldr	r1, [pc, #616]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00a      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a8e:	4b95      	ldr	r3, [pc, #596]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a9c:	4991      	ldr	r1, [pc, #580]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00a      	beq.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ab0:	4b8c      	ldr	r3, [pc, #560]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002abe:	4989      	ldr	r1, [pc, #548]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002ad2:	4b84      	ldr	r3, [pc, #528]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4980      	ldr	r1, [pc, #512]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00a      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002af4:	4b7b      	ldr	r3, [pc, #492]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	4978      	ldr	r1, [pc, #480]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b16:	4b73      	ldr	r3, [pc, #460]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1c:	f023 020c 	bic.w	r2, r3, #12
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b24:	496f      	ldr	r1, [pc, #444]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00a      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b38:	4b6a      	ldr	r3, [pc, #424]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b46:	4967      	ldr	r1, [pc, #412]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00a      	beq.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b5a:	4b62      	ldr	r3, [pc, #392]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b68:	495e      	ldr	r1, [pc, #376]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b7c:	4b59      	ldr	r3, [pc, #356]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	4956      	ldr	r1, [pc, #344]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00a      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002b9e:	4b51      	ldr	r3, [pc, #324]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bac:	494d      	ldr	r1, [pc, #308]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00a      	beq.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002bc0:	4b48      	ldr	r3, [pc, #288]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	4945      	ldr	r1, [pc, #276]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00a      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002be2:	4b40      	ldr	r3, [pc, #256]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002be8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf0:	493c      	ldr	r1, [pc, #240]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00a      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002c04:	4b37      	ldr	r3, [pc, #220]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c12:	4934      	ldr	r1, [pc, #208]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d011      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002c26:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c34:	492b      	ldr	r1, [pc, #172]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c44:	d101      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002c46:	2301      	movs	r3, #1
 8002c48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002c56:	2301      	movs	r3, #1
 8002c58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00a      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c66:	4b1f      	ldr	r3, [pc, #124]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c74:	491b      	ldr	r1, [pc, #108]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00b      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c88:	4b16      	ldr	r3, [pc, #88]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c98:	4912      	ldr	r1, [pc, #72]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00b      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002cac:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cbc:	4909      	ldr	r1, [pc, #36]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00f      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002cd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cd6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ce2:	bf00      	nop
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	4985      	ldr	r1, [pc, #532]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002cfc:	4b80      	ldr	r3, [pc, #512]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d0c:	497c      	ldr	r1, [pc, #496]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d005      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d22:	f040 80d6 	bne.w	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d26:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a75      	ldr	r2, [pc, #468]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d32:	f7fe fd61 	bl	80017f8 <HAL_GetTick>
 8002d36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d38:	e008      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d3a:	f7fe fd5d 	bl	80017f8 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b64      	cmp	r3, #100	; 0x64
 8002d46:	d901      	bls.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e194      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d4c:	4b6c      	ldr	r3, [pc, #432]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1f0      	bne.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d021      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d11d      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002d6c:	4b64      	ldr	r3, [pc, #400]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002d7a:	4b61      	ldr	r3, [pc, #388]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d80:	0e1b      	lsrs	r3, r3, #24
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	019a      	lsls	r2, r3, #6
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	041b      	lsls	r3, r3, #16
 8002d92:	431a      	orrs	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	061b      	lsls	r3, r3, #24
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	071b      	lsls	r3, r3, #28
 8002da0:	4957      	ldr	r1, [pc, #348]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d004      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d02e      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd2:	d129      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002dd4:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dda:	0c1b      	lsrs	r3, r3, #16
 8002ddc:	f003 0303 	and.w	r3, r3, #3
 8002de0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002de8:	0f1b      	lsrs	r3, r3, #28
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	019a      	lsls	r2, r3, #6
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	061b      	lsls	r3, r3, #24
 8002e02:	431a      	orrs	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	071b      	lsls	r3, r3, #28
 8002e08:	493d      	ldr	r1, [pc, #244]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002e10:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e16:	f023 021f 	bic.w	r2, r3, #31
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	4937      	ldr	r1, [pc, #220]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d01d      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002e34:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e3a:	0e1b      	lsrs	r3, r3, #24
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002e42:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e48:	0f1b      	lsrs	r3, r3, #28
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	019a      	lsls	r2, r3, #6
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	041b      	lsls	r3, r3, #16
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	061b      	lsls	r3, r3, #24
 8002e62:	431a      	orrs	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	071b      	lsls	r3, r3, #28
 8002e68:	4925      	ldr	r1, [pc, #148]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d011      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	019a      	lsls	r2, r3, #6
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	041b      	lsls	r3, r3, #16
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	061b      	lsls	r3, r3, #24
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	071b      	lsls	r3, r3, #28
 8002e98:	4919      	ldr	r1, [pc, #100]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a16      	ldr	r2, [pc, #88]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ea6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eac:	f7fe fca4 	bl	80017f8 <HAL_GetTick>
 8002eb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002eb4:	f7fe fca0 	bl	80017f8 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	; 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e0d7      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d0f0      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	f040 80cd 	bne.w	8003074 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002eda:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a08      	ldr	r2, [pc, #32]	; (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee6:	f7fe fc87 	bl	80017f8 <HAL_GetTick>
 8002eea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002eee:	f7fe fc83 	bl	80017f8 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b64      	cmp	r3, #100	; 0x64
 8002efa:	d903      	bls.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e0ba      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002f00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002f04:	4b5e      	ldr	r3, [pc, #376]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f10:	d0ed      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d009      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d02e      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d12a      	bne.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002f3a:	4b51      	ldr	r3, [pc, #324]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f40:	0c1b      	lsrs	r3, r3, #16
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002f48:	4b4d      	ldr	r3, [pc, #308]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	0f1b      	lsrs	r3, r3, #28
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	019a      	lsls	r2, r3, #6
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	061b      	lsls	r3, r3, #24
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	071b      	lsls	r3, r3, #28
 8002f6e:	4944      	ldr	r1, [pc, #272]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002f76:	4b42      	ldr	r3, [pc, #264]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	3b01      	subs	r3, #1
 8002f86:	021b      	lsls	r3, r3, #8
 8002f88:	493d      	ldr	r1, [pc, #244]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d022      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fa4:	d11d      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fa6:	4b36      	ldr	r3, [pc, #216]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fac:	0e1b      	lsrs	r3, r3, #24
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002fb4:	4b32      	ldr	r3, [pc, #200]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	0f1b      	lsrs	r3, r3, #28
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	019a      	lsls	r2, r3, #6
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1b      	ldr	r3, [r3, #32]
 8002fcc:	041b      	lsls	r3, r3, #16
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	061b      	lsls	r3, r3, #24
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	071b      	lsls	r3, r3, #28
 8002fda:	4929      	ldr	r1, [pc, #164]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d028      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002fee:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff4:	0e1b      	lsrs	r3, r3, #24
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002ffc:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003002:	0c1b      	lsrs	r3, r3, #16
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	019a      	lsls	r2, r3, #6
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	041b      	lsls	r3, r3, #16
 8003014:	431a      	orrs	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	061b      	lsls	r3, r3, #24
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	071b      	lsls	r3, r3, #28
 8003022:	4917      	ldr	r1, [pc, #92]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800302c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	4911      	ldr	r1, [pc, #68]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800303a:	4313      	orrs	r3, r2
 800303c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003040:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0e      	ldr	r2, [pc, #56]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800304a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304c:	f7fe fbd4 	bl	80017f8 <HAL_GetTick>
 8003050:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003054:	f7fe fbd0 	bl	80017f8 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b64      	cmp	r3, #100	; 0x64
 8003060:	d901      	bls.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e007      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003066:	4b06      	ldr	r3, [pc, #24]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800306e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003072:	d1ef      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800

08003084 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e025      	b.n	80030e4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d106      	bne.n	80030b2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7fd fead 	bl	8000e0c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	3304      	adds	r3, #4
 80030c2:	4619      	mov	r1, r3
 80030c4:	4610      	mov	r0, r2
 80030c6:	f001 f83d 	bl	8004144 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	461a      	mov	r2, r3
 80030d4:	6839      	ldr	r1, [r7, #0]
 80030d6:	f001 f8a7 	bl	8004228 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d101      	bne.n	8003108 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8003104:	2302      	movs	r3, #2
 8003106:	e018      	b.n	800313a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	68b9      	ldr	r1, [r7, #8]
 8003118:	4618      	mov	r0, r3
 800311a:	f001 f905 	bl	8004328 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d104      	bne.n	8003130 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2205      	movs	r2, #5
 800312a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800312e:	e003      	b.n	8003138 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3710      	adds	r7, #16
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e084      	b.n	800325e <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003160:	b2db      	uxtb	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d106      	bne.n	8003174 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7fe f8fc 	bl	800136c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800318a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003194:	d902      	bls.n	800319c <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]
 800319a:	e002      	b.n	80031a2 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800319c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80031aa:	d007      	beq.n	80031bc <HAL_SPI_Init+0x7a>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031b4:	d002      	beq.n	80031bc <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d10b      	bne.n	80031dc <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031cc:	d903      	bls.n	80031d6 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2202      	movs	r2, #2
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
 80031d4:	e002      	b.n	80031dc <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2201      	movs	r2, #1
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685a      	ldr	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	691b      	ldr	r3, [r3, #16]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	ea42 0103 	orr.w	r1, r2, r3
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	0c1b      	lsrs	r3, r3, #16
 800321c:	f003 0204 	and.w	r2, r3, #4
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	ea42 0103 	orr.w	r1, r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b088      	sub	sp, #32
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	60b9      	str	r1, [r7, #8]
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	4613      	mov	r3, r2
 8003274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003280:	2b01      	cmp	r3, #1
 8003282:	d101      	bne.n	8003288 <HAL_SPI_Transmit+0x22>
 8003284:	2302      	movs	r3, #2
 8003286:	e150      	b.n	800352a <HAL_SPI_Transmit+0x2c4>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003290:	f7fe fab2 	bl	80017f8 <HAL_GetTick>
 8003294:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d002      	beq.n	80032ac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032a6:	2302      	movs	r3, #2
 80032a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032aa:	e135      	b.n	8003518 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_SPI_Transmit+0x52>
 80032b2:	88fb      	ldrh	r3, [r7, #6]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032bc:	e12c      	b.n	8003518 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2203      	movs	r2, #3
 80032c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	88fa      	ldrh	r2, [r7, #6]
 80032dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003308:	d107      	bne.n	800331a <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003318:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d007      	beq.n	8003338 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003336:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003340:	d94b      	bls.n	80033da <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_SPI_Transmit+0xea>
 800334a:	8afb      	ldrh	r3, [r7, #22]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d13e      	bne.n	80033ce <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	881a      	ldrh	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	1c9a      	adds	r2, r3, #2
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336a:	b29b      	uxth	r3, r3
 800336c:	3b01      	subs	r3, #1
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003374:	e02b      	b.n	80033ce <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b02      	cmp	r3, #2
 8003382:	d112      	bne.n	80033aa <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003388:	881a      	ldrh	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003394:	1c9a      	adds	r2, r3, #2
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033a8:	e011      	b.n	80033ce <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033aa:	f7fe fa25 	bl	80017f8 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d803      	bhi.n	80033c2 <HAL_SPI_Transmit+0x15c>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c0:	d102      	bne.n	80033c8 <HAL_SPI_Transmit+0x162>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d102      	bne.n	80033ce <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033cc:	e0a4      	b.n	8003518 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1ce      	bne.n	8003376 <HAL_SPI_Transmit+0x110>
 80033d8:	e07c      	b.n	80034d4 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_Transmit+0x182>
 80033e2:	8afb      	ldrh	r3, [r7, #22]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d170      	bne.n	80034ca <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d912      	bls.n	8003418 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f6:	881a      	ldrh	r2, [r3, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	1c9a      	adds	r2, r3, #2
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b02      	subs	r3, #2
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003416:	e058      	b.n	80034ca <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	7812      	ldrb	r2, [r2, #0]
 8003424:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800343e:	e044      	b.n	80034ca <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b02      	cmp	r3, #2
 800344c:	d12b      	bne.n	80034a6 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003452:	b29b      	uxth	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	d912      	bls.n	800347e <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345c:	881a      	ldrh	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003468:	1c9a      	adds	r2, r3, #2
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003472:	b29b      	uxth	r3, r3
 8003474:	3b02      	subs	r3, #2
 8003476:	b29a      	uxth	r2, r3
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800347c:	e025      	b.n	80034ca <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	330c      	adds	r3, #12
 8003488:	7812      	ldrb	r2, [r2, #0]
 800348a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	1c5a      	adds	r2, r3, #1
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800349a:	b29b      	uxth	r3, r3
 800349c:	3b01      	subs	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034a4:	e011      	b.n	80034ca <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a6:	f7fe f9a7 	bl	80017f8 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	683a      	ldr	r2, [r7, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d803      	bhi.n	80034be <HAL_SPI_Transmit+0x258>
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034bc:	d102      	bne.n	80034c4 <HAL_SPI_Transmit+0x25e>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d102      	bne.n	80034ca <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034c8:	e026      	b.n	8003518 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1b5      	bne.n	8003440 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	6839      	ldr	r1, [r7, #0]
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f901 	bl	80036e0 <SPI_EndRxTxTransaction>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034f2:	2300      	movs	r3, #0
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350c:	2b00      	cmp	r3, #0
 800350e:	d002      	beq.n	8003516 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e000      	b.n	8003518 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003516:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003528:	7ffb      	ldrb	r3, [r7, #31]
}
 800352a:	4618      	mov	r0, r3
 800352c:	3720      	adds	r7, #32
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	60f8      	str	r0, [r7, #12]
 800353a:	60b9      	str	r1, [r7, #8]
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	4613      	mov	r3, r2
 8003540:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003542:	e04c      	b.n	80035de <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354a:	d048      	beq.n	80035de <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800354c:	f7fe f954 	bl	80017f8 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d902      	bls.n	8003562 <SPI_WaitFlagStateUntilTimeout+0x30>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d13d      	bne.n	80035de <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003570:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800357a:	d111      	bne.n	80035a0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003584:	d004      	beq.n	8003590 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800358e:	d107      	bne.n	80035a0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035a8:	d10f      	bne.n	80035ca <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e00f      	b.n	80035fe <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4013      	ands	r3, r2
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	bf0c      	ite	eq
 80035ee:	2301      	moveq	r3, #1
 80035f0:	2300      	movne	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d1a3      	bne.n	8003544 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003614:	e057      	b.n	80036c6 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800361c:	d106      	bne.n	800362c <SPI_WaitFifoStateUntilTimeout+0x26>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d103      	bne.n	800362c <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d048      	beq.n	80036c6 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003634:	f7fe f8e0 	bl	80017f8 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d902      	bls.n	800364a <SPI_WaitFifoStateUntilTimeout+0x44>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d13d      	bne.n	80036c6 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003658:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003662:	d111      	bne.n	8003688 <SPI_WaitFifoStateUntilTimeout+0x82>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366c:	d004      	beq.n	8003678 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003676:	d107      	bne.n	8003688 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003686:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003690:	d10f      	bne.n	80036b2 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e008      	b.n	80036d8 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	4013      	ands	r3, r2
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d19f      	bne.n	8003616 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7ff ff84 	bl	8003606 <SPI_WaitFifoStateUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e027      	b.n	8003764 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2200      	movs	r2, #0
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7ff ff07 	bl	8003532 <SPI_WaitFlagStateUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d007      	beq.n	800373a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372e:	f043 0220 	orr.w	r2, r3, #32
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e014      	b.n	8003764 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2200      	movs	r2, #0
 8003742:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f7ff ff5d 	bl	8003606 <SPI_WaitFifoStateUntilTimeout>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003756:	f043 0220 	orr.w	r2, r3, #32
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e000      	b.n	8003764 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e040      	b.n	8003800 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fd ff42 	bl	8001618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2224      	movs	r2, #36	; 0x24
 8003798:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0201 	bic.w	r2, r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f8be 	bl	800392c <UART_SetConfig>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e022      	b.n	8003800 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d002      	beq.n	80037c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fb5c 	bl	8003e80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689a      	ldr	r2, [r3, #8]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fbe3 	bl	8003fc4 <UART_CheckIdleState>
 80037fe:	4603      	mov	r3, r0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	; 0x28
 800380c:	af02      	add	r7, sp, #8
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	4613      	mov	r3, r2
 8003816:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800381c:	2b20      	cmp	r3, #32
 800381e:	d17f      	bne.n	8003920 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_UART_Transmit+0x24>
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e078      	b.n	8003922 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_UART_Transmit+0x36>
 800383a:	2302      	movs	r3, #2
 800383c:	e071      	b.n	8003922 <HAL_UART_Transmit+0x11a>
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2221      	movs	r2, #33	; 0x21
 8003850:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003852:	f7fd ffd1 	bl	80017f8 <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	88fa      	ldrh	r2, [r7, #6]
 8003864:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003870:	d108      	bne.n	8003884 <HAL_UART_Transmit+0x7c>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d104      	bne.n	8003884 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	e003      	b.n	800388c <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003888:	2300      	movs	r3, #0
 800388a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003894:	e02c      	b.n	80038f0 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	9300      	str	r3, [sp, #0]
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2200      	movs	r2, #0
 800389e:	2180      	movs	r1, #128	; 0x80
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fbd4 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e038      	b.n	8003922 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10b      	bne.n	80038ce <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	461a      	mov	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	3302      	adds	r3, #2
 80038ca:	61bb      	str	r3, [r7, #24]
 80038cc:	e007      	b.n	80038de <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3301      	adds	r3, #1
 80038dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1cc      	bne.n	8003896 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2200      	movs	r2, #0
 8003904:	2140      	movs	r1, #64	; 0x40
 8003906:	68f8      	ldr	r0, [r7, #12]
 8003908:	f000 fba1 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e005      	b.n	8003922 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2220      	movs	r2, #32
 800391a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003934:	2300      	movs	r3, #0
 8003936:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	431a      	orrs	r2, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4bb1      	ldr	r3, [pc, #708]	; (8003c20 <UART_SetConfig+0x2f4>)
 800395c:	4013      	ands	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	6939      	ldr	r1, [r7, #16]
 8003964:	430b      	orrs	r3, r1
 8003966:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	430a      	orrs	r2, r1
 80039a0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a9f      	ldr	r2, [pc, #636]	; (8003c24 <UART_SetConfig+0x2f8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d121      	bne.n	80039f0 <UART_SetConfig+0xc4>
 80039ac:	4b9e      	ldr	r3, [pc, #632]	; (8003c28 <UART_SetConfig+0x2fc>)
 80039ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d816      	bhi.n	80039e8 <UART_SetConfig+0xbc>
 80039ba:	a201      	add	r2, pc, #4	; (adr r2, 80039c0 <UART_SetConfig+0x94>)
 80039bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	080039dd 	.word	0x080039dd
 80039c8:	080039d7 	.word	0x080039d7
 80039cc:	080039e3 	.word	0x080039e3
 80039d0:	2301      	movs	r3, #1
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e151      	b.n	8003c7a <UART_SetConfig+0x34e>
 80039d6:	2302      	movs	r3, #2
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e14e      	b.n	8003c7a <UART_SetConfig+0x34e>
 80039dc:	2304      	movs	r3, #4
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e14b      	b.n	8003c7a <UART_SetConfig+0x34e>
 80039e2:	2308      	movs	r3, #8
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e148      	b.n	8003c7a <UART_SetConfig+0x34e>
 80039e8:	2310      	movs	r3, #16
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	bf00      	nop
 80039ee:	e144      	b.n	8003c7a <UART_SetConfig+0x34e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a8d      	ldr	r2, [pc, #564]	; (8003c2c <UART_SetConfig+0x300>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d134      	bne.n	8003a64 <UART_SetConfig+0x138>
 80039fa:	4b8b      	ldr	r3, [pc, #556]	; (8003c28 <UART_SetConfig+0x2fc>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a00:	f003 030c 	and.w	r3, r3, #12
 8003a04:	2b0c      	cmp	r3, #12
 8003a06:	d829      	bhi.n	8003a5c <UART_SetConfig+0x130>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <UART_SetConfig+0xe4>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a45 	.word	0x08003a45
 8003a14:	08003a5d 	.word	0x08003a5d
 8003a18:	08003a5d 	.word	0x08003a5d
 8003a1c:	08003a5d 	.word	0x08003a5d
 8003a20:	08003a51 	.word	0x08003a51
 8003a24:	08003a5d 	.word	0x08003a5d
 8003a28:	08003a5d 	.word	0x08003a5d
 8003a2c:	08003a5d 	.word	0x08003a5d
 8003a30:	08003a4b 	.word	0x08003a4b
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	08003a5d 	.word	0x08003a5d
 8003a3c:	08003a5d 	.word	0x08003a5d
 8003a40:	08003a57 	.word	0x08003a57
 8003a44:	2300      	movs	r3, #0
 8003a46:	77fb      	strb	r3, [r7, #31]
 8003a48:	e117      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	77fb      	strb	r3, [r7, #31]
 8003a4e:	e114      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003a50:	2304      	movs	r3, #4
 8003a52:	77fb      	strb	r3, [r7, #31]
 8003a54:	e111      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003a56:	2308      	movs	r3, #8
 8003a58:	77fb      	strb	r3, [r7, #31]
 8003a5a:	e10e      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	bf00      	nop
 8003a62:	e10a      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a71      	ldr	r2, [pc, #452]	; (8003c30 <UART_SetConfig+0x304>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d120      	bne.n	8003ab0 <UART_SetConfig+0x184>
 8003a6e:	4b6e      	ldr	r3, [pc, #440]	; (8003c28 <UART_SetConfig+0x2fc>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a78:	2b10      	cmp	r3, #16
 8003a7a:	d00f      	beq.n	8003a9c <UART_SetConfig+0x170>
 8003a7c:	2b10      	cmp	r3, #16
 8003a7e:	d802      	bhi.n	8003a86 <UART_SetConfig+0x15a>
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <UART_SetConfig+0x164>
 8003a84:	e010      	b.n	8003aa8 <UART_SetConfig+0x17c>
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	d005      	beq.n	8003a96 <UART_SetConfig+0x16a>
 8003a8a:	2b30      	cmp	r3, #48	; 0x30
 8003a8c:	d009      	beq.n	8003aa2 <UART_SetConfig+0x176>
 8003a8e:	e00b      	b.n	8003aa8 <UART_SetConfig+0x17c>
 8003a90:	2300      	movs	r3, #0
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e0f1      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003a96:	2302      	movs	r3, #2
 8003a98:	77fb      	strb	r3, [r7, #31]
 8003a9a:	e0ee      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003a9c:	2304      	movs	r3, #4
 8003a9e:	77fb      	strb	r3, [r7, #31]
 8003aa0:	e0eb      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003aa2:	2308      	movs	r3, #8
 8003aa4:	77fb      	strb	r3, [r7, #31]
 8003aa6:	e0e8      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	77fb      	strb	r3, [r7, #31]
 8003aac:	bf00      	nop
 8003aae:	e0e4      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a5f      	ldr	r2, [pc, #380]	; (8003c34 <UART_SetConfig+0x308>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d120      	bne.n	8003afc <UART_SetConfig+0x1d0>
 8003aba:	4b5b      	ldr	r3, [pc, #364]	; (8003c28 <UART_SetConfig+0x2fc>)
 8003abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d00f      	beq.n	8003ae8 <UART_SetConfig+0x1bc>
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d802      	bhi.n	8003ad2 <UART_SetConfig+0x1a6>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d005      	beq.n	8003adc <UART_SetConfig+0x1b0>
 8003ad0:	e010      	b.n	8003af4 <UART_SetConfig+0x1c8>
 8003ad2:	2b80      	cmp	r3, #128	; 0x80
 8003ad4:	d005      	beq.n	8003ae2 <UART_SetConfig+0x1b6>
 8003ad6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ad8:	d009      	beq.n	8003aee <UART_SetConfig+0x1c2>
 8003ada:	e00b      	b.n	8003af4 <UART_SetConfig+0x1c8>
 8003adc:	2300      	movs	r3, #0
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	e0cb      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	77fb      	strb	r3, [r7, #31]
 8003ae6:	e0c8      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003ae8:	2304      	movs	r3, #4
 8003aea:	77fb      	strb	r3, [r7, #31]
 8003aec:	e0c5      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003aee:	2308      	movs	r3, #8
 8003af0:	77fb      	strb	r3, [r7, #31]
 8003af2:	e0c2      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003af4:	2310      	movs	r3, #16
 8003af6:	77fb      	strb	r3, [r7, #31]
 8003af8:	bf00      	nop
 8003afa:	e0be      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a4d      	ldr	r2, [pc, #308]	; (8003c38 <UART_SetConfig+0x30c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d124      	bne.n	8003b50 <UART_SetConfig+0x224>
 8003b06:	4b48      	ldr	r3, [pc, #288]	; (8003c28 <UART_SetConfig+0x2fc>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b14:	d012      	beq.n	8003b3c <UART_SetConfig+0x210>
 8003b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b1a:	d802      	bhi.n	8003b22 <UART_SetConfig+0x1f6>
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <UART_SetConfig+0x204>
 8003b20:	e012      	b.n	8003b48 <UART_SetConfig+0x21c>
 8003b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b26:	d006      	beq.n	8003b36 <UART_SetConfig+0x20a>
 8003b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b2c:	d009      	beq.n	8003b42 <UART_SetConfig+0x216>
 8003b2e:	e00b      	b.n	8003b48 <UART_SetConfig+0x21c>
 8003b30:	2300      	movs	r3, #0
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	e0a1      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003b36:	2302      	movs	r3, #2
 8003b38:	77fb      	strb	r3, [r7, #31]
 8003b3a:	e09e      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	77fb      	strb	r3, [r7, #31]
 8003b40:	e09b      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003b42:	2308      	movs	r3, #8
 8003b44:	77fb      	strb	r3, [r7, #31]
 8003b46:	e098      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	77fb      	strb	r3, [r7, #31]
 8003b4c:	bf00      	nop
 8003b4e:	e094      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a39      	ldr	r2, [pc, #228]	; (8003c3c <UART_SetConfig+0x310>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d124      	bne.n	8003ba4 <UART_SetConfig+0x278>
 8003b5a:	4b33      	ldr	r3, [pc, #204]	; (8003c28 <UART_SetConfig+0x2fc>)
 8003b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b68:	d012      	beq.n	8003b90 <UART_SetConfig+0x264>
 8003b6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6e:	d802      	bhi.n	8003b76 <UART_SetConfig+0x24a>
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <UART_SetConfig+0x258>
 8003b74:	e012      	b.n	8003b9c <UART_SetConfig+0x270>
 8003b76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b7a:	d006      	beq.n	8003b8a <UART_SetConfig+0x25e>
 8003b7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b80:	d009      	beq.n	8003b96 <UART_SetConfig+0x26a>
 8003b82:	e00b      	b.n	8003b9c <UART_SetConfig+0x270>
 8003b84:	2301      	movs	r3, #1
 8003b86:	77fb      	strb	r3, [r7, #31]
 8003b88:	e077      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	77fb      	strb	r3, [r7, #31]
 8003b8e:	e074      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003b90:	2304      	movs	r3, #4
 8003b92:	77fb      	strb	r3, [r7, #31]
 8003b94:	e071      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003b96:	2308      	movs	r3, #8
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e06e      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003b9c:	2310      	movs	r3, #16
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	bf00      	nop
 8003ba2:	e06a      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a25      	ldr	r2, [pc, #148]	; (8003c40 <UART_SetConfig+0x314>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d124      	bne.n	8003bf8 <UART_SetConfig+0x2cc>
 8003bae:	4b1e      	ldr	r3, [pc, #120]	; (8003c28 <UART_SetConfig+0x2fc>)
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbc:	d012      	beq.n	8003be4 <UART_SetConfig+0x2b8>
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc2:	d802      	bhi.n	8003bca <UART_SetConfig+0x29e>
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d007      	beq.n	8003bd8 <UART_SetConfig+0x2ac>
 8003bc8:	e012      	b.n	8003bf0 <UART_SetConfig+0x2c4>
 8003bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bce:	d006      	beq.n	8003bde <UART_SetConfig+0x2b2>
 8003bd0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bd4:	d009      	beq.n	8003bea <UART_SetConfig+0x2be>
 8003bd6:	e00b      	b.n	8003bf0 <UART_SetConfig+0x2c4>
 8003bd8:	2300      	movs	r3, #0
 8003bda:	77fb      	strb	r3, [r7, #31]
 8003bdc:	e04d      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003bde:	2302      	movs	r3, #2
 8003be0:	77fb      	strb	r3, [r7, #31]
 8003be2:	e04a      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003be4:	2304      	movs	r3, #4
 8003be6:	77fb      	strb	r3, [r7, #31]
 8003be8:	e047      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003bea:	2308      	movs	r3, #8
 8003bec:	77fb      	strb	r3, [r7, #31]
 8003bee:	e044      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	77fb      	strb	r3, [r7, #31]
 8003bf4:	bf00      	nop
 8003bf6:	e040      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a11      	ldr	r2, [pc, #68]	; (8003c44 <UART_SetConfig+0x318>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d139      	bne.n	8003c76 <UART_SetConfig+0x34a>
 8003c02:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <UART_SetConfig+0x2fc>)
 8003c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003c0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c10:	d027      	beq.n	8003c62 <UART_SetConfig+0x336>
 8003c12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c16:	d817      	bhi.n	8003c48 <UART_SetConfig+0x31c>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d01c      	beq.n	8003c56 <UART_SetConfig+0x32a>
 8003c1c:	e027      	b.n	8003c6e <UART_SetConfig+0x342>
 8003c1e:	bf00      	nop
 8003c20:	efff69f3 	.word	0xefff69f3
 8003c24:	40011000 	.word	0x40011000
 8003c28:	40023800 	.word	0x40023800
 8003c2c:	40004400 	.word	0x40004400
 8003c30:	40004800 	.word	0x40004800
 8003c34:	40004c00 	.word	0x40004c00
 8003c38:	40005000 	.word	0x40005000
 8003c3c:	40011400 	.word	0x40011400
 8003c40:	40007800 	.word	0x40007800
 8003c44:	40007c00 	.word	0x40007c00
 8003c48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c4c:	d006      	beq.n	8003c5c <UART_SetConfig+0x330>
 8003c4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003c52:	d009      	beq.n	8003c68 <UART_SetConfig+0x33c>
 8003c54:	e00b      	b.n	8003c6e <UART_SetConfig+0x342>
 8003c56:	2300      	movs	r3, #0
 8003c58:	77fb      	strb	r3, [r7, #31]
 8003c5a:	e00e      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	77fb      	strb	r3, [r7, #31]
 8003c60:	e00b      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003c62:	2304      	movs	r3, #4
 8003c64:	77fb      	strb	r3, [r7, #31]
 8003c66:	e008      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e005      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003c6e:	2310      	movs	r3, #16
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	bf00      	nop
 8003c74:	e001      	b.n	8003c7a <UART_SetConfig+0x34e>
 8003c76:	2310      	movs	r3, #16
 8003c78:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c82:	d17f      	bne.n	8003d84 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003c84:	7ffb      	ldrb	r3, [r7, #31]
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d85c      	bhi.n	8003d44 <UART_SetConfig+0x418>
 8003c8a:	a201      	add	r2, pc, #4	; (adr r2, 8003c90 <UART_SetConfig+0x364>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003cb5 	.word	0x08003cb5
 8003c94:	08003cd5 	.word	0x08003cd5
 8003c98:	08003cf5 	.word	0x08003cf5
 8003c9c:	08003d45 	.word	0x08003d45
 8003ca0:	08003d0d 	.word	0x08003d0d
 8003ca4:	08003d45 	.word	0x08003d45
 8003ca8:	08003d45 	.word	0x08003d45
 8003cac:	08003d45 	.word	0x08003d45
 8003cb0:	08003d2d 	.word	0x08003d2d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb4:	f7fe fd98 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8003cb8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	005a      	lsls	r2, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	085b      	lsrs	r3, r3, #1
 8003cc4:	441a      	add	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	61bb      	str	r3, [r7, #24]
        break;
 8003cd2:	e03a      	b.n	8003d4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cd4:	f7fe fd9c 	bl	8002810 <HAL_RCC_GetPCLK2Freq>
 8003cd8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	005a      	lsls	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	441a      	add	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	61bb      	str	r3, [r7, #24]
        break;
 8003cf2:	e02a      	b.n	8003d4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	085a      	lsrs	r2, r3, #1
 8003cfa:	4b5f      	ldr	r3, [pc, #380]	; (8003e78 <UART_SetConfig+0x54c>)
 8003cfc:	4413      	add	r3, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6852      	ldr	r2, [r2, #4]
 8003d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	61bb      	str	r3, [r7, #24]
        break;
 8003d0a:	e01e      	b.n	8003d4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0c:	f7fe fcae 	bl	800266c <HAL_RCC_GetSysClockFreq>
 8003d10:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	005a      	lsls	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	085b      	lsrs	r3, r3, #1
 8003d1c:	441a      	add	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	61bb      	str	r3, [r7, #24]
        break;
 8003d2a:	e00e      	b.n	8003d4a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	61bb      	str	r3, [r7, #24]
        break;
 8003d42:	e002      	b.n	8003d4a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	75fb      	strb	r3, [r7, #23]
        break;
 8003d48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	2b0f      	cmp	r3, #15
 8003d4e:	d916      	bls.n	8003d7e <UART_SetConfig+0x452>
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d56:	d212      	bcs.n	8003d7e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	f023 030f 	bic.w	r3, r3, #15
 8003d60:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	085b      	lsrs	r3, r3, #1
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f003 0307 	and.w	r3, r3, #7
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	897b      	ldrh	r3, [r7, #10]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	897a      	ldrh	r2, [r7, #10]
 8003d7a:	60da      	str	r2, [r3, #12]
 8003d7c:	e070      	b.n	8003e60 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
 8003d82:	e06d      	b.n	8003e60 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003d84:	7ffb      	ldrb	r3, [r7, #31]
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d859      	bhi.n	8003e3e <UART_SetConfig+0x512>
 8003d8a:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <UART_SetConfig+0x464>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003db5 	.word	0x08003db5
 8003d94:	08003dd3 	.word	0x08003dd3
 8003d98:	08003df1 	.word	0x08003df1
 8003d9c:	08003e3f 	.word	0x08003e3f
 8003da0:	08003e09 	.word	0x08003e09
 8003da4:	08003e3f 	.word	0x08003e3f
 8003da8:	08003e3f 	.word	0x08003e3f
 8003dac:	08003e3f 	.word	0x08003e3f
 8003db0:	08003e27 	.word	0x08003e27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db4:	f7fe fd18 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8003db8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	085a      	lsrs	r2, r3, #1
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	441a      	add	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	61bb      	str	r3, [r7, #24]
        break;
 8003dd0:	e038      	b.n	8003e44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dd2:	f7fe fd1d 	bl	8002810 <HAL_RCC_GetPCLK2Freq>
 8003dd6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	085a      	lsrs	r2, r3, #1
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	441a      	add	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	61bb      	str	r3, [r7, #24]
        break;
 8003dee:	e029      	b.n	8003e44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	085a      	lsrs	r2, r3, #1
 8003df6:	4b21      	ldr	r3, [pc, #132]	; (8003e7c <UART_SetConfig+0x550>)
 8003df8:	4413      	add	r3, r2
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6852      	ldr	r2, [r2, #4]
 8003dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	61bb      	str	r3, [r7, #24]
        break;
 8003e06:	e01d      	b.n	8003e44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e08:	f7fe fc30 	bl	800266c <HAL_RCC_GetSysClockFreq>
 8003e0c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	085a      	lsrs	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	441a      	add	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	61bb      	str	r3, [r7, #24]
        break;
 8003e24:	e00e      	b.n	8003e44 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	085b      	lsrs	r3, r3, #1
 8003e2c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	61bb      	str	r3, [r7, #24]
        break;
 8003e3c:	e002      	b.n	8003e44 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	75fb      	strb	r3, [r7, #23]
        break;
 8003e42:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	2b0f      	cmp	r3, #15
 8003e48:	d908      	bls.n	8003e5c <UART_SetConfig+0x530>
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e50:	d204      	bcs.n	8003e5c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	60da      	str	r2, [r3, #12]
 8003e5a:	e001      	b.n	8003e60 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3720      	adds	r7, #32
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	01e84800 	.word	0x01e84800
 8003e7c:	00f42400 	.word	0x00f42400

08003e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01a      	beq.n	8003f96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f7e:	d10a      	bne.n	8003f96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]
  }
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b086      	sub	sp, #24
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003fd2:	f7fd fc11 	bl	80017f8 <HAL_GetTick>
 8003fd6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d10e      	bne.n	8004004 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f82a 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e020      	b.n	8004046 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b04      	cmp	r3, #4
 8004010:	d10e      	bne.n	8004030 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004012:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f814 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e00a      	b.n	8004046 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2220      	movs	r2, #32
 8004034:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b084      	sub	sp, #16
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405e:	e05d      	b.n	800411c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d059      	beq.n	800411c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004068:	f7fd fbc6 	bl	80017f8 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	429a      	cmp	r2, r3
 8004076:	d302      	bcc.n	800407e <UART_WaitOnFlagUntilTimeout+0x30>
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d11b      	bne.n	80040b6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800408c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689a      	ldr	r2, [r3, #8]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2220      	movs	r2, #32
 80040a2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e042      	b.n	800413c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d02b      	beq.n	800411c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d2:	d123      	bne.n	800411c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040dc:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040ec:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 0201 	bic.w	r2, r2, #1
 80040fc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e00f      	b.n	800413c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	69da      	ldr	r2, [r3, #28]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4013      	ands	r3, r2
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	429a      	cmp	r2, r3
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	429a      	cmp	r2, r3
 8004138:	d092      	beq.n	8004060 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d027      	beq.n	80041ae <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	4b2f      	ldr	r3, [pc, #188]	; (8004224 <FMC_SDRAM_Init+0xe0>)
 8004168:	4013      	ands	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004174:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800417a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8004180:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8004186:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800418c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8004192:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8004198:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800419e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	601a      	str	r2, [r3, #0]
 80041ac:	e032      	b.n	8004214 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80041ba:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80041c4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 80041ca:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	4b12      	ldr	r3, [pc, #72]	; (8004224 <FMC_SDRAM_Init+0xe0>)
 80041dc:	4013      	ands	r3, r2
 80041de:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80041e8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 80041ee:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 80041f4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 80041fa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 8004200:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	4313      	orrs	r3, r2
 8004206:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	ffff8000 	.word	0xffff8000

08004228 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004228:	b480      	push	{r7}
 800422a:	b087      	sub	sp, #28
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 8004234:	2300      	movs	r3, #0
 8004236:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 8004238:	2300      	movs	r3, #0
 800423a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d02e      	beq.n	80042a0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800424e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	3b01      	subs	r3, #1
 800425c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800425e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	3b01      	subs	r3, #1
 8004266:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 8004268:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	3b01      	subs	r3, #1
 8004270:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8004272:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	3b01      	subs	r3, #1
 800427a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800427c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	3b01      	subs	r3, #1
 8004284:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8004286:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	3b01      	subs	r3, #1
 800428e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004290:	4313      	orrs	r3, r2
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	609a      	str	r2, [r3, #8]
 800429e:	e039      	b.n	8004314 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	4b1e      	ldr	r3, [pc, #120]	; (8004324 <FMC_SDRAM_Timing_Init+0xfc>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	3b01      	subs	r3, #1
 80042bc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80042be:	4313      	orrs	r3, r2
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80042d2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	3b01      	subs	r3, #1
 80042e0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80042e2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80042ec:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80042f6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	699b      	ldr	r3, [r3, #24]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8004300:	4313      	orrs	r3, r2
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop
 8004324:	ff0f0fff 	.word	0xff0f0fff

08004328 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004340:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	3b01      	subs	r3, #1
 8004348:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800434a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	371c      	adds	r7, #28
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <__errno>:
 800436c:	4b01      	ldr	r3, [pc, #4]	; (8004374 <__errno+0x8>)
 800436e:	6818      	ldr	r0, [r3, #0]
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	2000000c 	.word	0x2000000c

08004378 <__libc_init_array>:
 8004378:	b570      	push	{r4, r5, r6, lr}
 800437a:	4e0d      	ldr	r6, [pc, #52]	; (80043b0 <__libc_init_array+0x38>)
 800437c:	4c0d      	ldr	r4, [pc, #52]	; (80043b4 <__libc_init_array+0x3c>)
 800437e:	1ba4      	subs	r4, r4, r6
 8004380:	10a4      	asrs	r4, r4, #2
 8004382:	2500      	movs	r5, #0
 8004384:	42a5      	cmp	r5, r4
 8004386:	d109      	bne.n	800439c <__libc_init_array+0x24>
 8004388:	4e0b      	ldr	r6, [pc, #44]	; (80043b8 <__libc_init_array+0x40>)
 800438a:	4c0c      	ldr	r4, [pc, #48]	; (80043bc <__libc_init_array+0x44>)
 800438c:	f000 fc60 	bl	8004c50 <_init>
 8004390:	1ba4      	subs	r4, r4, r6
 8004392:	10a4      	asrs	r4, r4, #2
 8004394:	2500      	movs	r5, #0
 8004396:	42a5      	cmp	r5, r4
 8004398:	d105      	bne.n	80043a6 <__libc_init_array+0x2e>
 800439a:	bd70      	pop	{r4, r5, r6, pc}
 800439c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043a0:	4798      	blx	r3
 80043a2:	3501      	adds	r5, #1
 80043a4:	e7ee      	b.n	8004384 <__libc_init_array+0xc>
 80043a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80043aa:	4798      	blx	r3
 80043ac:	3501      	adds	r5, #1
 80043ae:	e7f2      	b.n	8004396 <__libc_init_array+0x1e>
 80043b0:	08004ce4 	.word	0x08004ce4
 80043b4:	08004ce4 	.word	0x08004ce4
 80043b8:	08004ce4 	.word	0x08004ce4
 80043bc:	08004ce8 	.word	0x08004ce8

080043c0 <memset>:
 80043c0:	4402      	add	r2, r0
 80043c2:	4603      	mov	r3, r0
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d100      	bne.n	80043ca <memset+0xa>
 80043c8:	4770      	bx	lr
 80043ca:	f803 1b01 	strb.w	r1, [r3], #1
 80043ce:	e7f9      	b.n	80043c4 <memset+0x4>

080043d0 <siprintf>:
 80043d0:	b40e      	push	{r1, r2, r3}
 80043d2:	b500      	push	{lr}
 80043d4:	b09c      	sub	sp, #112	; 0x70
 80043d6:	ab1d      	add	r3, sp, #116	; 0x74
 80043d8:	9002      	str	r0, [sp, #8]
 80043da:	9006      	str	r0, [sp, #24]
 80043dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043e0:	4809      	ldr	r0, [pc, #36]	; (8004408 <siprintf+0x38>)
 80043e2:	9107      	str	r1, [sp, #28]
 80043e4:	9104      	str	r1, [sp, #16]
 80043e6:	4909      	ldr	r1, [pc, #36]	; (800440c <siprintf+0x3c>)
 80043e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80043ec:	9105      	str	r1, [sp, #20]
 80043ee:	6800      	ldr	r0, [r0, #0]
 80043f0:	9301      	str	r3, [sp, #4]
 80043f2:	a902      	add	r1, sp, #8
 80043f4:	f000 f8a0 	bl	8004538 <_svfiprintf_r>
 80043f8:	9b02      	ldr	r3, [sp, #8]
 80043fa:	2200      	movs	r2, #0
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	b01c      	add	sp, #112	; 0x70
 8004400:	f85d eb04 	ldr.w	lr, [sp], #4
 8004404:	b003      	add	sp, #12
 8004406:	4770      	bx	lr
 8004408:	2000000c 	.word	0x2000000c
 800440c:	ffff0208 	.word	0xffff0208

08004410 <_vsniprintf_r>:
 8004410:	b530      	push	{r4, r5, lr}
 8004412:	1e14      	subs	r4, r2, #0
 8004414:	4605      	mov	r5, r0
 8004416:	b09b      	sub	sp, #108	; 0x6c
 8004418:	4618      	mov	r0, r3
 800441a:	da05      	bge.n	8004428 <_vsniprintf_r+0x18>
 800441c:	238b      	movs	r3, #139	; 0x8b
 800441e:	602b      	str	r3, [r5, #0]
 8004420:	f04f 30ff 	mov.w	r0, #4294967295
 8004424:	b01b      	add	sp, #108	; 0x6c
 8004426:	bd30      	pop	{r4, r5, pc}
 8004428:	f44f 7302 	mov.w	r3, #520	; 0x208
 800442c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004430:	bf14      	ite	ne
 8004432:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004436:	4623      	moveq	r3, r4
 8004438:	9302      	str	r3, [sp, #8]
 800443a:	9305      	str	r3, [sp, #20]
 800443c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004440:	9100      	str	r1, [sp, #0]
 8004442:	9104      	str	r1, [sp, #16]
 8004444:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004448:	4602      	mov	r2, r0
 800444a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800444c:	4669      	mov	r1, sp
 800444e:	4628      	mov	r0, r5
 8004450:	f000 f872 	bl	8004538 <_svfiprintf_r>
 8004454:	1c43      	adds	r3, r0, #1
 8004456:	bfbc      	itt	lt
 8004458:	238b      	movlt	r3, #139	; 0x8b
 800445a:	602b      	strlt	r3, [r5, #0]
 800445c:	2c00      	cmp	r4, #0
 800445e:	d0e1      	beq.n	8004424 <_vsniprintf_r+0x14>
 8004460:	9b00      	ldr	r3, [sp, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]
 8004466:	e7dd      	b.n	8004424 <_vsniprintf_r+0x14>

08004468 <vsniprintf>:
 8004468:	b507      	push	{r0, r1, r2, lr}
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	4613      	mov	r3, r2
 800446e:	460a      	mov	r2, r1
 8004470:	4601      	mov	r1, r0
 8004472:	4803      	ldr	r0, [pc, #12]	; (8004480 <vsniprintf+0x18>)
 8004474:	6800      	ldr	r0, [r0, #0]
 8004476:	f7ff ffcb 	bl	8004410 <_vsniprintf_r>
 800447a:	b003      	add	sp, #12
 800447c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004480:	2000000c 	.word	0x2000000c

08004484 <__ssputs_r>:
 8004484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004488:	688e      	ldr	r6, [r1, #8]
 800448a:	429e      	cmp	r6, r3
 800448c:	4682      	mov	sl, r0
 800448e:	460c      	mov	r4, r1
 8004490:	4690      	mov	r8, r2
 8004492:	4699      	mov	r9, r3
 8004494:	d837      	bhi.n	8004506 <__ssputs_r+0x82>
 8004496:	898a      	ldrh	r2, [r1, #12]
 8004498:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800449c:	d031      	beq.n	8004502 <__ssputs_r+0x7e>
 800449e:	6825      	ldr	r5, [r4, #0]
 80044a0:	6909      	ldr	r1, [r1, #16]
 80044a2:	1a6f      	subs	r7, r5, r1
 80044a4:	6965      	ldr	r5, [r4, #20]
 80044a6:	2302      	movs	r3, #2
 80044a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80044b0:	f109 0301 	add.w	r3, r9, #1
 80044b4:	443b      	add	r3, r7
 80044b6:	429d      	cmp	r5, r3
 80044b8:	bf38      	it	cc
 80044ba:	461d      	movcc	r5, r3
 80044bc:	0553      	lsls	r3, r2, #21
 80044be:	d530      	bpl.n	8004522 <__ssputs_r+0x9e>
 80044c0:	4629      	mov	r1, r5
 80044c2:	f000 fb2b 	bl	8004b1c <_malloc_r>
 80044c6:	4606      	mov	r6, r0
 80044c8:	b950      	cbnz	r0, 80044e0 <__ssputs_r+0x5c>
 80044ca:	230c      	movs	r3, #12
 80044cc:	f8ca 3000 	str.w	r3, [sl]
 80044d0:	89a3      	ldrh	r3, [r4, #12]
 80044d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d6:	81a3      	strh	r3, [r4, #12]
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044e0:	463a      	mov	r2, r7
 80044e2:	6921      	ldr	r1, [r4, #16]
 80044e4:	f000 faa8 	bl	8004a38 <memcpy>
 80044e8:	89a3      	ldrh	r3, [r4, #12]
 80044ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80044ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f2:	81a3      	strh	r3, [r4, #12]
 80044f4:	6126      	str	r6, [r4, #16]
 80044f6:	6165      	str	r5, [r4, #20]
 80044f8:	443e      	add	r6, r7
 80044fa:	1bed      	subs	r5, r5, r7
 80044fc:	6026      	str	r6, [r4, #0]
 80044fe:	60a5      	str	r5, [r4, #8]
 8004500:	464e      	mov	r6, r9
 8004502:	454e      	cmp	r6, r9
 8004504:	d900      	bls.n	8004508 <__ssputs_r+0x84>
 8004506:	464e      	mov	r6, r9
 8004508:	4632      	mov	r2, r6
 800450a:	4641      	mov	r1, r8
 800450c:	6820      	ldr	r0, [r4, #0]
 800450e:	f000 fa9e 	bl	8004a4e <memmove>
 8004512:	68a3      	ldr	r3, [r4, #8]
 8004514:	1b9b      	subs	r3, r3, r6
 8004516:	60a3      	str	r3, [r4, #8]
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	441e      	add	r6, r3
 800451c:	6026      	str	r6, [r4, #0]
 800451e:	2000      	movs	r0, #0
 8004520:	e7dc      	b.n	80044dc <__ssputs_r+0x58>
 8004522:	462a      	mov	r2, r5
 8004524:	f000 fb54 	bl	8004bd0 <_realloc_r>
 8004528:	4606      	mov	r6, r0
 800452a:	2800      	cmp	r0, #0
 800452c:	d1e2      	bne.n	80044f4 <__ssputs_r+0x70>
 800452e:	6921      	ldr	r1, [r4, #16]
 8004530:	4650      	mov	r0, sl
 8004532:	f000 faa5 	bl	8004a80 <_free_r>
 8004536:	e7c8      	b.n	80044ca <__ssputs_r+0x46>

08004538 <_svfiprintf_r>:
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	461d      	mov	r5, r3
 800453e:	898b      	ldrh	r3, [r1, #12]
 8004540:	061f      	lsls	r7, r3, #24
 8004542:	b09d      	sub	sp, #116	; 0x74
 8004544:	4680      	mov	r8, r0
 8004546:	460c      	mov	r4, r1
 8004548:	4616      	mov	r6, r2
 800454a:	d50f      	bpl.n	800456c <_svfiprintf_r+0x34>
 800454c:	690b      	ldr	r3, [r1, #16]
 800454e:	b96b      	cbnz	r3, 800456c <_svfiprintf_r+0x34>
 8004550:	2140      	movs	r1, #64	; 0x40
 8004552:	f000 fae3 	bl	8004b1c <_malloc_r>
 8004556:	6020      	str	r0, [r4, #0]
 8004558:	6120      	str	r0, [r4, #16]
 800455a:	b928      	cbnz	r0, 8004568 <_svfiprintf_r+0x30>
 800455c:	230c      	movs	r3, #12
 800455e:	f8c8 3000 	str.w	r3, [r8]
 8004562:	f04f 30ff 	mov.w	r0, #4294967295
 8004566:	e0c8      	b.n	80046fa <_svfiprintf_r+0x1c2>
 8004568:	2340      	movs	r3, #64	; 0x40
 800456a:	6163      	str	r3, [r4, #20]
 800456c:	2300      	movs	r3, #0
 800456e:	9309      	str	r3, [sp, #36]	; 0x24
 8004570:	2320      	movs	r3, #32
 8004572:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004576:	2330      	movs	r3, #48	; 0x30
 8004578:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800457c:	9503      	str	r5, [sp, #12]
 800457e:	f04f 0b01 	mov.w	fp, #1
 8004582:	4637      	mov	r7, r6
 8004584:	463d      	mov	r5, r7
 8004586:	f815 3b01 	ldrb.w	r3, [r5], #1
 800458a:	b10b      	cbz	r3, 8004590 <_svfiprintf_r+0x58>
 800458c:	2b25      	cmp	r3, #37	; 0x25
 800458e:	d13e      	bne.n	800460e <_svfiprintf_r+0xd6>
 8004590:	ebb7 0a06 	subs.w	sl, r7, r6
 8004594:	d00b      	beq.n	80045ae <_svfiprintf_r+0x76>
 8004596:	4653      	mov	r3, sl
 8004598:	4632      	mov	r2, r6
 800459a:	4621      	mov	r1, r4
 800459c:	4640      	mov	r0, r8
 800459e:	f7ff ff71 	bl	8004484 <__ssputs_r>
 80045a2:	3001      	adds	r0, #1
 80045a4:	f000 80a4 	beq.w	80046f0 <_svfiprintf_r+0x1b8>
 80045a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045aa:	4453      	add	r3, sl
 80045ac:	9309      	str	r3, [sp, #36]	; 0x24
 80045ae:	783b      	ldrb	r3, [r7, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 809d 	beq.w	80046f0 <_svfiprintf_r+0x1b8>
 80045b6:	2300      	movs	r3, #0
 80045b8:	f04f 32ff 	mov.w	r2, #4294967295
 80045bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045c0:	9304      	str	r3, [sp, #16]
 80045c2:	9307      	str	r3, [sp, #28]
 80045c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045c8:	931a      	str	r3, [sp, #104]	; 0x68
 80045ca:	462f      	mov	r7, r5
 80045cc:	2205      	movs	r2, #5
 80045ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80045d2:	4850      	ldr	r0, [pc, #320]	; (8004714 <_svfiprintf_r+0x1dc>)
 80045d4:	f7fb fe3c 	bl	8000250 <memchr>
 80045d8:	9b04      	ldr	r3, [sp, #16]
 80045da:	b9d0      	cbnz	r0, 8004612 <_svfiprintf_r+0xda>
 80045dc:	06d9      	lsls	r1, r3, #27
 80045de:	bf44      	itt	mi
 80045e0:	2220      	movmi	r2, #32
 80045e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045e6:	071a      	lsls	r2, r3, #28
 80045e8:	bf44      	itt	mi
 80045ea:	222b      	movmi	r2, #43	; 0x2b
 80045ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80045f0:	782a      	ldrb	r2, [r5, #0]
 80045f2:	2a2a      	cmp	r2, #42	; 0x2a
 80045f4:	d015      	beq.n	8004622 <_svfiprintf_r+0xea>
 80045f6:	9a07      	ldr	r2, [sp, #28]
 80045f8:	462f      	mov	r7, r5
 80045fa:	2000      	movs	r0, #0
 80045fc:	250a      	movs	r5, #10
 80045fe:	4639      	mov	r1, r7
 8004600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004604:	3b30      	subs	r3, #48	; 0x30
 8004606:	2b09      	cmp	r3, #9
 8004608:	d94d      	bls.n	80046a6 <_svfiprintf_r+0x16e>
 800460a:	b1b8      	cbz	r0, 800463c <_svfiprintf_r+0x104>
 800460c:	e00f      	b.n	800462e <_svfiprintf_r+0xf6>
 800460e:	462f      	mov	r7, r5
 8004610:	e7b8      	b.n	8004584 <_svfiprintf_r+0x4c>
 8004612:	4a40      	ldr	r2, [pc, #256]	; (8004714 <_svfiprintf_r+0x1dc>)
 8004614:	1a80      	subs	r0, r0, r2
 8004616:	fa0b f000 	lsl.w	r0, fp, r0
 800461a:	4318      	orrs	r0, r3
 800461c:	9004      	str	r0, [sp, #16]
 800461e:	463d      	mov	r5, r7
 8004620:	e7d3      	b.n	80045ca <_svfiprintf_r+0x92>
 8004622:	9a03      	ldr	r2, [sp, #12]
 8004624:	1d11      	adds	r1, r2, #4
 8004626:	6812      	ldr	r2, [r2, #0]
 8004628:	9103      	str	r1, [sp, #12]
 800462a:	2a00      	cmp	r2, #0
 800462c:	db01      	blt.n	8004632 <_svfiprintf_r+0xfa>
 800462e:	9207      	str	r2, [sp, #28]
 8004630:	e004      	b.n	800463c <_svfiprintf_r+0x104>
 8004632:	4252      	negs	r2, r2
 8004634:	f043 0302 	orr.w	r3, r3, #2
 8004638:	9207      	str	r2, [sp, #28]
 800463a:	9304      	str	r3, [sp, #16]
 800463c:	783b      	ldrb	r3, [r7, #0]
 800463e:	2b2e      	cmp	r3, #46	; 0x2e
 8004640:	d10c      	bne.n	800465c <_svfiprintf_r+0x124>
 8004642:	787b      	ldrb	r3, [r7, #1]
 8004644:	2b2a      	cmp	r3, #42	; 0x2a
 8004646:	d133      	bne.n	80046b0 <_svfiprintf_r+0x178>
 8004648:	9b03      	ldr	r3, [sp, #12]
 800464a:	1d1a      	adds	r2, r3, #4
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	9203      	str	r2, [sp, #12]
 8004650:	2b00      	cmp	r3, #0
 8004652:	bfb8      	it	lt
 8004654:	f04f 33ff 	movlt.w	r3, #4294967295
 8004658:	3702      	adds	r7, #2
 800465a:	9305      	str	r3, [sp, #20]
 800465c:	4d2e      	ldr	r5, [pc, #184]	; (8004718 <_svfiprintf_r+0x1e0>)
 800465e:	7839      	ldrb	r1, [r7, #0]
 8004660:	2203      	movs	r2, #3
 8004662:	4628      	mov	r0, r5
 8004664:	f7fb fdf4 	bl	8000250 <memchr>
 8004668:	b138      	cbz	r0, 800467a <_svfiprintf_r+0x142>
 800466a:	2340      	movs	r3, #64	; 0x40
 800466c:	1b40      	subs	r0, r0, r5
 800466e:	fa03 f000 	lsl.w	r0, r3, r0
 8004672:	9b04      	ldr	r3, [sp, #16]
 8004674:	4303      	orrs	r3, r0
 8004676:	3701      	adds	r7, #1
 8004678:	9304      	str	r3, [sp, #16]
 800467a:	7839      	ldrb	r1, [r7, #0]
 800467c:	4827      	ldr	r0, [pc, #156]	; (800471c <_svfiprintf_r+0x1e4>)
 800467e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004682:	2206      	movs	r2, #6
 8004684:	1c7e      	adds	r6, r7, #1
 8004686:	f7fb fde3 	bl	8000250 <memchr>
 800468a:	2800      	cmp	r0, #0
 800468c:	d038      	beq.n	8004700 <_svfiprintf_r+0x1c8>
 800468e:	4b24      	ldr	r3, [pc, #144]	; (8004720 <_svfiprintf_r+0x1e8>)
 8004690:	bb13      	cbnz	r3, 80046d8 <_svfiprintf_r+0x1a0>
 8004692:	9b03      	ldr	r3, [sp, #12]
 8004694:	3307      	adds	r3, #7
 8004696:	f023 0307 	bic.w	r3, r3, #7
 800469a:	3308      	adds	r3, #8
 800469c:	9303      	str	r3, [sp, #12]
 800469e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a0:	444b      	add	r3, r9
 80046a2:	9309      	str	r3, [sp, #36]	; 0x24
 80046a4:	e76d      	b.n	8004582 <_svfiprintf_r+0x4a>
 80046a6:	fb05 3202 	mla	r2, r5, r2, r3
 80046aa:	2001      	movs	r0, #1
 80046ac:	460f      	mov	r7, r1
 80046ae:	e7a6      	b.n	80045fe <_svfiprintf_r+0xc6>
 80046b0:	2300      	movs	r3, #0
 80046b2:	3701      	adds	r7, #1
 80046b4:	9305      	str	r3, [sp, #20]
 80046b6:	4619      	mov	r1, r3
 80046b8:	250a      	movs	r5, #10
 80046ba:	4638      	mov	r0, r7
 80046bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046c0:	3a30      	subs	r2, #48	; 0x30
 80046c2:	2a09      	cmp	r2, #9
 80046c4:	d903      	bls.n	80046ce <_svfiprintf_r+0x196>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0c8      	beq.n	800465c <_svfiprintf_r+0x124>
 80046ca:	9105      	str	r1, [sp, #20]
 80046cc:	e7c6      	b.n	800465c <_svfiprintf_r+0x124>
 80046ce:	fb05 2101 	mla	r1, r5, r1, r2
 80046d2:	2301      	movs	r3, #1
 80046d4:	4607      	mov	r7, r0
 80046d6:	e7f0      	b.n	80046ba <_svfiprintf_r+0x182>
 80046d8:	ab03      	add	r3, sp, #12
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	4622      	mov	r2, r4
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <_svfiprintf_r+0x1ec>)
 80046e0:	a904      	add	r1, sp, #16
 80046e2:	4640      	mov	r0, r8
 80046e4:	f3af 8000 	nop.w
 80046e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80046ec:	4681      	mov	r9, r0
 80046ee:	d1d6      	bne.n	800469e <_svfiprintf_r+0x166>
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	065b      	lsls	r3, r3, #25
 80046f4:	f53f af35 	bmi.w	8004562 <_svfiprintf_r+0x2a>
 80046f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80046fa:	b01d      	add	sp, #116	; 0x74
 80046fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004700:	ab03      	add	r3, sp, #12
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	4622      	mov	r2, r4
 8004706:	4b07      	ldr	r3, [pc, #28]	; (8004724 <_svfiprintf_r+0x1ec>)
 8004708:	a904      	add	r1, sp, #16
 800470a:	4640      	mov	r0, r8
 800470c:	f000 f882 	bl	8004814 <_printf_i>
 8004710:	e7ea      	b.n	80046e8 <_svfiprintf_r+0x1b0>
 8004712:	bf00      	nop
 8004714:	08004ca8 	.word	0x08004ca8
 8004718:	08004cae 	.word	0x08004cae
 800471c:	08004cb2 	.word	0x08004cb2
 8004720:	00000000 	.word	0x00000000
 8004724:	08004485 	.word	0x08004485

08004728 <_printf_common>:
 8004728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800472c:	4691      	mov	r9, r2
 800472e:	461f      	mov	r7, r3
 8004730:	688a      	ldr	r2, [r1, #8]
 8004732:	690b      	ldr	r3, [r1, #16]
 8004734:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004738:	4293      	cmp	r3, r2
 800473a:	bfb8      	it	lt
 800473c:	4613      	movlt	r3, r2
 800473e:	f8c9 3000 	str.w	r3, [r9]
 8004742:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004746:	4606      	mov	r6, r0
 8004748:	460c      	mov	r4, r1
 800474a:	b112      	cbz	r2, 8004752 <_printf_common+0x2a>
 800474c:	3301      	adds	r3, #1
 800474e:	f8c9 3000 	str.w	r3, [r9]
 8004752:	6823      	ldr	r3, [r4, #0]
 8004754:	0699      	lsls	r1, r3, #26
 8004756:	bf42      	ittt	mi
 8004758:	f8d9 3000 	ldrmi.w	r3, [r9]
 800475c:	3302      	addmi	r3, #2
 800475e:	f8c9 3000 	strmi.w	r3, [r9]
 8004762:	6825      	ldr	r5, [r4, #0]
 8004764:	f015 0506 	ands.w	r5, r5, #6
 8004768:	d107      	bne.n	800477a <_printf_common+0x52>
 800476a:	f104 0a19 	add.w	sl, r4, #25
 800476e:	68e3      	ldr	r3, [r4, #12]
 8004770:	f8d9 2000 	ldr.w	r2, [r9]
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	42ab      	cmp	r3, r5
 8004778:	dc28      	bgt.n	80047cc <_printf_common+0xa4>
 800477a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800477e:	6822      	ldr	r2, [r4, #0]
 8004780:	3300      	adds	r3, #0
 8004782:	bf18      	it	ne
 8004784:	2301      	movne	r3, #1
 8004786:	0692      	lsls	r2, r2, #26
 8004788:	d42d      	bmi.n	80047e6 <_printf_common+0xbe>
 800478a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800478e:	4639      	mov	r1, r7
 8004790:	4630      	mov	r0, r6
 8004792:	47c0      	blx	r8
 8004794:	3001      	adds	r0, #1
 8004796:	d020      	beq.n	80047da <_printf_common+0xb2>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	68e5      	ldr	r5, [r4, #12]
 800479c:	f8d9 2000 	ldr.w	r2, [r9]
 80047a0:	f003 0306 	and.w	r3, r3, #6
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	bf08      	it	eq
 80047a8:	1aad      	subeq	r5, r5, r2
 80047aa:	68a3      	ldr	r3, [r4, #8]
 80047ac:	6922      	ldr	r2, [r4, #16]
 80047ae:	bf0c      	ite	eq
 80047b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047b4:	2500      	movne	r5, #0
 80047b6:	4293      	cmp	r3, r2
 80047b8:	bfc4      	itt	gt
 80047ba:	1a9b      	subgt	r3, r3, r2
 80047bc:	18ed      	addgt	r5, r5, r3
 80047be:	f04f 0900 	mov.w	r9, #0
 80047c2:	341a      	adds	r4, #26
 80047c4:	454d      	cmp	r5, r9
 80047c6:	d11a      	bne.n	80047fe <_printf_common+0xd6>
 80047c8:	2000      	movs	r0, #0
 80047ca:	e008      	b.n	80047de <_printf_common+0xb6>
 80047cc:	2301      	movs	r3, #1
 80047ce:	4652      	mov	r2, sl
 80047d0:	4639      	mov	r1, r7
 80047d2:	4630      	mov	r0, r6
 80047d4:	47c0      	blx	r8
 80047d6:	3001      	adds	r0, #1
 80047d8:	d103      	bne.n	80047e2 <_printf_common+0xba>
 80047da:	f04f 30ff 	mov.w	r0, #4294967295
 80047de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e2:	3501      	adds	r5, #1
 80047e4:	e7c3      	b.n	800476e <_printf_common+0x46>
 80047e6:	18e1      	adds	r1, r4, r3
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	2030      	movs	r0, #48	; 0x30
 80047ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047f0:	4422      	add	r2, r4
 80047f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047fa:	3302      	adds	r3, #2
 80047fc:	e7c5      	b.n	800478a <_printf_common+0x62>
 80047fe:	2301      	movs	r3, #1
 8004800:	4622      	mov	r2, r4
 8004802:	4639      	mov	r1, r7
 8004804:	4630      	mov	r0, r6
 8004806:	47c0      	blx	r8
 8004808:	3001      	adds	r0, #1
 800480a:	d0e6      	beq.n	80047da <_printf_common+0xb2>
 800480c:	f109 0901 	add.w	r9, r9, #1
 8004810:	e7d8      	b.n	80047c4 <_printf_common+0x9c>
	...

08004814 <_printf_i>:
 8004814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004818:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800481c:	460c      	mov	r4, r1
 800481e:	7e09      	ldrb	r1, [r1, #24]
 8004820:	b085      	sub	sp, #20
 8004822:	296e      	cmp	r1, #110	; 0x6e
 8004824:	4617      	mov	r7, r2
 8004826:	4606      	mov	r6, r0
 8004828:	4698      	mov	r8, r3
 800482a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800482c:	f000 80b3 	beq.w	8004996 <_printf_i+0x182>
 8004830:	d822      	bhi.n	8004878 <_printf_i+0x64>
 8004832:	2963      	cmp	r1, #99	; 0x63
 8004834:	d036      	beq.n	80048a4 <_printf_i+0x90>
 8004836:	d80a      	bhi.n	800484e <_printf_i+0x3a>
 8004838:	2900      	cmp	r1, #0
 800483a:	f000 80b9 	beq.w	80049b0 <_printf_i+0x19c>
 800483e:	2958      	cmp	r1, #88	; 0x58
 8004840:	f000 8083 	beq.w	800494a <_printf_i+0x136>
 8004844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004848:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800484c:	e032      	b.n	80048b4 <_printf_i+0xa0>
 800484e:	2964      	cmp	r1, #100	; 0x64
 8004850:	d001      	beq.n	8004856 <_printf_i+0x42>
 8004852:	2969      	cmp	r1, #105	; 0x69
 8004854:	d1f6      	bne.n	8004844 <_printf_i+0x30>
 8004856:	6820      	ldr	r0, [r4, #0]
 8004858:	6813      	ldr	r3, [r2, #0]
 800485a:	0605      	lsls	r5, r0, #24
 800485c:	f103 0104 	add.w	r1, r3, #4
 8004860:	d52a      	bpl.n	80048b8 <_printf_i+0xa4>
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6011      	str	r1, [r2, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	da03      	bge.n	8004872 <_printf_i+0x5e>
 800486a:	222d      	movs	r2, #45	; 0x2d
 800486c:	425b      	negs	r3, r3
 800486e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004872:	486f      	ldr	r0, [pc, #444]	; (8004a30 <_printf_i+0x21c>)
 8004874:	220a      	movs	r2, #10
 8004876:	e039      	b.n	80048ec <_printf_i+0xd8>
 8004878:	2973      	cmp	r1, #115	; 0x73
 800487a:	f000 809d 	beq.w	80049b8 <_printf_i+0x1a4>
 800487e:	d808      	bhi.n	8004892 <_printf_i+0x7e>
 8004880:	296f      	cmp	r1, #111	; 0x6f
 8004882:	d020      	beq.n	80048c6 <_printf_i+0xb2>
 8004884:	2970      	cmp	r1, #112	; 0x70
 8004886:	d1dd      	bne.n	8004844 <_printf_i+0x30>
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	f043 0320 	orr.w	r3, r3, #32
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	e003      	b.n	800489a <_printf_i+0x86>
 8004892:	2975      	cmp	r1, #117	; 0x75
 8004894:	d017      	beq.n	80048c6 <_printf_i+0xb2>
 8004896:	2978      	cmp	r1, #120	; 0x78
 8004898:	d1d4      	bne.n	8004844 <_printf_i+0x30>
 800489a:	2378      	movs	r3, #120	; 0x78
 800489c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048a0:	4864      	ldr	r0, [pc, #400]	; (8004a34 <_printf_i+0x220>)
 80048a2:	e055      	b.n	8004950 <_printf_i+0x13c>
 80048a4:	6813      	ldr	r3, [r2, #0]
 80048a6:	1d19      	adds	r1, r3, #4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6011      	str	r1, [r2, #0]
 80048ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048b4:	2301      	movs	r3, #1
 80048b6:	e08c      	b.n	80049d2 <_printf_i+0x1be>
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6011      	str	r1, [r2, #0]
 80048bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048c0:	bf18      	it	ne
 80048c2:	b21b      	sxthne	r3, r3
 80048c4:	e7cf      	b.n	8004866 <_printf_i+0x52>
 80048c6:	6813      	ldr	r3, [r2, #0]
 80048c8:	6825      	ldr	r5, [r4, #0]
 80048ca:	1d18      	adds	r0, r3, #4
 80048cc:	6010      	str	r0, [r2, #0]
 80048ce:	0628      	lsls	r0, r5, #24
 80048d0:	d501      	bpl.n	80048d6 <_printf_i+0xc2>
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	e002      	b.n	80048dc <_printf_i+0xc8>
 80048d6:	0668      	lsls	r0, r5, #25
 80048d8:	d5fb      	bpl.n	80048d2 <_printf_i+0xbe>
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	4854      	ldr	r0, [pc, #336]	; (8004a30 <_printf_i+0x21c>)
 80048de:	296f      	cmp	r1, #111	; 0x6f
 80048e0:	bf14      	ite	ne
 80048e2:	220a      	movne	r2, #10
 80048e4:	2208      	moveq	r2, #8
 80048e6:	2100      	movs	r1, #0
 80048e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048ec:	6865      	ldr	r5, [r4, #4]
 80048ee:	60a5      	str	r5, [r4, #8]
 80048f0:	2d00      	cmp	r5, #0
 80048f2:	f2c0 8095 	blt.w	8004a20 <_printf_i+0x20c>
 80048f6:	6821      	ldr	r1, [r4, #0]
 80048f8:	f021 0104 	bic.w	r1, r1, #4
 80048fc:	6021      	str	r1, [r4, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d13d      	bne.n	800497e <_printf_i+0x16a>
 8004902:	2d00      	cmp	r5, #0
 8004904:	f040 808e 	bne.w	8004a24 <_printf_i+0x210>
 8004908:	4665      	mov	r5, ip
 800490a:	2a08      	cmp	r2, #8
 800490c:	d10b      	bne.n	8004926 <_printf_i+0x112>
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	07db      	lsls	r3, r3, #31
 8004912:	d508      	bpl.n	8004926 <_printf_i+0x112>
 8004914:	6923      	ldr	r3, [r4, #16]
 8004916:	6862      	ldr	r2, [r4, #4]
 8004918:	429a      	cmp	r2, r3
 800491a:	bfde      	ittt	le
 800491c:	2330      	movle	r3, #48	; 0x30
 800491e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004922:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004926:	ebac 0305 	sub.w	r3, ip, r5
 800492a:	6123      	str	r3, [r4, #16]
 800492c:	f8cd 8000 	str.w	r8, [sp]
 8004930:	463b      	mov	r3, r7
 8004932:	aa03      	add	r2, sp, #12
 8004934:	4621      	mov	r1, r4
 8004936:	4630      	mov	r0, r6
 8004938:	f7ff fef6 	bl	8004728 <_printf_common>
 800493c:	3001      	adds	r0, #1
 800493e:	d14d      	bne.n	80049dc <_printf_i+0x1c8>
 8004940:	f04f 30ff 	mov.w	r0, #4294967295
 8004944:	b005      	add	sp, #20
 8004946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800494a:	4839      	ldr	r0, [pc, #228]	; (8004a30 <_printf_i+0x21c>)
 800494c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004950:	6813      	ldr	r3, [r2, #0]
 8004952:	6821      	ldr	r1, [r4, #0]
 8004954:	1d1d      	adds	r5, r3, #4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6015      	str	r5, [r2, #0]
 800495a:	060a      	lsls	r2, r1, #24
 800495c:	d50b      	bpl.n	8004976 <_printf_i+0x162>
 800495e:	07ca      	lsls	r2, r1, #31
 8004960:	bf44      	itt	mi
 8004962:	f041 0120 	orrmi.w	r1, r1, #32
 8004966:	6021      	strmi	r1, [r4, #0]
 8004968:	b91b      	cbnz	r3, 8004972 <_printf_i+0x15e>
 800496a:	6822      	ldr	r2, [r4, #0]
 800496c:	f022 0220 	bic.w	r2, r2, #32
 8004970:	6022      	str	r2, [r4, #0]
 8004972:	2210      	movs	r2, #16
 8004974:	e7b7      	b.n	80048e6 <_printf_i+0xd2>
 8004976:	064d      	lsls	r5, r1, #25
 8004978:	bf48      	it	mi
 800497a:	b29b      	uxthmi	r3, r3
 800497c:	e7ef      	b.n	800495e <_printf_i+0x14a>
 800497e:	4665      	mov	r5, ip
 8004980:	fbb3 f1f2 	udiv	r1, r3, r2
 8004984:	fb02 3311 	mls	r3, r2, r1, r3
 8004988:	5cc3      	ldrb	r3, [r0, r3]
 800498a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800498e:	460b      	mov	r3, r1
 8004990:	2900      	cmp	r1, #0
 8004992:	d1f5      	bne.n	8004980 <_printf_i+0x16c>
 8004994:	e7b9      	b.n	800490a <_printf_i+0xf6>
 8004996:	6813      	ldr	r3, [r2, #0]
 8004998:	6825      	ldr	r5, [r4, #0]
 800499a:	6961      	ldr	r1, [r4, #20]
 800499c:	1d18      	adds	r0, r3, #4
 800499e:	6010      	str	r0, [r2, #0]
 80049a0:	0628      	lsls	r0, r5, #24
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	d501      	bpl.n	80049aa <_printf_i+0x196>
 80049a6:	6019      	str	r1, [r3, #0]
 80049a8:	e002      	b.n	80049b0 <_printf_i+0x19c>
 80049aa:	066a      	lsls	r2, r5, #25
 80049ac:	d5fb      	bpl.n	80049a6 <_printf_i+0x192>
 80049ae:	8019      	strh	r1, [r3, #0]
 80049b0:	2300      	movs	r3, #0
 80049b2:	6123      	str	r3, [r4, #16]
 80049b4:	4665      	mov	r5, ip
 80049b6:	e7b9      	b.n	800492c <_printf_i+0x118>
 80049b8:	6813      	ldr	r3, [r2, #0]
 80049ba:	1d19      	adds	r1, r3, #4
 80049bc:	6011      	str	r1, [r2, #0]
 80049be:	681d      	ldr	r5, [r3, #0]
 80049c0:	6862      	ldr	r2, [r4, #4]
 80049c2:	2100      	movs	r1, #0
 80049c4:	4628      	mov	r0, r5
 80049c6:	f7fb fc43 	bl	8000250 <memchr>
 80049ca:	b108      	cbz	r0, 80049d0 <_printf_i+0x1bc>
 80049cc:	1b40      	subs	r0, r0, r5
 80049ce:	6060      	str	r0, [r4, #4]
 80049d0:	6863      	ldr	r3, [r4, #4]
 80049d2:	6123      	str	r3, [r4, #16]
 80049d4:	2300      	movs	r3, #0
 80049d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049da:	e7a7      	b.n	800492c <_printf_i+0x118>
 80049dc:	6923      	ldr	r3, [r4, #16]
 80049de:	462a      	mov	r2, r5
 80049e0:	4639      	mov	r1, r7
 80049e2:	4630      	mov	r0, r6
 80049e4:	47c0      	blx	r8
 80049e6:	3001      	adds	r0, #1
 80049e8:	d0aa      	beq.n	8004940 <_printf_i+0x12c>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	079b      	lsls	r3, r3, #30
 80049ee:	d413      	bmi.n	8004a18 <_printf_i+0x204>
 80049f0:	68e0      	ldr	r0, [r4, #12]
 80049f2:	9b03      	ldr	r3, [sp, #12]
 80049f4:	4298      	cmp	r0, r3
 80049f6:	bfb8      	it	lt
 80049f8:	4618      	movlt	r0, r3
 80049fa:	e7a3      	b.n	8004944 <_printf_i+0x130>
 80049fc:	2301      	movs	r3, #1
 80049fe:	464a      	mov	r2, r9
 8004a00:	4639      	mov	r1, r7
 8004a02:	4630      	mov	r0, r6
 8004a04:	47c0      	blx	r8
 8004a06:	3001      	adds	r0, #1
 8004a08:	d09a      	beq.n	8004940 <_printf_i+0x12c>
 8004a0a:	3501      	adds	r5, #1
 8004a0c:	68e3      	ldr	r3, [r4, #12]
 8004a0e:	9a03      	ldr	r2, [sp, #12]
 8004a10:	1a9b      	subs	r3, r3, r2
 8004a12:	42ab      	cmp	r3, r5
 8004a14:	dcf2      	bgt.n	80049fc <_printf_i+0x1e8>
 8004a16:	e7eb      	b.n	80049f0 <_printf_i+0x1dc>
 8004a18:	2500      	movs	r5, #0
 8004a1a:	f104 0919 	add.w	r9, r4, #25
 8004a1e:	e7f5      	b.n	8004a0c <_printf_i+0x1f8>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1ac      	bne.n	800497e <_printf_i+0x16a>
 8004a24:	7803      	ldrb	r3, [r0, #0]
 8004a26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a2a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a2e:	e76c      	b.n	800490a <_printf_i+0xf6>
 8004a30:	08004cb9 	.word	0x08004cb9
 8004a34:	08004cca 	.word	0x08004cca

08004a38 <memcpy>:
 8004a38:	b510      	push	{r4, lr}
 8004a3a:	1e43      	subs	r3, r0, #1
 8004a3c:	440a      	add	r2, r1
 8004a3e:	4291      	cmp	r1, r2
 8004a40:	d100      	bne.n	8004a44 <memcpy+0xc>
 8004a42:	bd10      	pop	{r4, pc}
 8004a44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a4c:	e7f7      	b.n	8004a3e <memcpy+0x6>

08004a4e <memmove>:
 8004a4e:	4288      	cmp	r0, r1
 8004a50:	b510      	push	{r4, lr}
 8004a52:	eb01 0302 	add.w	r3, r1, r2
 8004a56:	d807      	bhi.n	8004a68 <memmove+0x1a>
 8004a58:	1e42      	subs	r2, r0, #1
 8004a5a:	4299      	cmp	r1, r3
 8004a5c:	d00a      	beq.n	8004a74 <memmove+0x26>
 8004a5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a62:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004a66:	e7f8      	b.n	8004a5a <memmove+0xc>
 8004a68:	4283      	cmp	r3, r0
 8004a6a:	d9f5      	bls.n	8004a58 <memmove+0xa>
 8004a6c:	1881      	adds	r1, r0, r2
 8004a6e:	1ad2      	subs	r2, r2, r3
 8004a70:	42d3      	cmn	r3, r2
 8004a72:	d100      	bne.n	8004a76 <memmove+0x28>
 8004a74:	bd10      	pop	{r4, pc}
 8004a76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a7a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004a7e:	e7f7      	b.n	8004a70 <memmove+0x22>

08004a80 <_free_r>:
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4605      	mov	r5, r0
 8004a84:	2900      	cmp	r1, #0
 8004a86:	d045      	beq.n	8004b14 <_free_r+0x94>
 8004a88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a8c:	1f0c      	subs	r4, r1, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	bfb8      	it	lt
 8004a92:	18e4      	addlt	r4, r4, r3
 8004a94:	f000 f8d2 	bl	8004c3c <__malloc_lock>
 8004a98:	4a1f      	ldr	r2, [pc, #124]	; (8004b18 <_free_r+0x98>)
 8004a9a:	6813      	ldr	r3, [r2, #0]
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	b933      	cbnz	r3, 8004aae <_free_r+0x2e>
 8004aa0:	6063      	str	r3, [r4, #4]
 8004aa2:	6014      	str	r4, [r2, #0]
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004aaa:	f000 b8c8 	b.w	8004c3e <__malloc_unlock>
 8004aae:	42a3      	cmp	r3, r4
 8004ab0:	d90c      	bls.n	8004acc <_free_r+0x4c>
 8004ab2:	6821      	ldr	r1, [r4, #0]
 8004ab4:	1862      	adds	r2, r4, r1
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	bf04      	itt	eq
 8004aba:	681a      	ldreq	r2, [r3, #0]
 8004abc:	685b      	ldreq	r3, [r3, #4]
 8004abe:	6063      	str	r3, [r4, #4]
 8004ac0:	bf04      	itt	eq
 8004ac2:	1852      	addeq	r2, r2, r1
 8004ac4:	6022      	streq	r2, [r4, #0]
 8004ac6:	6004      	str	r4, [r0, #0]
 8004ac8:	e7ec      	b.n	8004aa4 <_free_r+0x24>
 8004aca:	4613      	mov	r3, r2
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	b10a      	cbz	r2, 8004ad4 <_free_r+0x54>
 8004ad0:	42a2      	cmp	r2, r4
 8004ad2:	d9fa      	bls.n	8004aca <_free_r+0x4a>
 8004ad4:	6819      	ldr	r1, [r3, #0]
 8004ad6:	1858      	adds	r0, r3, r1
 8004ad8:	42a0      	cmp	r0, r4
 8004ada:	d10b      	bne.n	8004af4 <_free_r+0x74>
 8004adc:	6820      	ldr	r0, [r4, #0]
 8004ade:	4401      	add	r1, r0
 8004ae0:	1858      	adds	r0, r3, r1
 8004ae2:	4282      	cmp	r2, r0
 8004ae4:	6019      	str	r1, [r3, #0]
 8004ae6:	d1dd      	bne.n	8004aa4 <_free_r+0x24>
 8004ae8:	6810      	ldr	r0, [r2, #0]
 8004aea:	6852      	ldr	r2, [r2, #4]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	4401      	add	r1, r0
 8004af0:	6019      	str	r1, [r3, #0]
 8004af2:	e7d7      	b.n	8004aa4 <_free_r+0x24>
 8004af4:	d902      	bls.n	8004afc <_free_r+0x7c>
 8004af6:	230c      	movs	r3, #12
 8004af8:	602b      	str	r3, [r5, #0]
 8004afa:	e7d3      	b.n	8004aa4 <_free_r+0x24>
 8004afc:	6820      	ldr	r0, [r4, #0]
 8004afe:	1821      	adds	r1, r4, r0
 8004b00:	428a      	cmp	r2, r1
 8004b02:	bf04      	itt	eq
 8004b04:	6811      	ldreq	r1, [r2, #0]
 8004b06:	6852      	ldreq	r2, [r2, #4]
 8004b08:	6062      	str	r2, [r4, #4]
 8004b0a:	bf04      	itt	eq
 8004b0c:	1809      	addeq	r1, r1, r0
 8004b0e:	6021      	streq	r1, [r4, #0]
 8004b10:	605c      	str	r4, [r3, #4]
 8004b12:	e7c7      	b.n	8004aa4 <_free_r+0x24>
 8004b14:	bd38      	pop	{r3, r4, r5, pc}
 8004b16:	bf00      	nop
 8004b18:	20000098 	.word	0x20000098

08004b1c <_malloc_r>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	1ccd      	adds	r5, r1, #3
 8004b20:	f025 0503 	bic.w	r5, r5, #3
 8004b24:	3508      	adds	r5, #8
 8004b26:	2d0c      	cmp	r5, #12
 8004b28:	bf38      	it	cc
 8004b2a:	250c      	movcc	r5, #12
 8004b2c:	2d00      	cmp	r5, #0
 8004b2e:	4606      	mov	r6, r0
 8004b30:	db01      	blt.n	8004b36 <_malloc_r+0x1a>
 8004b32:	42a9      	cmp	r1, r5
 8004b34:	d903      	bls.n	8004b3e <_malloc_r+0x22>
 8004b36:	230c      	movs	r3, #12
 8004b38:	6033      	str	r3, [r6, #0]
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	bd70      	pop	{r4, r5, r6, pc}
 8004b3e:	f000 f87d 	bl	8004c3c <__malloc_lock>
 8004b42:	4a21      	ldr	r2, [pc, #132]	; (8004bc8 <_malloc_r+0xac>)
 8004b44:	6814      	ldr	r4, [r2, #0]
 8004b46:	4621      	mov	r1, r4
 8004b48:	b991      	cbnz	r1, 8004b70 <_malloc_r+0x54>
 8004b4a:	4c20      	ldr	r4, [pc, #128]	; (8004bcc <_malloc_r+0xb0>)
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	b91b      	cbnz	r3, 8004b58 <_malloc_r+0x3c>
 8004b50:	4630      	mov	r0, r6
 8004b52:	f000 f863 	bl	8004c1c <_sbrk_r>
 8004b56:	6020      	str	r0, [r4, #0]
 8004b58:	4629      	mov	r1, r5
 8004b5a:	4630      	mov	r0, r6
 8004b5c:	f000 f85e 	bl	8004c1c <_sbrk_r>
 8004b60:	1c43      	adds	r3, r0, #1
 8004b62:	d124      	bne.n	8004bae <_malloc_r+0x92>
 8004b64:	230c      	movs	r3, #12
 8004b66:	6033      	str	r3, [r6, #0]
 8004b68:	4630      	mov	r0, r6
 8004b6a:	f000 f868 	bl	8004c3e <__malloc_unlock>
 8004b6e:	e7e4      	b.n	8004b3a <_malloc_r+0x1e>
 8004b70:	680b      	ldr	r3, [r1, #0]
 8004b72:	1b5b      	subs	r3, r3, r5
 8004b74:	d418      	bmi.n	8004ba8 <_malloc_r+0x8c>
 8004b76:	2b0b      	cmp	r3, #11
 8004b78:	d90f      	bls.n	8004b9a <_malloc_r+0x7e>
 8004b7a:	600b      	str	r3, [r1, #0]
 8004b7c:	50cd      	str	r5, [r1, r3]
 8004b7e:	18cc      	adds	r4, r1, r3
 8004b80:	4630      	mov	r0, r6
 8004b82:	f000 f85c 	bl	8004c3e <__malloc_unlock>
 8004b86:	f104 000b 	add.w	r0, r4, #11
 8004b8a:	1d23      	adds	r3, r4, #4
 8004b8c:	f020 0007 	bic.w	r0, r0, #7
 8004b90:	1ac3      	subs	r3, r0, r3
 8004b92:	d0d3      	beq.n	8004b3c <_malloc_r+0x20>
 8004b94:	425a      	negs	r2, r3
 8004b96:	50e2      	str	r2, [r4, r3]
 8004b98:	e7d0      	b.n	8004b3c <_malloc_r+0x20>
 8004b9a:	428c      	cmp	r4, r1
 8004b9c:	684b      	ldr	r3, [r1, #4]
 8004b9e:	bf16      	itet	ne
 8004ba0:	6063      	strne	r3, [r4, #4]
 8004ba2:	6013      	streq	r3, [r2, #0]
 8004ba4:	460c      	movne	r4, r1
 8004ba6:	e7eb      	b.n	8004b80 <_malloc_r+0x64>
 8004ba8:	460c      	mov	r4, r1
 8004baa:	6849      	ldr	r1, [r1, #4]
 8004bac:	e7cc      	b.n	8004b48 <_malloc_r+0x2c>
 8004bae:	1cc4      	adds	r4, r0, #3
 8004bb0:	f024 0403 	bic.w	r4, r4, #3
 8004bb4:	42a0      	cmp	r0, r4
 8004bb6:	d005      	beq.n	8004bc4 <_malloc_r+0xa8>
 8004bb8:	1a21      	subs	r1, r4, r0
 8004bba:	4630      	mov	r0, r6
 8004bbc:	f000 f82e 	bl	8004c1c <_sbrk_r>
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d0cf      	beq.n	8004b64 <_malloc_r+0x48>
 8004bc4:	6025      	str	r5, [r4, #0]
 8004bc6:	e7db      	b.n	8004b80 <_malloc_r+0x64>
 8004bc8:	20000098 	.word	0x20000098
 8004bcc:	2000009c 	.word	0x2000009c

08004bd0 <_realloc_r>:
 8004bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bd2:	4607      	mov	r7, r0
 8004bd4:	4614      	mov	r4, r2
 8004bd6:	460e      	mov	r6, r1
 8004bd8:	b921      	cbnz	r1, 8004be4 <_realloc_r+0x14>
 8004bda:	4611      	mov	r1, r2
 8004bdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004be0:	f7ff bf9c 	b.w	8004b1c <_malloc_r>
 8004be4:	b922      	cbnz	r2, 8004bf0 <_realloc_r+0x20>
 8004be6:	f7ff ff4b 	bl	8004a80 <_free_r>
 8004bea:	4625      	mov	r5, r4
 8004bec:	4628      	mov	r0, r5
 8004bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bf0:	f000 f826 	bl	8004c40 <_malloc_usable_size_r>
 8004bf4:	42a0      	cmp	r0, r4
 8004bf6:	d20f      	bcs.n	8004c18 <_realloc_r+0x48>
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	f7ff ff8e 	bl	8004b1c <_malloc_r>
 8004c00:	4605      	mov	r5, r0
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d0f2      	beq.n	8004bec <_realloc_r+0x1c>
 8004c06:	4631      	mov	r1, r6
 8004c08:	4622      	mov	r2, r4
 8004c0a:	f7ff ff15 	bl	8004a38 <memcpy>
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4638      	mov	r0, r7
 8004c12:	f7ff ff35 	bl	8004a80 <_free_r>
 8004c16:	e7e9      	b.n	8004bec <_realloc_r+0x1c>
 8004c18:	4635      	mov	r5, r6
 8004c1a:	e7e7      	b.n	8004bec <_realloc_r+0x1c>

08004c1c <_sbrk_r>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	4c06      	ldr	r4, [pc, #24]	; (8004c38 <_sbrk_r+0x1c>)
 8004c20:	2300      	movs	r3, #0
 8004c22:	4605      	mov	r5, r0
 8004c24:	4608      	mov	r0, r1
 8004c26:	6023      	str	r3, [r4, #0]
 8004c28:	f7fc fc54 	bl	80014d4 <_sbrk>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d102      	bne.n	8004c36 <_sbrk_r+0x1a>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	b103      	cbz	r3, 8004c36 <_sbrk_r+0x1a>
 8004c34:	602b      	str	r3, [r5, #0]
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	20000570 	.word	0x20000570

08004c3c <__malloc_lock>:
 8004c3c:	4770      	bx	lr

08004c3e <__malloc_unlock>:
 8004c3e:	4770      	bx	lr

08004c40 <_malloc_usable_size_r>:
 8004c40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c44:	1f18      	subs	r0, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	bfbc      	itt	lt
 8004c4a:	580b      	ldrlt	r3, [r1, r0]
 8004c4c:	18c0      	addlt	r0, r0, r3
 8004c4e:	4770      	bx	lr

08004c50 <_init>:
 8004c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c52:	bf00      	nop
 8004c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c56:	bc08      	pop	{r3}
 8004c58:	469e      	mov	lr, r3
 8004c5a:	4770      	bx	lr

08004c5c <_fini>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr
